statNames = {Crippled=0, Obscured=0, Damage = 0, Hazard = 0, Shredded_Defenses = 0, Sturginium_Flare = 0, Navigation_Lock = 0, Reactor_Leak = 0, Magazine_Explosion = 0, Generator_Offline = 0}
statMaxes = {Crippled=1, Obscured=1, Damage = nil, Hazard = nil, Shredded_Defenses = 1, Sturginium_Flare = 1, Navigation_Lock=1, Reactor_Leak = 1, Magazine_Explosion = 1, Generator_Offline = 1}

statsObj = "6c1b20"

function UI_onLoad(save_state)
  if save_state ~= "" and self.getDescription() ~= "" then
    saved_data = JSON.decode(save_state)
    if saved_data.statNames then statNames = saved_data.statNames end
  end
  Wait.condition(checkStats, checkLoaded)
  --createBtns()
end

function checkLoaded()
  if not self.loading_custom and not self.spawning then
    return true
  end
  return false
end

function checkStats()
  for i,j in pairs(statNames) do
    if j == true then
      self.UI.setAttribute(i, "active", true)
    end
  end
  Wait.frames(function() self.UI.setAttribute("statePanel", "width", 300*2 + (getStatsCount()-1)*350*2) end, 1)
  -- local num = self.getName():match("%d+")
  -- if num ~= nil then
  --   self.UI.setAttribute("number", "image", num)
  -- end
end

function onSave()
  local save_state = JSON.encode({health = health, shield = shield, statNames = statNames})
  -- local save_state = ""
  self.script_state = save_state
end

function API_onClick(id)
    local has_id = statNames[id]>0
    if has_id then
        onClick(-1, -1, id)
    end
    return has_id
end
function onClick(player, value, id)
  if statNames[id] ~= nil then
    local oldValue = statNames[id]
    local newValue =statNames[id] - 1
    printToAll(self.getName().." sheds a "..id.." token",{0,1,0})
    statNames[id] = newValue
    if statNames[id]==0 then
        self.UI.setAttribute(id, "active", false)
        self.UI.setAttribute("statePanel", "width", 260*2 + (getStatsCount()-1)*280*2)
    end
    if statNames[id]<2 then
        self.UI.setAttribute(id.."_2", "active", false)
    end
    if statNames[id]<3 then
        self.UI.setAttribute(id.."_3", "active", false)
    end
    if statNames[id]<4 then
        self.UI.setAttribute(id.."_4", "active", false)
    end
    if statNames[id]>4 then
        self.UI.setAttribute(id.."_num","text",statNames[id])
    else
        self.UI.setAttribute(id.."_num","text","")
    end
  end
end
-- function onDrop(color)
--     self.UI.setAttribute("panel","rotation","0 0 "..tostring(self.getRotation()[2]))
-- end

function onCollisionEnter(a)
  local id = a.collision_object.getName()
  id = id:gsub("%s","_")
  if string.starts(id,"Reinforce") then
      id="Reinforce"
  end
  if statNames[id] ~= nil then
    a.collision_object.destruct()
    incrementStat(id)
  end
end
function incrementStat(id)
  local oldValue = statNames[id]
  local newValue = statNames[id]+1
  if statMaxes[id] then
      newValue = math.min(newValue, statMaxes[id])
  end
  if oldValue!=newValue then
      printToAll(self.getName().." adds a "..id.." token",{0,1,0})
      --printToAll("Increase "..id.." from "..oldValue.." to "..newValue,{0,1,0})
      statNames[id]=newValue
      self.UI.setAttribute(id, "active", true)

      if statNames[id]>1 then
          self.UI.setAttribute(id.."_2", "active", true)
      end
      if statNames[id]>2 then
          self.UI.setAttribute(id.."_3", "active", true)
      end
      if statNames[id]>3 then
          self.UI.setAttribute(id.."_4", "active", true)
      end
      if statNames[id]>4 then
          self.UI.setAttribute(id.."_num","text",statNames[id])
      else
          self.UI.setAttribute(id.."_num","text","")
      end
      Wait.frames(function() self.UI.setAttribute("statePanel", "width", 260*2 + (getStatsCount()-1)*265*2) end, 1)
  end
end

function getStatsCount()
  local count = 0
  for i,j in pairs(statNames) do
    if self.UI.getAttribute(i, "active") == "True" then
      count = count + 1
    end
  end
  return count
end
