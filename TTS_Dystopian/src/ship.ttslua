
local width=0.5
local length=2
local height=1
local inch_to_ui_units = 200
#include ship_token_ui
function onLoad(save_state)
    loadSize()
    UI_onLoad(save_state)
end
function onObjectSpawn()
    loadSize()
end
function loadSize()
    local desc = self.getDescription()
    paramlist = string.split(desc,",")
    if #paramlist==3 then
        width=tonumber(paramlist[1])
        length=tonumber(paramlist[2])
        height=tonumber(paramlist[3])
    end
    self.UI.setAttribute("scaleWrapper", "scale", (0.5/self.getScale()[1]).." "..(0.5/self.getScale()[2]).." "..(0.5/self.getScale()[3]))
    self.UI.setAttribute("frontHull", "position", "0 "..tostring(length/2*inch_to_ui_units).." -20")
    self.UI.setAttribute("aftHull", "position", "0 "..tostring(-length/2*inch_to_ui_units).." -20")
    self.UI.setAttribute("aim", "position", "0 0 "..tostring(-height*inch_to_ui_units))
    self.UI.setAttribute("zero", "position", "0 100 "..tostring(-height*inch_to_ui_units))
    self.UI.setAttribute("move", "position", "0 "..tostring(length/2*inch_to_ui_units).." "..tostring(-height*inch_to_ui_units))
    self.UI.setAttribute("moveBack", "position", "0 "..tostring(-length/2*inch_to_ui_units).." "..tostring(-height*inch_to_ui_units))
    self.UI.setAttribute("leftHull", "position", tostring(-width/2*inch_to_ui_units).." 0 -20")
    self.UI.setAttribute("leftHullb", "position", tostring(-width/2*inch_to_ui_units).." 0 -20")
    self.UI.setAttribute("left_25", "position", tostring((width/2)*inch_to_ui_units).." "..tostring((1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("left_20", "position", tostring((width/2)*inch_to_ui_units).." "..tostring((1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("left_15", "position", tostring((width/2)*inch_to_ui_units).." "..tostring((1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("left_10", "position", tostring((width/2)*inch_to_ui_units).." "..tostring((1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("left_05", "position", tostring((width/2)*inch_to_ui_units).." "..tostring((1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("right_25", "position", tostring((-width/2)*inch_to_ui_units).." "..tostring((1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("right_20", "position", tostring((-width/2)*inch_to_ui_units).." "..tostring((1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("right_15", "position", tostring((-width/2)*inch_to_ui_units).." "..tostring((1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("right_10", "position", tostring((-width/2)*inch_to_ui_units).." "..tostring((1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("right_05", "position", tostring((-width/2)*inch_to_ui_units).." "..tostring((1+length/2)*inch_to_ui_units).." 0")

    self.UI.setAttribute("left_25b", "position", tostring((width/2)*inch_to_ui_units).." "..tostring(-(1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("left_20b", "position", tostring((width/2)*inch_to_ui_units).." "..tostring(-(1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("left_15b", "position", tostring((width/2)*inch_to_ui_units).." "..tostring(-(1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("left_10b", "position", tostring((width/2)*inch_to_ui_units).." "..tostring(-(1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("left_05b", "position", tostring((width/2)*inch_to_ui_units).." "..tostring(-(1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("right_25b", "position", tostring((-width/2)*inch_to_ui_units).." "..tostring(-(1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("right_20b", "position", tostring((-width/2)*inch_to_ui_units).." "..tostring(-(1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("right_15b", "position", tostring((-width/2)*inch_to_ui_units).." "..tostring(-(1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("right_10b", "position", tostring((-width/2)*inch_to_ui_units).." "..tostring(-(1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("right_05b", "position", tostring((-width/2)*inch_to_ui_units).." "..tostring(-(1+length/2)*inch_to_ui_units).." 0")
    self.UI.setAttribute("rightHull", "position", tostring(width/2*inch_to_ui_units).." 0 -20")
    self.UI.setAttribute("rightHullb", "position", tostring(width/2*inch_to_ui_units).." 0 -20")

end
function showNavFore(_,_,_)
    --zero()
    printToAll("Fore Nav shown for: "..self.getName())
    if self.UI.getAttribute("navFore","active")=="true" then
        self.UI.setAttribute("navFore","active","false")
    else
        self.UI.setAttribute("navFore","active","true")
    end
end
function showNavAft(_,_,_)
    --zero()
    printToAll("Aft Nav shown for: "..self.getName())
    if self.UI.getAttribute("navAft","active")=="true" then
        self.UI.setAttribute("navAft","active","false")
    else
        self.UI.setAttribute("navAft","active","true")
    end
end
local rulers = {}
function hideUI()
    self.UI.setAttribute("scaleWrapper","active","false")
end
function showUI()
    self.UI.setAttribute("scaleWrapper","active","true")
end
function aim(_,_,_)
    self.lock()
    if #rulers==0 then
        rulers[1] = spawnRuler(width/2, length/2)
        rulers[2] = spawnRuler(-width/2, length/2)
        rulers[3] = spawnRuler(width/2, -length/2)
        rulers[4] = spawnRuler(-width/2, -length/2)
        rulers[5] = spawnCenterRuler()
    else
        rulers[1].destruct()
        rulers[2].destruct()
        rulers[3].destruct()
        rulers[4].destruct()
        rulers[5].destruct()
        rulers={}
    end
end
function spawnRuler(x, z)
    local offset = {x, 0, z}
    local obj_parameters = {}
    obj_parameters.type = 'Custom_Model'
    obj_parameters.position = vector.add({self.getPosition()[1], 1, self.getPosition()[3]},vector.rotate(offset, self.getRotation()[2]))
    obj_parameters.rotation = {0 ,self.getRotation()[2], 0}
    obj_parameters.scale = {x>0 and 1 or -1, 0.3, z>0 and 1 or -1}
    local newruler = spawnObject(obj_parameters)
    local custom = {}
    custom.mesh = "https://drive.google.com/uc?id=108gnei6Qtt_n3s3AokqbKv9ZCgAGnpPh"
    custom.collider = "https://drive.google.com/uc?id=1clSddyaFEgPM1yIjhfx-OfFfnHQV2UdO"
    newruler.setCustomObject(custom)
    newruler.lock()
    return newruler
    --newruler.scale(scale)
end
local distance_moved = 0
function zero()
    distance_moved = 0
    printToAll("Zerod out "..self.getName())
end
function deepdive()
    self.setPosition({self.getPosition()[1],0.78,self.getPosition()[3]})
end
function surface()
    self.setPosition({self.getPosition()[1],0.96,self.getPosition()[3]})
end
function flyinghigh()
    self.setPosition({self.getPosition()[1],6,self.getPosition()[3]})
end
function API_distance_from(params)
    --printToAll(vector.tostring(params.pos))
    local localCorners = {
        {-width/2, params.pos[2], length/2},
        {width/2, params.pos[2], length/2},
        {-width/2, params.pos[2], -length/2},
        {width/2, params.pos[2], -length/2}
    }
    local min = 99999999999
    for _,localCorner in ipairs(localCorners) do
        local corner = vector.add(self.getPosition(),vector.rotate(localCorner, self.getRotation()[2]))
        local dist = vector.distance(params.pos, corner)
        --printToAll("Corner dist: "..tostring(dist))
        if dist<min then
            min = dist
        end
    end
    return min
end
function spawnCenterRuler()
    local obj_parameters = {}
    obj_parameters.type = 'Custom_Model'
    obj_parameters.position = {self.getPosition()[1], 1, self.getPosition()[3]}
    obj_parameters.rotation = {0 ,self.getRotation()[2], 0}
    obj_parameters.scale = {1,0.3,1}
    local newruler = spawnObject(obj_parameters)
    local custom = {}
    custom.mesh = "https://drive.google.com/uc?id=1t2o_IHOtRCmAURj8NdYNo2l4n8Pe-jG9"
    custom.collider = "https://drive.google.com/uc?id=1clSddyaFEgPM1yIjhfx-OfFfnHQV2UdO"
    newruler.setCustomObject(custom)
    newruler.lock()
    return newruler
    --newruler.scale(scale)
end
function API_move(params)
    move(params.player, params.distance)
end
function move(player, distance, idValue)
    distance_moved = distance_moved+tonumber(distance)
    printToAll("[00FF00]"..tostring(math.round(distance_moved,1)).."\"[-] "..self.getName().." moves "..distance.."\" from: "..vector.tostring(self.getPosition()).."@"..math.round(self.getRotation()[2],3).."°",player.color)
    local pos = self.getPosition()
    local rot = self.getRotation()
    self.setPosition(vector.add(pos, vector.rotate({0,0,tonumber(distance)}, rot[2])))
end
function API_rotateB(params)
    rotateB(params.player, params.rotation)
end
function rotateB(player, rotation, idValue)
    distance_moved = distance_moved-1
    printToAll("[00FF00]"..tostring(math.round(distance_moved,1)).."\"[-] "..self.getName().." turns 1\" backwards "..rotation.."° from: "..vector.tostring(self.getPosition()).."@"..math.round(self.getRotation()[2],3).."°",player.color)
    performRotation(-tonumber(rotation), -1)
end
function API_rotate(params)
    rotate(params.player, params.rotation)
end
function rotate(player, rotation, idValue)
    distance_moved = distance_moved+1
    printToAll("[00FF00]"..tostring(math.round(distance_moved,1)).."\"[-] "..self.getName().." turns 1\" forward "..rotation.."° from: "..vector.tostring(self.getPosition()).."@"..math.round(self.getRotation()[2],3).."°",player.color)
    performRotation(tonumber(rotation), 1)
end
function performRotation(yrot, dist)
    local pos = self.getPosition()
    local rot = self.getRotation()
    local dir = yrot>0 and 1 or -1
    local beam = {dist*dir*width/2,0,0}
    --printToAll("beam: "..vector.tostring(beam))
    local move = vector.rotate({0,0,dist},yrot)
    --printToAll("move: "..vector.tostring(move))
    local beamback = vector.rotate({dist*dir*-width/2,0,0},yrot)
    --printToAll("beamback: "..vector.tostring(beamback))
    local offset = vector.add(vector.add(beam, move),beamback)
    --printToAll("offset: "..vector.tostring(offset))
    self.setPosition(vector.add(pos, vector.rotate(offset, rot[2])))
    self.setRotation(vector.add(rot, {0,yrot,0}))
end
#include ../../util/vector
#include ../../util/string
