#include ../../util/string
state = {}
ship = nil
function onload(save_string)
    --Wait.frames(||self.UI.setCustomAssets(Global.UI.getCustomAssets()),1)
    --self.UI.setXml(self.UI.getXml())
    if save_string~="" then
        state = JSON.decode(save_string)
        Wait.frames(function()
            for id,isOn in pairs(state) do
                --printToAll("parsing: "..id.." "..isOn)
                if id=="shipguid" then
                    ship = getObjectFromGUID(isOn)
                    if ship~=nil then
                        self.UI.setAttribute("shipname","text",ship.getName())
                    end
                    --set ship
                elseif id=="primary" then
                    --primary = isOn
                    self.UI.setAttribute("primary", "text", isOn)
                elseif id=="support" then
                    --support = isOn
                    self.UI.setAttribute("support", "text", isOn)
                elseif id=="color" then
                    --printToAll("loading color: "..isOn)
                    --color = isOn
                    self.UI.setAttribute("shipname", "color", isOn)
                elseif id=="name" then
                    --name = isOn
                    self.UI.setAttribute("name", "text", isOn)
                elseif id=="toggleEdit" then
                    --printToAll("loading toggleEdit: "..isOn)
                    toggleEdit_onValueChanged(nil, isOn, id)
                elseif id=="port" or id=="stbd" or id=="fore" or id=="aft" then
                    arcSelector_onValueChanged(nil, isOn, id.."_select")
                else
                    weaponSelector_onValueChanged(nil, isOn, id.."_select")
                end
            end
        end,1)
    end
    --printToAll(tostring(#(self.UI.getCustomAssets())))
end
function onSave()
    -- state["primary"] = primary
    -- state["support"] = support
    -- state["name"] = name
    -- state["color"] = color
    saved_data = JSON.encode(state)
    return saved_data
end
function onDrop(player_color)
    updateDistance()
    updateArc()
end
function updateDistance()
    if ship~=nil and not (state["toggleEdit"]=="True") then
        local dist = ship.call('API_distance_from', {pos=self.getPosition()})--vector.distance(ship.getPosition(),self.getPosition())
        --printToAll("dist: "..tostring(dist))
        local idist = math.min(math.floor(dist/10)+1,3)
        for _,i in ipairs({1,2,3}) do
            self.UI.setAttribute("range_"..tostring(i),"active",i==idist)
        end
        --printToAll("idist: "..tostring(idist))
        local primary = string.split(state["primary"],",")
        --printToAll("#primary: "..tostring(#primary))
        local support = string.split(state["support"],",")
        --printToAll("#support: "..tostring(#support))
        if #primary>2 and #support>2 then
            --printToAll("primary[idist]: "..tostring(primary[idist]))
            --printToAll("support[idist]: "..tostring(support[idist]))
            self.UI.setAttribute("primary", "text", primary[idist])
            self.UI.setAttribute("support", "text", support[idist])
        end
    end
end
function updateArc()
    if ship~=nil and not (state["toggleEdit"]=="True") then
        local offset = vector.sub(self.getPosition(), ship.getPosition())
        local localOffset = vector.rotate(offset, -ship.getRotation()[2])
        --printToAll(vector.tostring(localOffset))
        self.UI.setAttribute('fore_indicator','active','false')
        self.UI.setAttribute('port_indicator','active','false')
        self.UI.setAttribute('stbd_indicator','active','false')
        self.UI.setAttribute('aft_indicator','active','false')
        if math.abs(localOffset[1])>math.abs(localOffset[3]) then
            if localOffset[1]>0 then
                self.UI.setAttribute('stbd_indicator','active','true')
                if self.UI.getAttribute("stbd","active")~="True" then
                    self.UI.setAttribute('stbd_indicator','color','#FF000020')
                    --self.highlightOn({1,0,0}, 1)
                else
                    self.UI.setAttribute('stbd_indicator','color','#00FF0020')
                end
                --stbd
            else
                self.UI.setAttribute('port_indicator','active','true')
                --port
                if self.UI.getAttribute("port","active")~="True" then
                    --self.highlightOn({1,0,0}, 1)
                    self.UI.setAttribute('port_indicator','color','#FF000020')
                else
                    self.UI.setAttribute('port_indicator','color','#00FF0020')
                end
            end
        else
            if localOffset[3]>0 then
                self.UI.setAttribute('fore_indicator','active','true')
                --fore
                if self.UI.getAttribute("fore","active")~="True" then
                    --self.highlightOn({1,0,0}, 1)
                    self.UI.setAttribute('fore_indicator','color','#FF000020')
                else
                    self.UI.setAttribute('fore_indicator','color','#00FF0020')
                end
            else
                self.UI.setAttribute('aft_indicator','active','true')
                --aft
                if self.UI.getAttribute("aft","active")~="True" then
                    --self.highlightOn({1,0,0}, 1)
                    self.UI.setAttribute('aft_indicator','color','#FF000020')
                else
                    self.UI.setAttribute('aft_indicator','color','#00FF0020')
                end
            end
        end
    end
end
function weaponSelector_onValueChanged(player, isOn, id)
    local valueId = string.split(id, "_")[1]
    state[valueId]=isOn
    self.UI.setAttribute(valueId, "active", isOn)
    if isOn=="True" then
        self.UI.setAttribute(id, "isOn", "True")
        self.UI.setAttribute(id, "color", "green")
        self.UI.setAttribute(id, "textColor", "white")
    else
        self.UI.setAttribute(id, "color", "gray")
        self.UI.setAttribute(id, "textColor", "black")
    end
end

function arcSelector_onValueChanged(player, isOn, id)
    local valueId = string.split(id, "_")[1]
    state[valueId]=isOn

    self.UI.setAttribute(valueId, "active", isOn)
    if isOn=="True" then
        self.UI.setAttribute(id, "isOn", "True")
        self.UI.setAttribute(id, "color", "green")
        self.UI.setAttribute(id, "textColor", "white")
    else
        self.UI.setAttribute(id, "color", "gray")
        self.UI.setAttribute(id, "textColor", "black")
    end
end

function toggleEdit_onValueChanged(player, isOn, id)
    state[id]=isOn
    --printToAll("toggleEdit: "..isOn)
    self.UI.setAttribute("leftModifiers", "active", isOn)
    self.UI.setAttribute("rightModifiers", "active", isOn)
    self.UI.setAttribute("arcModifiers", "active", isOn)
    self.UI.setAttribute("colors", "active", isOn)
    self.UI.setAttribute("associate", "active", isOn)
    self.UI.setAttribute("primary", "interactable", isOn)
    self.UI.setAttribute("primary", "raycastTarget", isOn)
    self.UI.setAttribute("support", "interactable", isOn)
    self.UI.setAttribute("support", "raycastTarget", isOn)
    self.UI.setAttribute("name", "interactable", isOn)
    self.UI.setAttribute("name", "raycastTarget", isOn)
    if isOn=="True" then
        self.UI.setAttribute(id, "isOn", "True")
        self.UI.setAttribute(id, "color", "green")
        self.UI.setAttribute(id, "textColor", "white")
        --printToAll("set primary to: "..tostring(state["primary"]))
        self.UI.setAttribute("primary", "text", state["primary"])
        --printToAll("set support to: "..tostring(state["support"]))
        self.UI.setAttribute("support", "text", state["support"])
        self.setRotationSmooth({0,self.getRotation()[2],0},false, true)
    else
        self.UI.setAttribute(id, "color", "gray")
        self.UI.setAttribute(id, "textColor", "black")
    end
end

function name_onEndEdit(player, text, id)
    state["name"] = text
end

function primary_onEndEdit(player, text, id)
    state["primary"] = text
end

function support_onEndEdit(player, text, id)
    state["support"] = text
end

function color_onClick(player, _, id)
    state["color"] = self.UI.getAttribute(id,"color")
    self.UI.setAttribute("shipname", "color", state["color"])
end
function associate_onClick(player, _, id)
    local ship_found = findNearestShip(self.getPosition())
    if ship_found~=nil then
        ship = ship_found
        --printToAll("nearest: "..ship.getName())
        state["shipguid"]=ship.getGUID()
        self.UI.setAttribute("shipname","text",ship.getName())
        self.setName(ship.getName())
    end
    toggleEdit_onValueChanged(nil, "false","toggleEdit")
end
#include ../../util/vector
function isShip(ship)
    return ship.tag == 'Figurine' and ship.name ~= '' -- and isInPlay(ship)
end
function findNearestShip(pos)
    local nearest
    local minDist = 999999
    for i,ship in ipairs(getAllObjects()) do
        if isShip(ship) then
            local distance = vector.distance(pos, ship.getPosition())
            if distance<minDist then
                minDist = distance
                nearest = ship
            end
        end
    end
    return nearest
end
