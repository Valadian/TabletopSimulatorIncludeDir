rulers = {}
cmds = {}
last_rot = 0
target_rot = 0
cmd_dir = 0
stable_count = 0
local ASTEROIDS = {
    "http://pastebin.com/raw/SWhJfkwB",
    "http://pastebin.com/raw/dJTxnY50",
    "http://pastebin.com/raw/zSSXLYZ5",
    "http://pastebin.com/raw/z4DDMq9f",
    "http://pastebin.com/raw/j0Xr1xsQ",
    "http://pastebin.com/raw/ZUZuC55E"
}
local ASTEROID_TOKENS = {
    "http://i.imgur.com/KWkWB6p.png",
    "http://i.imgur.com/Zdz7dZF.png"
}
--real_rot = 0
function onload()
    self.interactable = false
    drawButtons()
    last_rot = self.getRotation()[2]
    target_rot = self.getRotation()[2]
    --real_rot = self.getRotation()[2]
end
function update ()
    local cmd_string = self.getDescription()
--    if cmd == " " then
--        destroyRulers()
--    end
    self.setDescription("");
    if string.len(cmd_string)>0 then
        printToAll('Processing Cmd "'..cmd_string..'"',{1,0,0})
        local new_cmds = cmd_string:split(",",5,false)
        if #new_cmds>0 then
            if isCmd(new_cmds[1]) then
                buildRuler(new_cmds)
            end
        end
    end
    --restrictRotation(22.5)
    --moveRuler()
    moveChildren()
end
function buildRuler(new_cmds)
    destroyRulers()
    cmds = table.copy(new_cmds)
--    for _,c in ipairs(new_cmds) do
--        printToAll('"'..tonumber(c)..'"',{1,0,0})
--    end
    if #new_cmds>0 then
        extendSelf(self, 1, new_cmds)
    end
    drawButtons()
    --startLuaCoroutine(self, 'lockRuler')
end
--colliding = false
--function onCollisionExit( collision_info )
--    colliding = false
--end
--function onCollisionStay( collision_info )
--    self.setRotation({0,target_rot,0})
--end
--pickedUp = false
--override = 0
--dropProtect = 0
--function onPickedUp( player_color )
--    pickedUp = true
--    override = self.getRotation()[2]
--    stable_count = 10
--    cmd_dir = 0
--end
--function onDropped( player_color )
--    pickedUp = false
--    printToAll("Dropped "..cmd_dir.." "..stable_count,{1,0,0})
--    target_rot = override
--    dropProtect = 20
--end
function restrictRotation(increment)
    if pickedUp then
        self.setRotation({0,override,0})
    elseif not colliding then
        local curr_rot = self.getRotation()[2]
        --printToAll(curr_rot,{1,0,0})
        local diff = angleDiff(curr_rot,last_rot)
        --printToAll(diff,{1,0,0})
        last_rot = curr_rot
        if math.abs(diff)<0.01 then
            stable_count = stable_count + 1
            if stable_count>2 then
                cmd_dir = 0
                if target_rot~=nil then
                    --printToAll("Adjust",{0,1,0})
                    --NOT COMMANDED
                    -- target_rot = math.round(curr_rot/increment)*increment
                    local new_rot = math.clamp(target_rot,curr_rot-3,curr_rot+3)
                    last_rot = math.mod(new_rot,360)
                    self.setRotation({0,new_rot,0})
                end
            end
        else
            stable_count = 0
            dropProtect = dropProtect -1
            if dropProtect<0 then
                cmd_dir = cmd_dir + math.sign(diff)
            end
            --external commanding
            --local direction = math.sign(diff)

            if cmd_dir > 5 and math.abs(curr_rot-target_rot)>7 then
                target_rot = math.mod(math.ceil(curr_rot/increment)*increment,360)
                printToAll("New Target CW - "..target_rot,{0,1,0})
            elseif cmd_dir < -5 then
                target_rot = math.floor(curr_rot/increment)*increment
                printToAll("New Target CCW- "..target_rot,{0,1,0})
            end
        end
    end
end
function math.sign(x)
    if x<0 then return -1
    elseif x>0 then return 1
    else return 0 end
end
function angleDiff(a,b)
    angle = a - b
    return math.mod(angle + 180, 360) - 180
--    local diff = a - b
--    if diff > 180 then diff=diff-360
--    elseif diff < 180 then diff=diff+360
--    end
--    if diff == 360 then diff = 0 end
--    return diff
end
function moveRuler()
    local pos = self.getPosition()
    if pos[2]>2 then
        pos = {pos[1],2,pos[3]}
    end
    self.setPositionSmooth(pos,false,true)
end
function moveChildren()
    if rulers[1]~=nil then
        moveChild(self, 1)
    end
end
function drawButtons()
    clearButtons(self)
    local z = 0.3
    if #cmds<4 then
        self.createButton(buildButton('+',{click_function='Action_AddRuler',position={-0.2,z,0.9}}))
    end
    self.createButton(buildButton('Done',{click_function='Action_ClearRuler',position={0,z,0.7},width=300}))

    local ship = self.getVar('ship')
    if ship~=nil and self.getVar('moved')~=true and (#cmds>0 or self.getRotation()[2]~=ship.getRotation()[2]) then
        self.createButton(buildButton('Move',{position={0,z,0.5},width=300}))
    end
    if #cmds>0 then
        self.createButton(buildButton('-',{click_function='Action_RemoveRuler',position={0.2,z,0.9}}))
    end
    if ship~=nil then
        local prev_transforms = ship.getTable('prev_transforms')
        if prev_transforms~=nil and #prev_transforms>0 then--last_pos~=nil and last_rot~=nil and last_moved~=nil then
            if self.getVar('moved') then
                self.createButton(buildButton('Undo',{position={0,z,0.3},width=300}))
            elseif self.getVar('confirm') then
                self.createButton(buildButton('Oops!',{click_function='Toggle_Undo',position={0,z,0.3},width=300,color={0.8,0,0},font_color={1,1,1}}))
                self.createButton(buildButton('Confirm!',{click_function='Action_Undo',position={0,z,-0.1},width=300,color={0,0.8,0},font_color={1,1,1}}))
            else
                self.createButton(buildButton('Undo',{click_function='Toggle_Undo',position={0,z,0.3},width=300,color={0.8,0,0},font_color={1,1,1}}))
            end
        end
    end
    local y = 1.1
    if #cmds==0 then
        self.createButton(buildButton('<',{click_function='Action_RulerLeft0',position={0.2,z,y}}))
        self.createButton(buildButton('0',{click_function='DoNothing',position={0,z,y},color={0.8,0,0},font_color={1,1,1}}))
        self.createButton(buildButton('>',{click_function='Action_RulerRight0',position={-0.2,z,y}}))

    end
    y = y + 0.25
    local maneuver = self.getTable("maneuver")
    for i,cmd in ipairs(cmds) do
        if tonumber(cmd)>-2 then
            self.createButton(buildButton('<',{click_function='Action_RulerLeft'..i,position={0.2,z,y}}))
        end
        local clicks = "-"
        if math.abs(tonumber(cmd))==1 then clicks = "|" end
        if math.abs(tonumber(cmd))==2 then clicks = "||" end
        self.createButton(buildButton(clicks,{click_function='DoNothing',position={0,z,y},color={0,0,0},font_color={1,1,1}}))
        rulers[i].clearButtons()
        font_color = {0,0,0,10}
        color = {0,0,0,0.1}
        if maneuver~=nil then
            -- print("Found Manuever")
            if #cmds>#maneuver then
                -- rulers[i].setColorTint({1,0,0})
                -- font_color = {1,0,0}
                rulers[i].createButton(buildButton("?",{click_function='DoNothing',position={0,z,0.8},width=200,height=300,font_size=200,color=color,font_color=font_color}))
            else
                -- rulers[i].setColorTint({1,1,1})
                segment = maneuver[#cmds][i]
                value = 0
                if segment=="I" then value = 1 end
                if segment=="II" then value = 2 end
                -- print(i,segment,value,cmd)
                if math.abs(tonumber(cmd))>value then
                    font_color = {1,1,1,1}
                    color = {1,0,0,1}
                else
                    font_color = {0,0.5,0,10}
                end
                rulers[i].createButton(buildButton(segment,{click_function='DoNothing',position={0,z,0.8},width=200,height=300,font_size=200,color=color,font_color=font_color}))
            end
        else
        end
        if tonumber(cmd)<2 then
            self.createButton(buildButton('>',{click_function='Action_RulerRight'..i,position={-0.2,z,y}}))
        end
        y = y + 0.25
    end
    if maneuver~=nil then

        --for i,speed in ipairs(maneuver) do
        if (#maneuver >= #cmds) and (#cmds > 0) then
            for j,segment in ipairs(maneuver[#cmds]) do
                value = 0
                if segment=="I" then value = 1 end
                if segment=="II" then value = 2 end
                color = {0,0.4,0}
                font_color = {1,1,1}
                if math.abs(tonumber(cmds[j]))>value then
                    color = {1,0,0}
                    font_color = {0,0,0}
                end
                self.createButton(buildButton(segment,{click_function='DoNothing',position={0.5,z,1.1+0.25*j},color=color,font_color=font_color})) --1-i*0.2
            end
        end
        --end
    end
end
function Toggle_Undo()
    self.setVar('confirm',not self.getVar('confirm'))
    drawButtons()
end
function DoNothing() end
function Action_RulerLeft1() RotateRuler(1,-1) end
function Action_RulerLeft2() RotateRuler(2,-1) end
function Action_RulerLeft3() RotateRuler(3,-1) end
function Action_RulerLeft4() RotateRuler(4,-1) end
function Action_RulerLeft5() RotateRuler(5,-1) end
function Action_RulerRight1() RotateRuler(1,1) end
function Action_RulerRight2() RotateRuler(2,1) end
function Action_RulerRight3() RotateRuler(3,1) end
function Action_RulerRight4() RotateRuler(4,1) end
function Action_RulerRight5() RotateRuler(5,1) end

function Action_RulerLeft0()
    self.setRotation({self.getRotation()[1],self.getRotation()[2]-22.5,self.getRotation()[3]})
    drawButtons()
end
function Action_RulerRight0()
    self.setRotation({self.getRotation()[1],self.getRotation()[2]+22.5,self.getRotation()[3]})
    drawButtons()
end
-- last_pos = nil
-- last_rot = nil
-- last_moved = nil
function Action_Move()
    self.setVar('moved',true)
    self.setVar('confirm',false)
    local ship = self.getVar('ship')
    if ship == nil then
        ship = findNearestShip(self.getPosition(),self.getRotation()[2])
    end
    local offset = vector.sub(ship.getPosition(),self.getPosition())
    local lastRuler = self
    if #rulers>0 then
        lastRuler = rulers[#rulers]
    end
    local yRot = lastRuler.getRotation()[2] - ship.getRotation()[2]
    local rotatedOffset = vector.rotate(offset,yRot)
    last_pos = ship.getPosition()
    last_rot = ship.getRotation()
    local new_pos = vector.add(lastRuler.getPosition(),rotatedOffset)
    local new_rot = vector.add(last_rot,{0,yRot,0})
    if vector.eq(ship.getPosition(),new_pos) and vector.eq(ship.getRotation(),new_rot) then
        printToAll("Cancelling Move: "..ship.getName(),{1,0,0})
        drawButtons()
        return
    else
        printToAll("Moving: "..ship.getName(),{1,0,0})
    end
    ship.setPositionSmooth(new_pos,false,true)
    ship.setRotationSmooth(new_rot,false,true)
    moved_tokens = moveTokens(ship,last_pos,last_rot,new_pos,new_rot)
    storeUndo(ship,moved_tokens)
    drawButtons()
end
function API_MOVE_SHIP(params)
    --params = { ship, pos, rot }
    old_pos = params.ship.getPosition()
    old_rot = params.ship.getRotation()
    params.ship.setPositionSmooth(params.pos,false,true)
    params.ship.setRotationSmooth(params.rot,false,true)
    moved_tokens = moveTokens(params.ship,old_pos,old_rot,params.pos,params.rot)
    storeUndo(params.ship,moved_tokens)
end
ship_size = {
    {0.807,0,1.398,1.398},
    {1.201,0,2.008,2.008},
    {1.496,0,2.539,2.539},
    {1.496,0,2.539,2.539*3+3.68}
}
-- moved_objects = {}
function moveTokens(ship, old_pos, old_rot, new_pos, new_rot)
    local moved_objects = {}
    for _,obj in ipairs(getAllObjects()) do
        if obj.tag~="Figurine" and obj~=self then -- and not table.contains(ASTEROIDS,obj.getCustomObject().mesh) and not table.contains(ASTEROID_TOKENS,obj.getCustomObject().image)
            local offset = vector.rotate(vector.sub(obj.getPosition(),old_pos),-old_rot[2])
            local size = ship_size[ship.getVar('size')]
            local ontopofshipbase = obj.getPosition()[2]>1.25
            if math.abs(offset[1])<math.abs(size[1]) and offset[3]>-size[3] and offset[3]<size[4] and ontopofshipbase then
                -- WAS ON BASE
                --printToAll(obj.name, {1,1,1})
                table.insert(moved_objects,obj)
                local new_pos = vector.add(new_pos,vector.rotate(offset, new_rot[2]))
                local new_rot = vector.add(vector.sub(new_rot,old_rot),obj.getRotation())
                obj.setPositionSmooth(new_pos,false,true)
                obj.setRotationSmooth(new_rot,false,true)
                --obj.lock()
            end
        end
    end
    return moved_objects
end
function undoMoveTokens(moved_objects, old_pos, old_rot, undo_pos, undo_rot)
    for _,obj in ipairs(moved_objects) do
        local offset = vector.rotate(vector.sub(obj.getPosition(),old_pos),-old_rot[2])
        --local size = ship_size[ship.getVar('size')]
        local new_pos = vector.add(undo_pos,vector.rotate(offset, undo_rot[2]))
        local new_rot = vector.add(vector.sub(undo_rot,old_rot),obj.getRotation())
        obj.setPositionSmooth(new_pos,false,true)
        obj.setRotationSmooth(new_rot,false,true)
    end
    -- moved_objects = {}
end
function storeUndo(ship,moved_objects)
    local prev_transforms = ship.getTable('prev_transforms')
    if prev_transforms == nil then
        prev_transforms = {}
    end
    table.insert(prev_transforms,{ship.getPosition(),ship.getRotation(),moved_objects})
    ship.setTable('prev_transforms',prev_transforms)
    -- ship.setTable('moved_objects',T(moved_objects):Select(|o|o.guid))
    -- last_pos = ship.getPosition()
    -- last_rot = ship.getRotation()
    -- last_moved = ship
end
function popUndo(ship)
    local prev_transforms = ship.getTable('prev_transforms')
    if prev_transforms == nil or #prev_transforms==0 then
        printToAll("Trying to undo with no history")
    end
    last_transform = table.remove(prev_transforms)
    ship.setTable('prev_transforms',prev_transforms)
    return last_transform
end
function Action_Undo()
    self.setVar('moved',false)
    self.setVar('confirm',false)
    local ship = self.getVar('ship')
    prev_transform = popUndo(ship)
    local prev_pos = ship.getPosition()
    local prev_rot = ship.getRotation()
    -- last_moved.setPositionSmooth(last_pos,false,true)
    -- last_moved.setRotationSmooth(last_rot,false,true)
    ship.setPositionSmooth(prev_transform[1],false,true)
    ship.setRotationSmooth(prev_transform[2],false,true)
    -- undoMoveTokens(last_moved,prev_pos,prev_rot,last_pos,last_rot)
    undoMoveTokens(prev_transform[3],prev_pos,prev_rot,prev_transform[1],prev_transform[2])
    -- last_moved = nil
    -- last_pos = nil
    -- last_rot = nil
    drawButtons()
end
function findNearestShip(pos,rot_filter)
    local nearest
    local minDist = 999999
    for i,ship in ipairs(getAllObjects()) do
        if isShip(ship) then
            local distance = distance(pos[1],pos[3],ship.getPosition()[1],ship.getPosition()[3])
            -- TODO: implement rotation filter (0 or 180)
            --angleDiff(ship.getRotation()[1],rot_filter)
            if distance<minDist and ship.getRotation() then
                minDist = distance
                nearest = ship
            end
        end
    end
    return nearest
end
function distance(x,y,a,b)
    x = (x-a)*(x-a)
    y = (y-b)*(y-b)
    return math.sqrt(math.abs((x+y)))
end
function isShip(ship)
    local name = ship.getName()
    return ship.tag == "Figurine" and (name:match " S$" or name:match " M$" or name:match " L$"
            or name:match " SR$" or name:match " MR$" or name:match " LR$")
end
function RotateRuler(i, direction)
    cmds[i] = math.clamp(cmds[i]+direction,-2,2)
    buildRuler(cmds)
end
function Action_AddRuler()
    if #cmds<4 then
        if highlighted_index==#cmds then
            highlighted_index = highlighted_index + 1
        end
        table.insert(cmds,"0")
        buildRuler(cmds)
    end
end
function Action_RemoveRuler()
    if #cmds>0 then
        if highlighted_index==#cmds then
            highlighted_index = highlighted_index - 1
        end
        table.remove(cmds)
        buildRuler(cmds)
    end
end
function Action_ClearRuler()
    self.setVar('moved',false)
    self.setVar('confirm',false)
    destroyRulers()
    drawButtons()
    -- last_moved = nil
    -- last_pos = nil
    -- last_rot = nil
    self.destruct()
    -- self.setPositionSmooth({49,1,0},false,true)
    -- self.setRotationSmooth({0,0,0},false,true)
end
function buildButton(label, def)
    local DEFAULT_POSITION = {0,0.17,0}
    local DEFAULT_ROTATION = {0,180,0}
    --local DEFAULT_WIDTH_PER_CHAR = 125
    local DEFAULT_HEIGHT = 100
    local DEFAULT_WIDTH = 100
    local DEFAULT_FONT_SIZE = 75
    if def.position==nil then def.position = DEFAULT_POSITION end
    if def.rotation==nil then def.rotation = DEFAULT_ROTATION end
    --if def.width==nil then def.width = 100 + string.len(label)*DEFAULT_WIDTH_PER_CHAR end
    if def.width==nil then def.width = DEFAULT_WIDTH end
    if def.height==nil then def.height = DEFAULT_HEIGHT end
    if def.font_size==nil then def.font_size = DEFAULT_FONT_SIZE end
    if def.click_function==nil then def.click_function = 'Action_'..label end
    if def.function_owner==nil then def.function_owner = self end
    if def.color==nil then def.color={1,1,1} end
    if def.font_color==nil then def.font_color={0,0,0} end
    return {['click_function'] = def.click_function, ['function_owner'] = def.function_owner, ['label'] = label, ['position'] = def.position, ['rotation'] =  def.rotation, ['width'] = def.width, ['height'] = def.height, ['font_size'] = def.font_size, ['color'] = def.color, ['font_color']=def.font_color}
end
function destroyRulers()
    for _,ruler in ipairs(rulers) do
        if ruler~=nil then
            ruler.destruct()
        end
    end
    rulers = {}
    cmds = {}
end
function isCmd(cmd)
    local dir = tonumber(cmd)
    return table.contains({-2,-1,0,1,2},dir)
end
diffuse = "http://i.imgur.com/YNFhQi0.png"
start_model = "http://paste.ee/r/twGGH"
mid_model = "http://paste.ee/r/UqKXw"
end_model = "http://paste.ee/r/NyJut"
ruler_diffuse = {
    'http://i.imgur.com/Y8LTHC2.png',
    'http://i.imgur.com/PbrGnQm.png',
    'http://i.imgur.com/rZPSomm.png',
    'http://i.imgur.com/WiZESBp.png'
}
end_diffuse = {
    'http://i.imgur.com/WH1KHQf.png',
    'http://i.imgur.com/ihm03Vm.png',
    'http://i.imgur.com/1q9uCVs.png',
    'http://i.imgur.com/eMbDz3j.png'
}
function extendSelf(this, index, new_cmds)
    --printToAll("--EXTEND--",{0,0,1})
    local dir =  tonumber(new_cmds[1])
    table.remove(new_cmds, 1)
    local pos = this.getPosition()
    local rot = this.getRotation()[2]
    --printToAll("rot"..rot,{0,1,1})
    local offset = vector.scale({0,0,2.6265 },this.getScale())
    --printToAll("offset"..vector.tostring(offset),{0,1,1})
    local rotated_offset = vector.rotate(offset,rot)
    --printToAll("rotatedoffset"..vector.tostring(rotated_offset),{0,1,1})
    local obj_parameters = {}
    --obj_parameters.type = 'Custom_Token'
    obj_parameters.type = 'Custom_Model'
    obj_parameters.position = vector.add(pos, rotated_offset)
    --printToAll("newpos"..vector.tostring(obj_parameters.position),{0,1,1})
    local new_rot = dir * 22.5
    obj_parameters.rotation = {0,rot+new_rot,0 }
    --printToAll("newrot"..vector.tostring(obj_parameters.rotation),{0,1,1})
    local newruler = spawnObject(obj_parameters)
    local custom = {}
    --if index==1 then
    --    custom.mesh = start_model
    --else
    if index==#cmds then
        custom.mesh = end_model
    else
        custom.mesh = mid_model
    end
    custom.diffuse = diffuse
    --custom.collider = custom.mesh
    --custom.type = 1
    custom.material = 3
    --custom.specular_intensity = 0
    --custom.specular_color = {223/255, 207/255, 190/255}

--    if index==#cmds then
--        custom.image = end_diffuse[index]
--    else
--        custom.image = ruler_diffuse[index]
--    end
--    custom.thickness = 0.3
--    custom.merge_distance = 5
    newruler.setCustomObject(custom)
    newruler.lock()
    newruler.scale(this.getScale())
    rulers[index] = newruler
    if #new_cmds>0 then
        extendSelf(newruler, index+1, new_cmds)
    end
    --newruler.setPositionSmooth(obj_parameters.position,false,true)
    --newruler.setRotationSmooth(obj_parameters.rotation,false,true)
    --newruler.lock()
end
highlighted_index = 0
owner_color = "black"
function API_highlightIndex(params) --index, color
    if params~=nil then
        owner_color = params.color
    end
    if highlighted_index==0 then
        self.highlightOn(owner_color, 2000)
    else
        self.highlightOff()
    end
    for i,ruler in ipairs(rulers) do
        if i==highlighted_index then
            rulers[i].highlightOn(owner_color, 2000)
        else
            rulers[i].highlightOff()
        end
    end
end
function API_incrementIndex()
    if highlighted_index==#cmds then
        Action_AddRuler()
    else
        highlighted_index = highlighted_index + 1
    end
end
function API_decrementIndex()
    if highlighted_index>0 then
        highlighted_index = highlighted_index - 1
    end
end
function API_rulerLeft()
    if highlighted_index==0 then
        Action_RulerLeft0()
    else
        RotateRuler(highlighted_index,-1)
    end
end
function API_rulerRight()
    if highlighted_index==0 then
        Action_RulerRight0()
    else
        RotateRuler(highlighted_index,1)
    end
end
function API_move()
    if self.getVar('moved') then
        Action_ClearRuler()
    else
        Action_Move()
    end

end

-- function lockRuler()
--     for i=1, 50, 1 do
--         coroutine.yield(0)
--     end
--     for _,ruler in ipairs(rulers) do
--         if ruler~=nil then
--             ruler.lock()
--         end
--     end
--     return true
-- end
function moveChild(this, index)
    local dir =  tonumber(cmds[index])
    local pos = this.getPosition()
    if pos[2]>2 then
        pos = {pos[1],2,pos[3]}
    end
    local rot = this.getRotation()[2]
    local offset = vector.scale({0,0,2.6265 },this.getScale())
    local rotated_offset = vector.rotate(offset,rot)
    local child = rulers[index]
    child.setPositionSmooth(vector.add(pos, rotated_offset),false,true)
    local new_rot = dir * 22.5
    child.setRotationSmooth({0,rot+new_rot,0 },false,true)
    if cmds[index+1]~=nil then
        moveChild(child, index+1)
    end
end
function clearButtons(object)
    --this is a workaround for obj.clearButtons() being broken as of v7.10
    if object.getButtons() ~= nil then
        for i=#object.getButtons()-1,0,-1 do
            object.removeButton(i)
        end
    end
end
#include ../../util/string
#include ../../util/vector
#include ../../util/table
