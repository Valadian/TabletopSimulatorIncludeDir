
local Http = require('ge_tts/Http')
Http.setProxyUrl('https://ttsarmada.herokuapp.com/forward')

FIRST_FLEET = nil
SECOND_FLEET = nil
function onClick_selectGameReporterTab(player, _, idValue)
    onClick_ToggleUI(player, _, idValue)

    onClick_refreshObjective()
    --Autocalculate Scores?
    updateAllScores()
    for i, color in ipairs(Player.getColors()) do
        UI.hide(color.."1")
        UI.hide(color.."2")
    end
    for color, fleet in pairs(FLEETS) do
        if fleet~=nil then
            UI.show(color.."1")
            UI.show(color.."2")
        end
    end
    --Autocalculate Players
    autoSelectFirstSecondPlayer()
    updateScore()
end
function autoSelectFirstSecondPlayer()
    -- for _,color in ipairs(Player.getColors()) do
    --     if FLEETS[color]~=nil then
    --         if FLEETS[color].secondPlayer then
    --             onClick_selectPlayer(color..2,2)
    --             break
    --         end
    --     end
    -- end
    -- for _,color in ipairs(Player.getColors()) do
    --     if FLEETS[color]~=nil then
    --         if not FLEETS[color].secondPlayer then
    --             onClick_selectPlayer(color..1,1)
    --             break
    --         end
    --     end
    -- end
    FIRST_FLEET = nil
    SECOND_FLEET = nil
    for color, fleet in pairs(FLEETS) do
        if fleet.secondPlayer then
            -- SECOND_FLEET = fleet
            onClick_selectPlayer(color..2,2)
            break
        end
    end
    for color, fleet in pairs(FLEETS) do
        if not fleet.secondPlayer then
            -- FIRST_FLEET = fleet
            onClick_selectPlayer(color..1,1)
            break
        end
    end
end
function onClick_refreshObjective(player, _, idValue)
    local objective = findObjective()
    UI.setValue("activeObjective",objective)
    if objective=="None?" then
        UI.setAttribute("activeObjective","color","#FF4040")
        UI.show("objectiveWarning")
        UI.show("objectiveRefresh")
    else
        UI.setAttribute("activeObjective","color","#80FF00")
        UI.hide("objectiveWarning")
        UI.hide("objectiveRefresh")
    end
end
function flatten(fleet)
    cards = {}
    if fleet == nil then return cards end
    for _,obj in ipairs(fleet.objectives) do
        table.insert(cards,obj.def.category..": "..obj.def.name)
    end
    for _,ship in ipairs(fleet.ships) do
        table.insert(cards,ship.def.name.." ("..ship.def.cost..")")
        for _,def in ipairs(ship.upgrades) do
            table.insert(cards," - "..def.name.." ("..def.cost..")")
        end
    end
    for _,squad in ipairs(fleet.squads) do
        if squad.count~=nil and squad.count>1 then
            table.insert(cards," - "..squad.count.." x "..squad.def.name.." ("..(squad.def.cost*squad.count)..")")
        else
            table.insert(cards," - "..squad.def.name.." ("..squad.def.cost..")")
        end
    end
    cardValues = {}
    for _,str in ipairs(cards) do
        table.insert(cardValues, {stringValue = str})
    end
    return cardValues
end
function onClick_score_submit(player, _, idValue)
    player1 = UI.getValue("Player1name")
    player2 = UI.getValue("Player2name")
    --player1score
    --player2score
    player1points = UI.getValue("Player1points")
    player2points = UI.getValue("Player2points")
    objective = UI.getValue("activeObjective")
    print("Getting fleet for player1: "..UI.getAttribute("Player1name","color"))
    fleet = FLEETS[UI.getAttribute("Player1name","color")]
    player1faction = nil
    if #fleet.ships > 0 then
        player1faction = fleet.ships[1].def.faction
    end
    player1fleet = flatten(fleet)
    if #player1fleet == 0 then
        print("No fleet found for Player 1!")
        return
    end
    print("Getting fleet for player2: "..UI.getAttribute("Player2name","color"))
    fleet = FLEETS[UI.getAttribute("Player2name","color")]
    player2faction = nil
    if #fleet.ships > 0 then
        player2faction = fleet.ships[1].def.faction
    end
    player2fleet = flatten(fleet)
    if #player2fleet == 0 then
        print("No fleet found for Player 2!")
        return
    end
    submitted = os.date("!%Y%m%dT%H%M%S").."."..string.format("%03d",math.random (999))
    -- print(submitted)
    broadcastToAll("Posting Game to Cloud.....", {1,1,1})
    url = "https://firestore.googleapis.com/v1/projects/ttsarmada/databases/(default)/documents/games"
    -- url = "https://ttsarmada.herokuapp.com/databases/(default)/documents/games"
    -- print(FIRST_FLEET.score)
    -- print(SECOND_FLEET.score)
    Http.post(url,{
        ['fields'] = {
            player1 = { stringValue = tostring(player1)},
            player1SteamId = { stringValue = tostring(FIRST_FLEET.steam_id)},
            player1fleet = { arrayValue = { values = player1fleet} },
            player1faction = { stringValue = tostring(player1faction)},
            player1score = { integerValue = player1score or 0},
            player1scoreVerified = { integerValue = FIRST_FLEET.score},
            player1points = { integerValue = player1points or 5},
            objective = { stringValue = tostring(objective)},
            player2 = { stringValue = tostring(player2)},
            player2SteamId = { stringValue = tostring(SECOND_FLEET.steam_id)},
            player2fleet = { arrayValue = { values = player2fleet}},
            player2faction = { stringValue = tostring(player2faction)},
            player2score = { integerValue = player2score or 0},
            player2scoreVerified = { integerValue = SECOND_FLEET.score},
            player2points = { integerValue = player2points or 6},
            submitted = { stringValue = submitted},
            ranked = { booleanValue = RANKED},
            tournamentCode = { stringValue = TOURNAMENT_CODE or ""}
        }
    },{['Content-Type']="application/json"}, handle_score_submit)
end
function handle_score_submit(resp, error)
    --Resp
    --statusCode
    --body>error>message
    if resp~=nil and resp['statusCode']==400 then
        broadcastToAll("Error with posting game!", {1,0,0})
        broadcastToAll("Send error in chat log to Valadian", {0,1,1})
        print(resp['body']['error']['message'])
        return
    end
    -- print("Resp: ")
    -- for k,v in pairs(resp) do
    --     print("  ",k,":",v)
    -- end
    if error~=nil then
        broadcastToAll("Error: "..tostring(error), {1,0,0})
        broadcastToAll("Send error in chat log to Valadian", {0,1,1})
        return
    end
    broadcastToAll("Game Successfully posted!", {0,1,0})
end
function onClick_selectPlayer1color(player, _, idValue)
    onClick_selectPlayer(idValue,1)
end
function onClick_selectPlayer2color(player, _, idValue)
    onClick_selectPlayer(idValue,2)
end
-- PLAYER_HAS_FLEET = {
--     false, false
-- }
function onClick_selectPlayer(idValue,i)
    color = UI.getAttribute(idValue,"color")
    -- printToAll(color,{1,1,1})
    if i==1 then
        FIRST_FLEET = FLEETS[color]
    else
        SECOND_FLEET = FLEETS[color]
    end
    if FLEETS[color]~=nil then
        -- print(Player[color].steam_name)
        UI.setAttribute("Player"..i.."name", "color", color)
        -- FLEETS[color].color = color
        if FLEETS[color].steam_name~=nil then
            -- FLEETS[color].steam_name = Player[color].steam_name
            -- FLEETS[color].steam_id = Player[color].steam_id
            UI.setValue("Player"..i.."name", FLEETS[color].steam_name)
        else
            -- FLEETS[color].steam_name = "Unknown"
            -- FLEETS[color].steam_id = nil
            UI.setValue("Player"..i.."name", "Unknown?")
        end
        -- FLEETS[color] = buildFleetFromZone(color)
        -- print("Stored fleet in: "..color)
        -- PLAYER_HAS_FLEET[i] = FLEETS[color]~=nil
        -- updateFleetCostDisplay(color)
        UI.show("Player"..i.."listFound")
        UI.hide("Player"..i.."listNotFound")
    else
        -- PLAYER_HAS_FLEET[i] = false
        UI.setAttribute("Player"..i.."name", "color", "#FF4040") --color
        UI.setValue("Player"..i.."name", "?")
        UI.hide("Player"..i.."listFound")
        UI.show("Player"..i.."listNotFound")
    end
    -- local p1hasfleet = PLAYER_HAS_FLEET[1]
    -- local p2hasfleet = PLAYER_HAS_FLEET[2]
    -- print(p1hasfleet,p2hasfleet)
    if FIRST_FLEET~=nil and SECOND_FLEET~=nil then
        Wait.frames(function()
            -- local p1color = UI.getAttribute("Player1name","color")
            -- local p2color = UI.getAttribute("Player2name","color")
            -- print(p1color, p2color)
            -- local p1score = FLEET_SCORE[p1color]
            -- local p2score = FLEET_SCORE[p2color]
            player1score = FIRST_FLEET.objective + SECOND_FLEET.totalDead
            FIRST_FLEET.score = player1score--p2score['lost']+p1score['objective']

            UI.setAttribute("player1score","outline","#80FF00")
            player2score = SECOND_FLEET.objective + FIRST_FLEET.totalDead
            SECOND_FLEET.score = player2score--p1score['lost']+p2score['objective']
            UI.setAttribute("player2score","outline","#80FF00")
            UI.setAttribute("player1score","text",FIRST_FLEET.score)
            UI.setAttribute("player2score","text",SECOND_FLEET.score)
            updateScore()
        end,1)
    end

end
function findObjective(noerror)
    for _,object in ipairs(getAllObjects()) do
        if  vector.length(vector.sub(object.getPosition(),{-40.66,0.97,-0.09}))<2 then
            Action_select_objective(object)
            return object.getName()
        end
    end
    if not noerror then
        printToAll("Click 'Choose' on Objective to move to Proper Location for auto-detection!",{1,0,0})
    end
    return "None?"
end
player1score = nil
function onInput_player1score(player, value, idValue)
    if value~=nil then
        player1score = tonumber(value)
    else
        player1score = value
    end
    updateScore()
    if value==nil then
        UI.setAttribute("player1score","outline","#FF4040")
    else
        UI.setAttribute("player1score","outline","#80FF00")
    end
end
player2score = nil
function onInput_player2score(player, value, idValue)
    if value~=nil then
        player2score = tonumber(value)
    else
        player2score = value
    end
    updateScore()
    if value==nil then
        UI.setAttribute("player2score","outline","#FF4040")
    else
        UI.setAttribute("player2score","outline","#80FF00")
    end
end
player1points=0
player2points=0
function updateScore()
    margin = math.abs((player1score or 0) - (player2score or 0))
    score1 = nil
    score2 = nil
    if margin>=300 then
        score1=10
        score2=1
    elseif margin>=220 then
        score1=9
        score2=2
    elseif margin>=140 then
        score1=8
        score2=3
    elseif margin>=60 then
        score1=7
        score2=4
    else
        score1=6
        score2=5
    end
    if player1score==nil or player2score==nil then
        UI.setValue("Player1iswinner","")
        UI.setValue("Player2iswinner","")
        UI.setValue("Player1points","-")
        UI.setValue("Player2points","-")
    else
        if player1score>player2score then
            player1points=score1
            player2points=score2
            UI.setValue("Player1iswinner","Winner!")
            UI.setValue("Player2iswinner","")
        else
            player1points=score2
            player2points=score1
            UI.setValue("Player1iswinner","")
            UI.setValue("Player2iswinner","Winner!")
        end
        UI.setValue("Player1points",player1points)
        UI.setValue("Player2points",player2points)
    end
end
RANKED = false
function onClick_casualRanked(player, _, idValue)
    if idValue=="casual" then
        RANKED = false
        UI.setAttribute("casual","fontStyle","bold")
        UI.setAttribute("casual","fontSize","18")
        UI.setAttribute("casual","color","#C0C0C0")
        UI.setAttribute("casual","outline","white")
        UI.setAttribute("casual","textColor","black")

        UI.setAttribute("ranked","fontStyle","Normal")
        UI.setAttribute("ranked","fontSize","14")
        UI.setAttribute("ranked","color","black")
        UI.setAttribute("ranked","outline","#443B00")
        UI.setAttribute("ranked","textColor","#443B00")

        UI.hide("rankedWarning")
    else
        RANKED = true
        UI.setAttribute("casual","fontStyle","Normal")
        UI.setAttribute("casual","fontSize","14")
        UI.setAttribute("casual","color","black")
        UI.setAttribute("casual","outline","#404040")
        UI.setAttribute("casual","textColor","#404040")

        UI.setAttribute("ranked","fontStyle","bold")
        UI.setAttribute("ranked","fontSize","18")
        UI.setAttribute("ranked","color","#DAA520")
        UI.setAttribute("ranked","outline","#FFD700")
        UI.setAttribute("ranked","textColor","black")

        UI.show("rankedWarning")

    end
end
TOURNAMENT_CODE = nil
function onInput_tournamentCode(player, value, idValue)
    TOURNAMENT_CODE = value
end
