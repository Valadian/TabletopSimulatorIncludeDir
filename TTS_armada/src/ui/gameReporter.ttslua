
local Http = require('ge_tts/Http')
Http.setProxyUrl('https://ttsarmada.herokuapp.com/forward')

function onClick_selectGameReporterTab(player, _, idValue)
    onClick_ToggleUI(player, _, idValue)

    onClick_refreshObjective()
    --Autocalculate Players
    --Autocalculate Scores?
    for i, color in ipairs(Player.getColors()) do
        if color~="Grey" then
            if Player[color].seated then
                UI.show(color.."1")
                UI.show(color.."2")
            else
                UI.hide(color.."1")
                UI.hide(color.."2")
            end
        end
    end
    updateScore()
end
function onClick_refreshObjective(player, _, idValue)
    local objective = findObjective()
    UI.setValue("activeObjective",objective)
    if objective=="None?" then
        UI.setAttribute("activeObjective","color","#FF4040")
        UI.show("objectiveWarning")
        UI.show("objectiveRefresh")
    else
        UI.setAttribute("activeObjective","color","#80FF00")
        UI.hide("objectiveWarning")
        UI.hide("objectiveRefresh")
    end
end
function flatten(fleet)
    cards = {}
    if fleet == nil then return cards end
    for _,def in ipairs(fleet.objectives) do
        table.insert(cards,def.category..": "..def.name)
    end
    for _,ship in ipairs(fleet.ships) do
        table.insert(cards,ship.def.name.." ("..ship.def.cost..")")
        for _,def in ipairs(ship.upgrades) do
            table.insert(cards," - "..def.name.." ("..def.cost..")")
        end
    end
    for _,squad in ipairs(fleet.squads) do
        if squad.count~=nil and squad.count>1 then
            table.insert(cards," - "..squad.count.." x "..squad.def.name.." ("..(squad.def.cost*squad.count)..")")
        else
            table.insert(cards," - "..squad.def.name.." ("..squad.def.cost..")")
        end
    end
    cardValues = {}
    for _,str in ipairs(cards) do
        table.insert(cardValues, {stringValue = str})
    end
    return cardValues
end
function onClick_score_submit(player, _, idValue)
    player1 = UI.getValue("Player1name")
    player2 = UI.getValue("Player2name")
    --player1score
    --player2score
    player1points = UI.getValue("Player1points")
    player2points = UI.getValue("Player2points")
    objective = UI.getValue("activeObjective")
    player1fleet = flatten(createSpawningStructure(fleets[UI.getAttribute("Player1name","color")]))
    if #player1fleet == 0 then
        print("No fleet found for Player 1!")
        return
    end
    player2fleet = flatten(createSpawningStructure(fleets[UI.getAttribute("Player2name","color")]))
    if #player2fleet == 0 then
        print("No fleet found for Player 2!")
        return
    end
    submitted = os.date("!%Y%m%dT%H%M%S").."."..string.format("%03d",math.random (999))
    -- print(submitted)
    broadcastToAll("Posting Game to Cloud.....", {1,1,1})
    url = "https://firestore.googleapis.com/v1/projects/ttsarmada/databases/(default)/documents/games"
    -- url = "https://ttsarmada.herokuapp.com/databases/(default)/documents/games"
    Http.post(url,{
        ['fields'] = {
            player1 = { stringValue = tostring(player1)},
            player1fleet = { arrayValue = { values = player1fleet} },
            player1score = { integerValue = player1score or 0},
            player1points = { integerValue = player1points or 5},
            objective = { stringValue = tostring(objective)},
            player2 = { stringValue = tostring(player2)},
            player2fleet = { arrayValue = { values = player2fleet}},
            player2score = { integerValue = player2score or 0},
            player2points = { integerValue = player2points or 6},
            submitted = { stringValue = submitted},
            ranked = { booleanValue = RANKED},
            tournamentCode = { stringValue = TOURNAMENT_CODE or ""}
        }
    },{['Content-Type']="application/json"}, handle_score_submit)
end
function handle_score_submit(resp, error)
    print("Error: "..tostring(error))
    broadcastToAll("Game Successfully posted!", {0,1,0})
end
function onClick_selectPlayer1color(player, _, idValue)
    onClick_selectPlayer(idValue,1)
end
function onClick_selectPlayer2color(player, _, idValue)
    onClick_selectPlayer(idValue,2)
    -- UI.setValue("objective1","?")
    -- UI.setValue("objective2","?")
    -- UI.setValue("objective3","?")
    -- if fleets[idValue]~=nil then
    --     print("Found fleet")
    --     fleet = createSpawningStructure(fleets[idValue])
    --     for i, def in ipairs(fleet.objectives) do
    --         print("found objective: "..def.name)
    --         -- TODO:Evidently impossible
    --         UI.setValue("objective"..i,def.name)
    --     end
    -- end
end
function onClick_selectPlayer(idValue,i)
    color = UI.getAttribute(idValue,"color")
    -- printToAll(color,{1,1,1})
    if Player[color].seated then
        -- print(Player[color].steam_name)
        UI.setAttribute("Player"..i.."name", "color", color)
        UI.setValue("Player"..i.."name", Player[color].steam_name)
        if fleets[color]~=nil then
            UI.show("Player"..i.."listFound")
            UI.hide("Player"..i.."listNotFound")
        else
            UI.hide("Player"..i.."listFound")
            UI.show("Player"..i.."listNotFound")
        end
    else
        UI.setAttribute("Player"..i.."name", "color", "#FF4040") --color
        UI.setValue("Player"..i.."name", "?")
        UI.hide("Player"..i.."listFound")
        UI.show("Player"..i.."listNotFound")
    end

end
function findObjective()
    for _,object in ipairs(getAllObjects()) do
        if  vector.length(vector.sub(object.getPosition(),{-40.66,0.97,-0.09}))<2 then
            return object.getName()
        end
    end
    return "None?"
end
player1score = nil
function onInput_player1score(player, value, idValue)
    if value~=nil then
        player1score = tonumber(value)
    else
        player1score = value
    end
    updateScore()
    if value==nil then
        UI.setAttribute("player1score","outline","#FF4040")
    else
        UI.setAttribute("player1score","outline","#80FF00")
    end
end
player2score = nil
function onInput_player2score(player, value, idValue)
    if value~=nil then
        player2score = tonumber(value)
    else
        player2score = value
    end
    updateScore()
    if value==nil then
        UI.setAttribute("player2score","outline","#FF4040")
    else
        UI.setAttribute("player2score","outline","#80FF00")
    end
end
player1points=0
player2points=0
function updateScore()
    margin = math.abs((player1score or 0) - (player2score or 0))
    score1 = nil
    score2 = nil
    if margin>=300 then
        score1=10
        score2=1
    elseif margin>=220 then
        score1=9
        score2=2
    elseif margin>=140 then
        score1=8
        score2=3
    elseif margin>=60 then
        score1=7
        score2=4
    else
        score1=6
        score2=5
    end
    if player1score==nil or player2score==nil then
        UI.setValue("Player1iswinner","")
        UI.setValue("Player2iswinner","")
        UI.setValue("Player1points","-")
        UI.setValue("Player2points","-")
    else
        if player1score>player2score then
            player1points=score1
            player2points=score2
            UI.setValue("Player1iswinner","Winner!")
            UI.setValue("Player2iswinner","")
        else
            player1points=score2
            player2points=score1
            UI.setValue("Player1iswinner","")
            UI.setValue("Player2iswinner","Winner!")
        end
        UI.setValue("Player1points",player1points)
        UI.setValue("Player2points",player2points)
    end
end
RANKED = false
function onClick_casualRanked(player, _, idValue)
    if idValue=="casual" then
        RANKED = false
        UI.setAttribute("casual","fontStyle","bold")
        UI.setAttribute("casual","fontSize","18")
        UI.setAttribute("casual","color","#C0C0C0")
        UI.setAttribute("casual","outline","white")
        UI.setAttribute("casual","textColor","black")

        UI.setAttribute("ranked","fontStyle","Normal")
        UI.setAttribute("ranked","fontSize","14")
        UI.setAttribute("ranked","color","black")
        UI.setAttribute("ranked","outline","#443B00")
        UI.setAttribute("ranked","textColor","#443B00")

        UI.hide("rankedWarning")
    else
        RANKED = true
        UI.setAttribute("casual","fontStyle","Normal")
        UI.setAttribute("casual","fontSize","14")
        UI.setAttribute("casual","color","black")
        UI.setAttribute("casual","outline","#404040")
        UI.setAttribute("casual","textColor","#404040")

        UI.setAttribute("ranked","fontStyle","bold")
        UI.setAttribute("ranked","fontSize","18")
        UI.setAttribute("ranked","color","#DAA520")
        UI.setAttribute("ranked","outline","#FFD700")
        UI.setAttribute("ranked","textColor","black")

        UI.show("rankedWarning")

    end
end
TOURNAMENT_CODE = nil
function onInput_tournamentCode(player, value, idValue)
    TOURNAMENT_CODE = value
end
