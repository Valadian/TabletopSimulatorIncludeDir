DEF_BRACE = '79d121'
DEF_CONTAIN = '68abfc'
DEF_EVADE = 'c09d88'
DEF_REDIRECT = '36f595'
DEF_SCATTER = '895e91'
DEF_SALVO = '5028b2'

function update()
    for _,card in ipairs(getAllObjects()) do
        if card.tag == 'Card' then
            local cmd = card.getDescription()
            local oldName = card.getVar('oldName')
            card.setVar('oldName',card.getName())
            if cmd:starts "spawn" then
                if oldName ~= card.getName() then
                    card.setName(oldName)
                end
                local count = tonumber(cmd:match "spawn%s(.*)")
                if count == nil then count = 1 end
                printToAll("Spawn ship '"..card.getName().."'",{0,1,1})
                spawnShip(card.getName(),card.getPosition(),count,card.getRotation()[2])
                card.setDescription("")
                --card.lock()
            end
        end
    end
end
SmallShip = {
    collider = "http://paste.ee/r/eDbf1",
    convex = true,
    type = 1,
    material = 3,
    maneuver = {},
    defense_tokens = {},
    shields = {1,1,1,1},
    cost = 0,
    name = "",
    front = "",
    back = ""
}
function SmallShip:new (o,...)
    o = o or {}
    o = table.copy(o)
    if ... ~= nil then
        for i,tab in ipairs({...}) do
            for k, v in pairs(tab) do
                o[k] = v
            end
        end
    end
    setmetatable(o, SmallShip)
    SmallShip.__index = SmallShip
    local key = string.lower(o.name.." ("..o.cost..")")
    local key_noclass = string.gsub(key, "%-class","")
    local key_nocost = string.gsub(key,"%s%(%d+%)$","")
    local key_nocost_noclass = string.gsub(key_nocost, "%-class","")
    SHIPS[key] = o
    SHIPS[key_noclass] = o
    SHIPS[key_nocost] = o
    SHIPS[key_nocost_noclass] = o
    return o
end
MediumShip = {
    collider = "http://paste.ee/r/6LYTT",
    convex = true,
    type = 1,
    material = 3,
    maneuver = {},
    defense_tokens = {},
    shields = {1,1,1,1},
    cost = 0,
    name = "",
    front = "",
    back = ""
}
function MediumShip:new (o,...)
    o = o or {}
    o = table.copy(o)
    if ... ~= nil then
        for i,tab in ipairs({...}) do
            for k, v in pairs(tab) do
                o[k] = v
            end
        end
    end
    setmetatable(o, MediumShip)
    MediumShip.__index = MediumShip
    local key = string.lower(o.name.." ("..o.cost..")")
    local key_noclass = string.gsub(key, "%-class","")
    local key_nocost = string.gsub(key,"%s%(%d+%)$","")
    local key_nocost_noclass = string.gsub(key_nocost, "%-class","")
    SHIPS[key] = o
    SHIPS[key_noclass] = o
    SHIPS[key_nocost] = o
    SHIPS[key_nocost_noclass] = o
    return o
end
LargeShip = {
    collider = "http://paste.ee/r/a7mfW",
    convex = true,
    type = 1,
    material = 3,
    maneuver = {},
    defense_tokens = {},
    shields = {1,1,1,1},
    cost = 0,
    name = "",
    front = "",
    back = ""
}
function LargeShip:new (o,...)
    o = o or {}
    o = table.copy(o)
    if ... ~= nil then
        for i,tab in ipairs({...}) do
            for k, v in pairs(tab) do
                o[k] = v
            end
        end
    end
    setmetatable(o, LargeShip)
    LargeShip.__index = LargeShip
    local key = string.lower(o.name.." ("..o.cost..")")
    local key_noclass = string.gsub(key, "%-class","")
    local key_nocost = string.gsub(key,"%s%(%d+%)$","")
    local key_nocost_noclass = string.gsub(key_nocost, "%-class","")
    SHIPS[key] = o
    SHIPS[key_noclass] = o
    SHIPS[key_nocost] = o
    SHIPS[key_nocost_noclass] = o
    return o
end
HugeShip = {
    collider = "http://paste.ee/r/ClCL3",
    convex = true,
    type = 1,
    material = 3,
    maneuver = {},
    defense_tokens = {},
    shields = {1,1,1,1,1,1},
    cost = 0,
    name = "",
    front = "",
    back = ""
}
function HugeShip:new (o,...)
    o = o or {}
    o = table.copy(o)
    if ... ~= nil then
        for i,tab in ipairs({...}) do
            for k, v in pairs(tab) do
                o[k] = v
            end
        end
    end
    setmetatable(o, HugeShip)
    HugeShip.__index = HugeShip
    local key = string.lower(o.name.." ("..o.cost..")")
    local key_noclass = string.gsub(key, "%-class","")
    local key_nocost = string.gsub(key,"%s%(%d+%)$","")
    local key_nocost_noclass = string.gsub(key_nocost, "%-class","")
    SHIPS[key] = o
    SHIPS[key_noclass] = o
    SHIPS[key_nocost] = o
    SHIPS[key_nocost_noclass] = o
    return o
end
Squadron = {
    collider = "http://paste.ee/r/nAMCQ",
    convex = false,
    type = 1,
    material = 1,
    defense_tokens = {},
    cost = 0,
    name = "",
    front = "",
    back = ""
}
function Squadron:new (o, ...)
    o = o or {}
    o = table.copy(o)
    if ... ~= nil then
        -- printToAll("Found args: "..tostring(#{...}),{0,1,1})
        for i,tab in ipairs({...}) do
            for k, v in pairs(tab) do
                -- printToAll("Copying over: "..k)
                o[k] = v
            end
        end
    end
    setmetatable(o, Squadron)
    Squadron.__index = Squadron
    -- if o.name == nil then
    --     for k, v in pairs(o) do
    --         printToAll(k..":"..tostring(v),{1,0,0})
    --     end
    -- end
    -- if o.cost == nil then
    --     printToAll(o.name.." has no cost",{1,0,0})
    -- end
    local key = string.lower(o.name.." ("..o.cost..")")
    local key_noclass = string.gsub(key, "%-class","")
    local key_nocost = string.lower(o.name)
    local key_nocost_noclass = string.gsub(key_nocost, "%-class","")
    SHIPS[key] = o
    SHIPS[key_noclass] = o
    SHIPS[key_nocost] = o
    SHIPS[key_nocost_noclass] = o
    -- if key~=key_noclass then
    --     printToAll(key.." ~= "..key_noclass,{1,1,0})
    -- end
    return o
end
Card = {
    cost = 0,
    name = "",
    type = "",
    front = "",
    back = ""
}
function Card:new (o, ...)
    o = o or {}
    o = table.copy(o)
    if ... ~= nil then
        -- printToAll("Found args: "..tostring(#{...}),{0,1,1})
        for i,tab in ipairs({...}) do
            for k, v in pairs(tab) do
                -- printToAll("Copying over: "..k)
                o[k] = v
            end
        end
    end
    setmetatable(o, Card)
    Card.__index = Card
    CARDS[string.lower(o.name.." ("..o.cost..")")] = o
    CARDS[string.lower(o.name)] = o -- this can of overlap issues with cards that share names!!!
    return o
end
SHIPS = {}
CARDS = {}
function onObjectSpawn(object)
    --Create a Button on the card for leaving a container
    if object.tag ~= "Figurine" and (SHIPS[string.lower(object.getName())] != nil or string.starts(object.getDescription(),"Custom")) then
        createSpawnButtons(object)
    end
end
-- function onObjectLeaveContainer(Container, object)
--     --Create a Button on the card for leaving a container
--     if SHIPS[object.getName()] != nil or string.starts(object.getDescription(),"Custom") then
--         createSpawnButtons(object)
--     end
-- end
function createSpawnButtons(object)
    object.clearButtons()
    object.createButton({label = "Spawn: "..object.getName(), click_function = 'Action_Spawn', rotation = {0, 0, 0},
    position = {0, 0.3, -2}, width = (40 * string.len("Spawn: "..object.getName())), height = 100, font_size = 75, function_owner = self, color={0,1,0}, font_color={0,0,0}})
    object.createButton({label = "Done", click_function = 'Action_DoneSpawn', rotation = {0, 0, 0},
    position = {0, 0.3, -2.8}, width = 320, height = 100, font_size = 75, function_owner = self, color={1,0,0}, font_color={1,1,1}})
    -- local data = SHIPS[object.getName()]
    -- data[12] = object.getGUID()
    -- data[13] = {}
    -- object.setTable('Details', data)
    if string.starts(object.getDescription(),"Custom") then
        printToAll("Loading definition for: "..(object.getName()) , {0,1,1})
        object.createButton({label = "Reload Custom Definition", click_function = 'createSpawnButtons', rotation = {0, 0, 0},
        position = {0, 0.3, -2.4}, width = 900, height = 100, font_size = 75, function_owner = self, color={0,1,1}, font_color={0,0,0}})
        -- printToAll("/begin desc",{1,1,1})
        -- printToAll(object.getDescription(),{1,1,1})
        -- printToAll("/end desc",{1,1,1})
        -- Custom|Ship|Large|mesh|diffuse|ruler|II|I,II|-,I,II
        local model_data = string:split(object.getDescription(),'\n',nil,false)
        local ship_data = {}
        -- printToAll(model_data[2],{1,1,1})
        -- printToAll(string.starts(model_data[2],"Ship"),{1,1,1})
        -- printToAll(model_data[3],{1,1,1})
        -- printToAll(string.starts(model_data[3],"Small"),{1,1,1})
        if string.strip(model_data[2])=="Ship" then
            -- 7 will be shields (F,L,R,B)
            -- local shields = list(map(int,string:split(model_data[7],",",nil,false)))
            -- local defense_tokens = string:split(model_data[8],",",nil,false)
            -- 8 will be defense
            local maneuver = {}
            -- lolnope loadstring("maneuver = "..model_data[7])
            table.insert(maneuver,string:split(string.strip(model_data[7]),",",nil,false))
            if #model_data>7 then
                table.insert(maneuver,string:split(string.strip(model_data[8]),",",nil,false))
            end
            if #model_data>8 then
                table.insert(maneuver,string:split(string.strip(model_data[9]),",",nil,false))
            end
            if #model_data>9 then
                table.insert(maneuver,string:split(string.strip(model_data[10]),",",nil,false))
            end
            ship_data = {
                mesh = string.strip(model_data[4]),
                diffuse = string.strip(model_data[5]),
                ruler = string.strip(model_data[6]),
                maneuver = maneuver,
                --defense_tokens = defense_tokens,
                --shields = shields,
                convex = true,
                type = 1,
                material = 3,
            }
            if string.strip(model_data[3])=="Small" then
                ship_data.collider = SmallShip.collider
            elseif string.strip(model_data[3])=="Medium" then
                ship_data.collider = MediumShip.collider
            elseif string.strip(model_data[3])=="Large" then
                ship_data.collider = LargeShip.collider
            end
        elseif string.strip(model_data[2])=="Squadron" then
            -- Custom|Squadron|mesh|diffuse|health|move
            ship_data = {
                mesh = string.strip(model_data[3]),
                diffuse = string.strip(model_data[4]),
                health =  string.strip(model_data[5]),
                move = string.strip(model_data[6]),
                collider = "http://paste.ee/r/nAMCQ",
                convex = false,
                type = 1,
                material = 1 }
        end
        object.setTable('Custom',ship_data)
    end
end
function Action_Spawn(card)
    if card.getTable('Custom') != nil then
        printToAll("Spawning Custom Ship",{0,1,1})
        spawnDefinition(card.getTable('Custom'),card.getName(),card.getPosition(),1,card.getRotation()[2])
    else
        spawnShip(card.getName(),card.getPosition(),1,card.getRotation()[2])
    end
end
function Action_DoneSpawn(card)
    card.clearButtons()
end
function onload()
#include defs/rebel/ships
#include defs/empire/ships
    local ship = nil

#include defs/rebel/squadrons
#include defs/empire/squadrons
    local ship = nil

#include defs/republic/ships
#include defs/separatist/ships
    local ship = nil

#include defs/republic/squadrons
#include defs/separatist/squadrons

#include defs/cards/commanders
#include defs/cards/defensive_retrofit
#include defs/cards/experimental_retrofit
#include defs/cards/fleet_command
#include defs/cards/fleet_support
#include defs/cards/ion_cannons
#include defs/cards/offensive_retrofit
#include defs/cards/officer
#include defs/cards/ordnance
#include defs/cards/superweapon
#include defs/cards/support_team
#include defs/cards/title
#include defs/cards/turbolaser
#include defs/cards/weapons_team_and_offensive_retrofit
#include defs/cards/weapons_team
    setRulerMeshes()
    drawListSpawnerButtons()
end
function setRulerMeshes()
    for _,ship in ipairs(getAllObjects()) do
        if ship.tag == 'Figurine' then
            for key,ship_def in pairs(SHIPS) do
                --printToAll("Checking Ship Def: "..key,{0,1,1})
                if ship_def.mesh == ship.getCustomObject().mesh then
                    ship.setVar("rulerMesh",ship_def.ruler)
                    --printToAll("set ruler for: "..ship_def.ruler,{0,1,1})
                end
            end
        end
    end
end
function drawListSpawnerButtons()
    for _,listSpawner in ipairs(getAllObjects()) do
        if listSpawner.getName()=="List Spawner" then
            Action_CloseListSpawner(listSpawner)
        end
    end
end
function Action_CloseListSpawner(listSpawner)
    listSpawner.clearButtons()
    listSpawner.clearInputs()
    listSpawner.createButton({label = ">", click_function = 'Action_OpenListSpawner', rotation = {0, 0, 0},
        position = {0.4, 0.4, -5.9}, width = 400, height = 400, font_size = 300, function_owner = self, color={0,1,0}, font_color={0,0,0}})

end
function Action_OpenListSpawner(listSpawner)
    listSpawner.clearButtons()
    listSpawner.clearInputs()
    listSpawner.createButton({label = "<", click_function = 'Action_CloseListSpawner', rotation = {0, 0, 0},
        position = {-0.4, 0.2, -5.9}, width = 400, height = 400, font_size = 300, function_owner = self, color={1,0,0}, font_color={0,0,0}})
    listSpawner.createInput({label = "paste list here", input_function = 'Input_UpdateList', rotation = {0, 0, 0},
        position = {3.2, 0.2, 0}, width = 3000, height = 6000, font_size = 85, function_owner = self, font_color={0,0,0}})
    listSpawner.createButton({label = "V V V     Spawn!     V V V", click_function = 'Action_SpawnListSpawner', rotation = {0, -90, 0},
        position = {7, 0.2, 0}, width = 6000, height = 500, font_size = 400, function_owner = self, color={0,1,0}, font_color={0,0,0}})
end
function Input_UpdateList(obj, color, input, stillEditing)
    obj.setVar("list",input)
end
function replace(input, pattern, replace)
    local output = string.gsub(input, pattern, replace)
    -- if output~=input then
    --     printToAll("Applied: '"..pattern.."'. '"..input.."' -> '"..output.."'")
    -- end
    return output
end
function Action_SpawnListSpawner(listSpawner)
    local list = listSpawner.getVar("list")
    -- print(#list)
    lines = string:split(list, "\n")
    -- print(#lines)
    for _,line in ipairs(lines) do
        if not line:starts "=" then
            print("Parsing line: '"..line.."'")
            line = string.strip(line)
            count = string.match(line, "^•%s+(%d+)%s+x%s+")
            if count==nil then
                count = string.match(line, "^(%d+)%s+")
            end
            if count~=nil then
                print("Found count: "..tostring(count))
            end
            -- need to handle missing " Star Destroyer"
            line = replace(line, "[%s ]+%(com%)","")
            line = replace(line, "•%s+%d+%s+x%s+","")
            line = replace(line,"^%d+[%s ]+","")
            line = replace(line, "^[•%-][%s ]+","") -- THAT IS NOT A NORMAL SPACE!
            line = replace(line,"^%-%s+","")
            line = replace(line,"[%s ]+%([%s ]*(%d+)[%s ]+points%)$"," (%1)")
            line = replace(line,"%[[%s ]+flagship[%s ]+%][%s ]+","")
            line = replace(line,"%(%s*(%d+)%s*%)$","(%1)")
            line = string.strip(line)
            line = replace(line," +"," ")
            -- cost = string.match(line, ".*%((%d+)%)$")
            -- cost = string.match(line, "%((%d+)%)$")
            -- print(cost)
            -- if line=="Darth Vader (1)" then
            --     line = "Darth Vader (Officer) (1)"
            -- end
            -- if line=="Darth Vader (3)" then
            --     line = "Darth Vader (WeaponsTeamAndOffensiveRetrofit) (3)"
            -- end
            line_nocost = string.gsub(line,"[%s ]+%([%s ]*%d+[%s ]*%)$","")
            line_nocost_no_s = string.gsub(line_nocost,"s$","")
            if line ~="" then
                if CARDS[string.lower(line)]~=nil then
                    printToAll("Spawning Card: "..line,{0,1,1})
                elseif CARDS[string.lower(line_nocost)]~=nil then
                    printToAll("Spawning Card: "..line,{0,1,1})
                elseif SHIPS[string.lower(line_nocost)]~=nil then
                    if count~=nil then
                        printToAll("Spawning Squadron "..tostring(count).."x: "..line,{0,1,0})
                    else
                        printToAll("Spawning Ship: "..line,{0,1,0})
                    end
                elseif SHIPS[string.lower(line_nocost_no_s)]~=nil then
                    if count~=nil then
                        printToAll("Spawning Squadron "..tostring(count).."x: "..line,{0,1,0})
                    else
                        printToAll("Spawning Ship: "..line,{0,1,0})
                    end
                else
                    printToAll("Unfound item: '"..line.."'|'"..line_nocost.."'",{1,0,0})
                end
            end
        end
    end
end
function spawnShip(name,pos,count,rotation)
    local ship_def = SHIPS[string.lower(name)]
    spawnDefinition(ship_def,name,pos,count,rotation)
end
token_offsets = {{-0.86,0,-3.64},{0.86,0,-3.64},{-0.86,0,-4.94},{0.86,0,-4.94},{-0.86,0,-6.24},{0.86,0,-6.24}}
function spawnDefinition(ship_def, name, pos,count,y_rotation)
    --local ship_def = SHIPS[name]
    if ship_def~=nil then
    --for _,ship_def in ipairs(SHIPS) do
    --    if ship_def.name == name then
        rotation_offset = 180
        if ship_def.health~=nil and ship_def.move~=nil then
            name = "("..ship_def.health.."/"..ship_def.health..") ["..ship_def.move.."] "..name
            rotation_offset = 0
        end
        for i=1, count, 1 do
            local obj_parameters = {}
            obj_parameters.type = 'Custom_Model'
            obj_parameters.position = {pos[1],4+i,pos[3]}
            obj_parameters.rotation = {0,y_rotation-rotation_offset,0 }
            local ship = spawnObject(obj_parameters)
            local custom = {}
            custom.mesh = ship_def.mesh
            custom.collider = ship_def.collider
            custom.diffuse = ship_def.diffuse
            custom.convex = ship_def.convex
            custom.type = ship_def.type
            custom.material = ship_def.material
            ship.setCustomObject(custom)

            ship.setName(name)
            ship.setVar("rulerMesh",ship_def.ruler)
            ship.setTable("maneuver",ship_def.maneuver)
            ship.setTable("shields",ship_def.shields)
        end
        if ship_def.defense_tokens~=nil then
            for i,source_guid in ipairs(ship_def.defense_tokens) do
                source = getObjectFromGUID(source_guid)
                offset = token_offsets[i]
                local obj_parameters = {}
                obj_parameters.position = vector.sub(pos,vector.rotate(offset,y_rotation))
                obj_parameters.rotation = {0,y_rotation+90,0}
                source.takeObject(obj_parameters)
            end
        end
    --    end
    --end
    end
end
function math.round(x)
    return x>=0 and math.floor(x+0.5) or math.ceil(x-0.5)
end
vector={}
function vector.add(pos, offset)
    return {pos[1] + offset[1],pos[2] + offset[2],pos[3] + offset[3]}
end
function vector.sub(pos, offset)
    return {pos[1] - offset[1],pos[2] - offset[2],pos[3] - offset[3]}
end
function vector.rotate(direction, yRotation)

    local rotval = math.round(yRotation)
    local radrotval = math.rad(rotval)
    local xDistance = math.cos(radrotval) * direction[1] + math.sin(radrotval) * direction[3]
    local zDistance = math.sin(radrotval) * direction[1] * -1 + math.cos(radrotval) * direction[3]
    return {xDistance, direction[2], zDistance}
end
function string.strip(str)
    return  string.gsub(str, '^%s*(.-)%s*$', '%1')
end
function string.starts(String,Start)
    return string.sub(String,1,string.len(Start))==Start
end
function string:split(this,sSeparator, nMax, bRegexp)
    assert(sSeparator ~= '')
    assert(nMax == nil or nMax >= 1)

    local aRecord = {}

    if this:len() > 0 then
        local bPlain = not bRegexp
        nMax = nMax or -1

        local nField, nStart = 1, 1
        local nFirst,nLast = this:find(sSeparator, nStart, bPlain)
        while nFirst and nMax ~= 0 do
            aRecord[nField] = this:sub(nStart, nFirst-1)
            nField = nField+1
            nStart = nLast+1
            nFirst,nLast = this:find(sSeparator, nStart, bPlain)
            nMax = nMax-1
        end
        aRecord[nField] = this:sub(nStart)
    end

    return aRecord
end
function table.copy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in pairs(orig) do
            copy[orig_key] = orig_value
        end
    else -- number, string, boolean, etc
    copy = orig
    end
    return copy
end

function table.contains(self, val)
    for index, value in ipairs (self) do
        if value == val then
            return true
        end
    end

    return false
end
