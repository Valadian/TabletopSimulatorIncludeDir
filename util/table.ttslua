table.Distinct = function(t)
    local distinct = T{}
    for k,v in pairs(t) do
        if not distinct:Contains(v) then
            table.insert(distinct,v)
        end
    end

    return distinct
end
table.Sum = function(t)
    local sum = 0
    for k,v in pairs(t) do
        sum = sum + v
    end

    return sum
end
table.FirstOrNil = function(t)
    if #t>0 then
        return t[1]
    else
        return nil
    end
end
table.removeByValue = function(table1, value)
    for k,v in pairs(table1) do
      if v == value then
          table.remove(table1, k)
          break
      end
    end
end
function table_to_csv(t)
    local csv = ""
    for i,val in ipairs(t) do
        csv = csv..tostring(val)
        if i!=#t then
            csv = csv..","
        end
    end
    return csv
end
-- table.OrderBy = function(t, selector)
--
-- end
table.OrderBy = function(t, selector)
    function compare(a,b)
        return selector(a)<selector(b)
    end
    table.sort(t, compare)
    return t
end
table.OrderByDesc = function(t, selector)
    function compare(a,b)
        return selector(a)>selector(b)
    end
    table.sort(t, compare)
    return t
end
table.Select = function(t, selector)
    local result = T{}
    for _,value in ipairs(t) do
        table.insert(result, selector(value))
    end
    return result
end

table.Where = function(t, predicate)
    local result = T{}
    for _,value in ipairs(t) do
        if predicate(value) then
            table.insert(result, value)
        end
    end
    return result
end

table.CountIf =function(t, predicate)
    local result = 0
    for _,value in ipairs(t) do
        if predicate(value) then
            result=result+1
        end
    end
    return result
end
function table.contains(self,val)
    for index, value in ipairs (self) do
        if value == val then
            return true
        end
    end

    return false
end
table.Contains = function(tab, el)
    for k,v in pairs(tab) do
        if v == el then
            return true
        end
    end
    return false
end
-- Shallow table copy
-- Does not include metatables
table.ShallowCopy = function(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in pairs(orig) do
            copy[orig_key] = orig_value
        end
    else
        copy = orig
    end
    return copy
end
table.IndexOf = function(t,item)
    for i,v in ipairs(t) do
        if v==item then
            return i
        end
    end
    return -1
end
table.Any = function(t)
    return #t>0
end
table.Keys = function(tbl)
    local keyset={}
    local n=0

    for k,v in pairs(tbl) do
      n=n+1
      keyset[n]=k
    end
    return keyset
end
function T(t)
    local tmp = {}
    if t~=nil then
        local i = 1
        for _,val in pairs(t) do
            tmp[i]=val
            i=i+1
        end
    end
    return setmetatable(tmp, {__index = table})
end
function table.removeKey(t, k)
	local i = 0
	local keys, values = {},{}
	for k,v in pairs(t) do
		i = i + 1
		keys[i] = k
		values[i] = v
	end

	while i>0 do
		if keys[i] == k then
			table.remove(keys, i)
			table.remove(values, i)
			break
		end
		i = i - 1
	end

	local a = {}
	for i = 1,#keys do
		a[keys[i]] = values[i]
	end

	return a
end
function spairs(t, order)
    -- collect the keys
    local keys = {}
    for k in pairs(t) do keys[#keys+1] = k end

    -- if order function given, sort by it by passing the table and keys a, b,
    -- otherwise just sort the keys
    if order then
        table.sort(keys, function(a,b) return order(t, a, b) end)
    else
        table.sort(keys)
    end

    -- return the iterator function
    local i = 0
    return function()
        i = i + 1
        if keys[i] then
            return keys[i], t[keys[i]]
        end
    end
end

function table.merge(self, ...)
    if self == nil then
        copy = {}
    else
        copy = table.copy(self)
    end
    if ... ~= nil then
        for i,tab in ipairs({...}) do
            for k, v in pairs(tab) do
                copy[k] = v
            end
        end
    end
    return copy
end

function table.copy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in pairs(orig) do
            copy[orig_key] = orig_value
        end
    else -- number, string, boolean, etc
    copy = orig
    end
    return copy
end

function table.contains(self, val)
    for index, value in ipairs (self) do
        if value == val then
            return true
        end
    end

    return false
end
