#include ../util/math

vector = {}
function vector.length(v)
    return math.sqrt(v[1]*v[1]+v[2]*v[2]+v[3]*v[3])
end
function vector.add(pos, offset)
    return {pos[1] + offset[1],pos[2] + offset[2],pos[3] + offset[3]}
end
function vector.sub(pos, offset)
    return {pos[1] - offset[1],pos[2] - offset[2],pos[3] - offset[3]}
end
function vector.scale(v,s)
    return {v[1] * s[1],v[2] * s[2],v[3] * s[3]}
end
function vector.prod(v,s)
    return {v[1] * s,v[2] * s,v[3] * s}
end
function vector.onedividedby(v)
    return {1/v[1],1/v[2] ,1/v[3]}
end
function vector.rotate(direction, yRotation)

    local rotval = math.round(yRotation)
    local radrotval = math.rad(rotval)
    local xDistance = math.cos(radrotval) * direction[1] + math.sin(radrotval) * direction[3]
    local zDistance = math.sin(radrotval) * direction[1] * -1 + math.cos(radrotval) * direction[3]
    return {xDistance, direction[2], zDistance}
end
function vector.toangle(v)
    return math.atan2(-v[3],v[1])*180/math.pi - 90
end
function vector.eq(a,b)
    return double.eq(a[1],b[1]) and double.eq(a[2],b[2]) and double.eq(a[3],b[3])
end
function vector.tostring(v)
    return "{"..math.round(v[1],3)..","..math.round(v[2],3)..","..math.round(v[3],3).."}"
end
function vector.distance(v1,v2)
    x = (v1[1]-v2[1])*(v1[1]-v2[1])
    y = (v1[3]-v2[3])*(v1[3]-v2[3])
    return math.sqrt(math.abs((x+y)))
end
