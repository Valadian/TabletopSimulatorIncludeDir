--#include ../../util/table

function AiUiPlanningPollingUpdate()
    if currentphase == PlanningSort then
        updateStatusUI()
    end
end
phases = {"Planning","Activation","Combat","End"}
function updateStatusUI(next, complete)
    local PHASENAME = {}
    PHASENAME[PlanningSort] = "Planning"
    PHASENAME[MoveSort] = "Activation"
    PHASENAME[AttackSort] = "Combat"
    --phasename[nil] = "End"
    local PHASECOLOR = {}
    PHASECOLOR["Planning"] = "FF80FF"
    PHASECOLOR["Activation"] = "00FF80"
    PHASECOLOR["Combat"] = "FF8000"
    PHASECOLOR["End"] = "FF0000"
    --phasecolor[nil] = "FF0000"
    current_phasename = currentphase and PHASENAME[currentphase] or "End"
    for _, phasename in ipairs(phases) do
        if phasename==current_phasename then
            UI.setAttribute(phasename, "textColor", "black")
            UI.setAttribute(phasename, "color", "#"..(PHASECOLOR[phasename] or "FF0000"))
            --UI.setAttribute(phasename, "fontStyle", "bold")
        else
            --UI.setAttribute(phasename, "class", nil)
            UI.setAttribute(phasename, "color", "#303030")
            UI.setAttribute(phasename, "textColor", "white")
            --UI.setAttribute(phasename, "fontStyle", "Normal")
        end
    end
    UI.setValue("turn_text","Turn "..tostring(getTurnNumber()).."/"..tostring(getTotalTurns()))
    UI.setAttribute("turn_progressbar", "percentage", math.min(100,100*getTurnNumber()/getTotalTurns()))
    if getTurnNumber()>=getTotalTurns() then
        UI.setAttribute("turn_progressbar", "fillImageColor", "#800000")
    else
        UI.setAttribute("turn_progressbar", "fillImageColor", "#008000")
    end
    -- if currentphase~=nil then
    --     UI.setAttribute("phase_panel","color","#"..phasecolor[currentphase])
    --     UI.setValue("phase_text",phasename[currentphase].." Phase")
    -- else
    --     UI.setAttribute("phase_panel","color","grey")
    --     UI.setValue("phase_text","Setup")
    -- end
    if currentphase == PlanningSort then
        index = 1
        for i,ship in ipairs(getAllObjects()) do
            if ship and isShip(ship) and isInPlay(ship) and not isAi(ship) then
                updateShipRow(ship,index)
                index=index+1
            end
        end
        for j=index,20 do
            local istr = tostring(j)
            UI.hide("ship"..istr)
        end
    elseif currentphase == AttackSort or currentphase == MoveSort then
        local ais = {}
        local showPlayers = true
        for i,ship in ipairs(getAllObjects()) do
            if isInPlay(ship) and (isAi(ship) or (isShip(ship)  and showPlayers)) and getSkill(ship)~=nil then
                table.insert(ais, ship)
            end
        end -- [end loop for all ships]
        table.sort(ais,currentphase)
        index = 1
        local first = true
        for i,ship in ipairs(ais) do
            local current = next == nil and not complete and  first or next == ship.getGUID()
            first = false
            updateShipRow(ship,index,current)
            index=index+1
        end
        for j=index,20 do
            local istr = tostring(j)
            UI.hide("ship"..istr)
        end
    else
        for j=1,20 do
            local istr = tostring(j)
            UI.hide("ship"..istr)
        end
    end
end
function ClearTimer()
    for i=1,10 do
        UI.setAttribute("timer_"..tostring(i),"color","black")
    end
end
function SetTimer(value)
    for i=1,10 do
        if i<=value then
            UI.setAttribute("timer_"..tostring(i),"color","green")
        else
            UI.setAttribute("timer_"..tostring(i),"color","grey")
        end
    end
end
function updateShipRow(ship, index, active)
    local istr = tostring(index)
    local modeldb = Global.call( 'API_ModelDB_GetData',ship)
    local type = modeldb.type
    --local type = tostring(getAiType(ship))
    local def = findDefByName(campaign, type)
    local type_color = def.typeColor
    local skill = tostring(getSkill(ship))
    local skill_color = getSkillColor(ship)
    UI.setAttribute("ship"..istr.."ps_text", "color", "#"..skill_color)
    UI.setValue("ship"..istr.."ps_text", skill)
    UI.setAttribute("ship"..istr.."icon_image", "image", type)
    UI.setAttribute("ship"..istr.."icon_image", "color", '#'..type_color)
    color = ship.getName():match "%[(%w%w%w%w%w%w)]"
    if color then
        UI.setAttribute("ship"..istr.."name_text", "color", "#"..color)
    else
        UI.setAttribute("ship"..istr.."name_text", "color", "white")
    end
    UI.setValue("ship"..istr.."name_text", ship.getName():gsub("%[.-%]",""))

    local found = ship.getVar('hasDial')
    if found then
        local maneuver = ship.getVar('Maneuver'):gsub("e","l")
        local image = ""
        local speed = maneuver:match '%d'
        if maneuver=="s0" then
            image = "_S0"
        else
            local prefix = maneuver:match '^%l+'
            local suffix = maneuver:match '%l+$' or ""
            image = "_"..string.upper(prefix)..string.upper(suffix)
        end
        if def.swerves[maneuver.."*"]!=nil then
            UI.setAttribute("ship"..istr.."move_image", "color",'red')
            UI.setAttribute("ship"..istr.."move_text", "color",'red')
        else
            UI.setAttribute("ship"..istr.."move_image", "color",'white')
            UI.setAttribute("ship"..istr.."move_text", "color",'white')
        end
        UI.setAttribute("ship"..istr.."move_image", "image",image)
        UI.setValue("ship"..istr.."move_text", speed)
    else
        UI.setAttribute("ship"..istr.."move_image", "image","BLANK")
        UI.setValue("ship"..istr.."move_text", "")
    end

    if currentphase==PlanningSort then
        UI.setAttribute("ship"..istr.."select_button","active","false")
        if found then
            UI.setAttribute("ship"..istr.."status_text", "color", "green")
            UI.setValue("ship"..istr.."status_text", "READY")
        else
            UI.setAttribute("ship"..istr.."status_text", "color", "red")
            UI.setValue("ship"..istr.."status_text", "WAITING")
        end
    elseif currentphase==AttackSort or currentphase==MoveSort then
        --#000000|#00FF80|#008040|#000000
        UI.setAttribute("ship"..istr.."select_button","active","true")
        if currentphase==MoveSort then
            UI.setAttribute("ship"..istr.."select_button","colors","transparent|#00FF80|#008040|transparent")
        elseif currentphase==AttackSort then
            UI.setAttribute("ship"..istr.."select_button","colors","transparent|#FF8000|#804000|transparent")
        end
        UI.setValue("ship"..istr.."status_text", "")
        if isAi(ship) then
        UI.setAttribute("ship"..istr.."move_image", "color",'red')
            if aitargets[ship.getGUID()] then
                UI.setAttribute("ship"..istr.."move_image", "image","LOCK")
                local nocolor = aitargets[ship.getGUID()].getName():gsub("%[.-%]","")
                local short = string.sub(nocolor, 1,8)
                local tgtcolor = aitargets[ship.getGUID()].getName():match "%[(%w%w%w%w%w%w)]" or "FFFFFF"
                UI.setValue("ship"..istr.."status_text", short)
                UI.setAttribute("ship"..istr.."status_text", "color", "#"..tgtcolor)
            else
                UI.setValue("ship"..istr.."status_text", "")
                UI.setAttribute("ship"..istr.."move_image", "color","black")
            end
        end
    end
    if active then
        local phasecolor = {}
        phasecolor[PlanningSort] = "FF80FF"
        phasecolor[MoveSort] = "00FF80"
        phasecolor[AttackSort] = "FF8000"
        --outline
        --UI.setAttribute("ship"..istr.."indicator_panel", "outlineSize", "2 0")
        UI.setAttribute("ship"..istr.."indicator_panel", "outline", "#"..phasecolor[currentphase])
    else
        --UI.setAttribute("ship"..istr.."indicator_panel", "outlineSize", "0 0")
        UI.setAttribute("ship"..istr.."indicator_panel", "outline", "#000000")
    end
    UI.show("ship"..istr)
end
function onClick_SelectShipByIndex(player, strindex, idValue)
    local index = tonumber(strindex)
    local ais = {}
    local showPlayers = true
    for i,ship in ipairs(getAllObjects()) do
        if isInPlay(ship) and (isAi(ship) or (isShip(ship)  and showPlayers)) and getSkill(ship)~=nil then
            table.insert(ais, ship)
        end
    end -- [end loop for all ships]
    if currentphase~=nil then
        table.sort(ais,currentphase)
    end
    for i,ship in ipairs(ais) do
        if i==index then
            if currentphase==MoveSort then
                ship.highlightOn({0,0,1}, 5)
                findAiTarget(ship.getGUID())
                State_AIMove(ship)
                UpdateNote(MoveSort, ship.getGUID())
            elseif currentphase==AttackSort then
                Render_Ruler(ship)
                Render_AttackButton(ship)
                UpdateNote(AttackSort, ship.getGUID())
            end
        else
            ship.clearButtons()
        end
    end
end
function onClick_selectXwingAITab(player, _, idValue)
    local xml = UI.getXmlTable()
    for i=1,#xml do
        if(xml[i].attributes.id == "xwingDisplay") then
            local xwingPanel = xml[i]
            --xml[i].attributes.height = "70"
            --table.removeKey(xml[i].attributes, "offsetXY")
            for j=1,#(xwingPanel.children) do
                if(xwingPanel.children[j].attributes.class == "buttonPanel") then
                    UI.hide(xwingPanel.children[j].attributes.id)
                end
            end
        end
    end
    UI.show(idValue.."Panel")
    --UI.hide("ship7")
    updateStatusUI()
end
function onClick_setPhase(player, _, idValue)
    --ai = getObjectFromGUID('030220')
    self.call("Action_"..idValue)
end
function onClick_ToggleUI(player, _, idValue)
    if UI.getAttribute("xwingDisplay", "height")=="40" then
        UI.show("title")
        UI.show("roundTrackerPanel")
        --UI.hide("shipSpawnerPanel")
        UI.show("tabContainer")
        UI.setAttribute("xwingDisplay", "height", "660")
        UI.setAttribute("xwingDisplay", "width", "400")
        UI.setAttribute("minimizeBtn", "colors", "transparent|#FF0000|#800000|transparent")
        UI.setAttribute("minimizeBtn", "tooltip", "Minimize")
    else
        UI.hide("title")
        UI.hide("roundTrackerPanel")
        UI.hide("shipSpawnerPanel")
        UI.hide("tabContainer")
        UI.setAttribute("xwingDisplay", "height", "40")
        UI.setAttribute("xwingDisplay", "width", "40")
        UI.setAttribute("minimizeBtn", "colors", "transparent|#00FF00|#008000|transparent")
        UI.setAttribute("minimizeBtn", "tooltip", "Display UI")
    end
end
local spawnUIFaction = EMPIRE
local spawnUICount = 1
local spawnUIShipType = "TIE Fighter"
local spawnUIShipSubType = "TIE"
local spawnUIWingName = "Alpha"
local spawnUIWingNameOverride = ""
local spawnUIElite = false
local WINGS = {"Alpha","Beta","Delta","Epsilon","Gamma","Zeta"}
local FACTION_COLORS = {}
FACTION_COLORS["Empire"] = "#0B007C"
FACTION_COLORS["Rebellion"] = "#820000"
FACTION_COLORS["Scum"] = "#FF8400"
function onClick_spawnFaction(player, faction, idValue)
    spawnUIFaction = faction
    for i,f in ipairs(FACTIONS) do
        if f==spawnUIFaction then
            UI.setAttribute("spawn"..f.."Button","color",FACTION_COLORS[f].."|"..FACTION_COLORS[f].."|"..FACTION_COLORS[f].."|#303030")
            UI.setAttribute("spawn"..f.."Button","iconColor","white")
            UI.show("spawn"..f.."Ships")
        else
            UI.setAttribute("spawn"..f.."Button","color","#303030|"..FACTION_COLORS[f].."|"..FACTION_COLORS[f].."|#303030")
            UI.setAttribute("spawn"..f.."Button","iconColor","#505050")
            UI.hide("spawn"..f.."Ships")
        end
    end
end
function onClick_spawnShipType(player, shipType, idValue)
    spawnUIShipType = string.gsub(idValue,"spawn","") --Escaped
    --printToAll(spawnUIShipType)
    for i,t in ipairs(SHIP_TYPES) do
        if t == spawnUIShipType then
            UI.setAttribute("spawn"..t.."_panel", "color","green")
        else
            UI.setAttribute("spawn"..t.."_panel", "color","black")
        end
    end
    local count = 0
    local keys = {}
    local first = true
    for _,campaign_key in ipairs(campaigns) do
        for key,ai in pairs(AI_DEFS[campaign_key]) do
            escaped_name = string.gsub(ai.shipType,"[%.%s-%/]","")
            --printToAll("Checking: "..escaped_name)
            if spawnUIShipType==escaped_name and not table.Contains(keys, key) then
                --printToAll("FOUND!: "..escaped_name)
                count = count+1
                table.insert(keys, key)
                UI.setAttribute("spawnSubType"..tostring(count),"text","["..key.."] "..ai.description.." ("..campaign_key..")")
                if first then
                    UI.setAttribute("spawnSubType"..tostring(count), "isOn", "true")
                    spawnUIShipSubType = key
                    first = false
                -- else
                --     UI.setAttribute("spawnSubType"..tostring(count), "isOn", "false")
                end
                if ai.isLargeShip then
                    onClick_spawnSetCount(nil,"1",nil)
                    UI.show('spawnLargeCount')
                    UI.hide('spawnSmallCount')
                else
                    UI.hide('spawnLargeCount')
                    UI.show('spawnSmallCount')
                    onClick_spawnSetCount(nil,tostring(spawnUICount),nil)
                end
            end
        end
    end
    for i=count,1 do
        UI.setAttribute("spawnSubType"..tostring(count),"text","[]")
    end
    if count<2 then
        UI.hide('spawnSubTypeContainer')
    else
        UI.show('spawnSubTypeContainer')
    end
end
function onClick_spawnShipSubType(player, _, idValue)
    local text = UI.getAttribute(idValue, "text")
    spawnUIShipSubType = text:match '%[(.*)%]'
    --printToAll(spawnUIShipSubType)
end
function onClick_spawnSetCount(player, strindex, idValue)
    spawnUICount = tonumber(strindex)
    for i=1,4 do
        if i<=spawnUICount then
            UI.setAttribute("spawnCount"..tostring(i),"iconColor","green")
        else
            UI.setAttribute("spawnCount"..tostring(i),"iconColor","#202020")
        end
    end
end
function onClick_spawnSetWing(player, wingName, idValue)
    spawnUIWingName = wingName
    for i,wing in ipairs(WINGS) do
        if wing==spawnUIWingName then
            UI.setAttribute("spawn"..wing,"color","green")
        else
            UI.setAttribute("spawn"..wing,"color","#303030")
        end
        UI.setAttribute("spawn"..wing,"textColor","white")
    end
end
function onEndEdit_spawnWingOverride(player, value, _)
    --printToAll("onEndEdit_spawnWingOverride: "..value)
    spawnUIWingNameOverride = value
end
function onClick_spawn(player, _, _)
    if mission_ps==nil then
        local ps = CalculatePlayerSkill()
        printToAll("Calculated player PS: "..tostring(ps))
    end
    local elite = ""
    --printToAll("spawnElite: "..tostring(UI.getAttribute("spawnElite","isOn")))
    if spawnUIElite then
        elite = "[ELITE] "
    end
    local wingName = spawnUIWingName
    if spawnUIWingNameOverride~=nil and spawnUIWingNameOverride~="" then
        wingName = spawnUIWingNameOverride
    end
    local card = math.random(pilot_card_num[campaign][spawnUIShipSubType])
    local next = false
    for i,wing in ipairs(WINGS) do
        if next then
            onClick_spawnSetWing(nil, wing, nil)
            break
        end
        if wing==wingName then
            next=true
        end
    end
    for i,off in ipairs(squad_offsets) do
        if 5-i<=spawnUICount then
            Spawn_Ship(true, spawnUIShipSubType, wingName, spawnUIElite, "attack", card, vector.add(off, {25,1.5,0}), 180, vector.add(off, {25,1.5,0}),spawnUIStartNum)
            spawnUIStartNum = spawnUIStartNum+1
        end
    end
    --spawnUIStartNum = spawnUIStartNum+spawnUICount
    UI.setAttribute("spawnStartNum","text",tostring(spawnUIStartNum))
    --printToAll("Spawn "..tostring(spawnUICount).." "..elite..wingName.." ["..spawnUIShipSubType.."] "..spawnUIShipType)
end
function onValueChanged_spawnElite(player, value, _)
    spawnUIElite = value=="True"
end
function onEndEdit_spawnStartNum(player, value, id)
    spawnUIStartNum = tonumber(value)
    --spawnUIStartNum = tonumber(value)
end
function xwing_ai_ui_onload()
#include xwing_ai_ui_images
    Wait.time(function()
        ClearTimer()
        updateStatusUI()
    end, 1, 1)
end
