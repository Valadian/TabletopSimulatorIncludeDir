statNames = {Focus = 0, Evade = 0, Stress = 0, Ion = 0, Weapon_Disabled = 0, Critical_Hit = 0, Reinforce = 0, Tractor_Beam = 0}
statMaxes = {Focus = nil, Evade = nil, Stress = nil, Ion = nil, Weapon_Disabled=1, Critical_Hit = 1, Reinforce = 1, Tractor_Beam = 1}

health = {
  value = 10,
  max = 10
}
shield = {
    value = 3,
    max = 3
}

statsObj = "6c1b20"

function onLoad(save_state)
  if save_state ~= "" and self.getDescription() ~= "" then
    saved_data = JSON.decode(save_state)
    if saved_data.statNames then statNames = saved_data.statNames end
    if saved_data.health then
      health = saved_data.health
      Wait.condition(setHealth, checkLoaded)
    end
    if saved_data.shield then
      shield = saved_data.shield
      Wait.condition(setShield, checkLoaded)
    end
  end
  Wait.condition(checkStats, checkLoaded)
  createBtns()
end

function checkLoaded()
  if not self.loading_custom and not self.spawning then
    return true
  end
  return false
end

function checkStats()
  for i,j in pairs(statNames) do
    if j == true then
      self.UI.setAttribute(i, "active", true)
    end
  end
  Wait.frames(function() self.UI.setAttribute("statePanel", "width", 300*2 + (getStatsCount()-1)*350*2) end, 1)
  local num = self.getName():match("%d+")
  if num ~= nil then
    self.UI.setAttribute("number", "image", num)
  end
end

function onSave()
  local save_state = JSON.encode({health = health, shield = shield, statNames = statNames})
  -- local save_state = ""
  self.script_state = save_state
end

function createBtns()
    self.clearButtons()
    if self.UI.getAttribute("editPanel", "active") == "True" then
        local buttonParameter = {click_function = "add", function_owner = self, font_color={241/255, 236/255, 53/255, 100}, position = {0.2, 0.15, 0.55}, label = "▲", width = 250, height = 250, font_size = 200, color = {0,0,0,0}}
        self.createButton(buttonParameter)
        buttonParameter.position = {0.2, 0.15, 1.15}
        buttonParameter.click_function = "sub"
        buttonParameter.label = "▼"
        self.createButton(buttonParameter)
    end
    if self.UI.getAttribute("editShieldPanel", "active") == "True" then
        local buttonParameter = {click_function = "addShield", function_owner = self, font_color={128/255, 207/255, 225/255,100}, position = {0.6, 0.15, 0.55}, label = "▲", width = 250, height = 250, font_size = 200, color = {0,0,0,0}}
        self.createButton(buttonParameter)
        buttonParameter.position = {0.6, 0.15, 1.15}
        buttonParameter.click_function = "subShield"
        buttonParameter.label = "▼"
        self.createButton(buttonParameter)
    end
end

function add() onClick(-1, - 1, "add") end
function sub() onClick(-1, - 1, "sub") end
function addShield() onClick(-1, - 1, "addShield") end
function subShield() onClick(-1, - 1, "subShield") end
function API_onClick(id)
    local has_id = statNames[id]>0
    if has_id then
        onClick(-1, -1, id)
    end
    return has_id
end
function onClick(player, value, id)
  if id == "editButton" then
    if self.UI.getAttribute("editPanel", "active") == "False" or self.UI.getAttribute("editPanel", "active") == nil then
      self.UI.setAttribute("editPanel", "active", true)
    else
      self.UI.setAttribute("editPanel", "active", false)
    end
    Wait.frames(|| createBtns(), 1)
  elseif id == "shieldEditButton" then
    if self.UI.getAttribute("editShieldPanel", "active") == "False" or self.UI.getAttribute("editShieldPanel", "active") == nil then
      self.UI.setAttribute("editShieldPanel", "active", true)
    else
      self.UI.setAttribute("editShieldPanel", "active", false)
    end
    Wait.frames(|| createBtns(), 1)
  elseif statNames[id] ~= nil then
    local oldValue = statNames[id]
    local newValue =statNames[id] - 1
    printToAll(self.getName().." sheds a "..id.." token",{0,1,0})
    statNames[id] = newValue
    if statNames[id]==0 then
        self.UI.setAttribute(id, "active", false)
        self.UI.setAttribute("statePanel", "width", 260*2 + (getStatsCount()-1)*280*2)
    end
    if statNames[id]<2 then
        self.UI.setAttribute(id.."_2", "active", false)
    end
    if statNames[id]>3 then
        self.UI.setAttribute(id.."_num","text",statNames[id])
    else
        self.UI.setAttribute(id.."_num","text","")
    end
    if statNames[id]<3 then
        self.UI.setAttribute(id.."_3", "active", false)
    end
  elseif id == "addNumber" or id == "subNumber" then
    local temp = -1
    if id == "addNumber" then temp = 1 end
    local number = tonumber(self.UI.getAttribute("number", "image")) + temp
    if number > 10 then number = 10 end
    if number < 1 then number = 1 end
    self.UI.setAttribute("number", "image", number)
  else
    if id == "add" then health.value = health.value + 1
    elseif id == "sub" then health.value = health.value - 1
    elseif id == "addShield" then shield.value = shield.value + 1
    elseif id == "subShield" then shield.value = shield.value - 1
    elseif id == "addMax" then health.value = health.value + 1
      health.max = health.max + 1
    elseif id == "subMax" then health.value = health.value - 1
      health.max = health.max - 1
    elseif id == "addShieldMax" then shield.value = shield.value + 1
      shield.max = shield.max + 1
    elseif id == "subShieldMax" then shield.value = shield.value - 1
      shield.max = shield.max - 1
    end
    if health.value > health.max then health.value = health.max end
    if health.value < 0 then health.value = 0 end
    --getObjectFromGUID("75ab50").call("changeHP", {self.getName(), health.value})
    setHealth()
    setShield()
  end
  self.UI.setAttribute("editButton", "textColor", "#000000")
end
#include ../../util/string
-- function onDrop(color)
--     self.UI.setAttribute("panel","rotation","0 0 "..tostring(self.getRotation()[2]))
-- end
function RemoveHealth(hp)
    printToAll(self.getName().." takes "..hp.." damage",{0,1,0})
    local remainder = shield.value - hp
    shield.value = math.max(remainder, 0)
    setShield()
    if remainder<0 then
        health.value = math.max(health.value+remainder, 0)
        setHealth()
    end
end
function AddShield(repair)
    shield.value = math.min(shield.value+repair, shield.max)
    setShield()
end
function onCollisionEnter(a)
  local id = a.collision_object.getName()
  if id=="Critical Hit" then
      printToAll("Processing random critical effect",{0,1,1})
      a.collision_object.destruct()
      local i_roll = math.random(6)
      --printToAll("Rolling: "..i_roll)
      if i_roll==1 or i_roll==2 then
          RemoveHealth(1)
      end
      if i_roll==3 or i_roll==4 then
          incrementStat("Stress")
      end
      if i_roll==5 then
          incrementStat("Ion")
      end
      if i_roll==6 then
          incrementStat("Weapon_Disabled")
      end
      return
  end
  if id=="Hit" then
      RemoveHealth(1)
      a.collision_object.destruct()
      return
  end
  if id=="2 Hits" then
      RemoveHealth(2)
      a.collision_object.destruct()
      return
  end
  if id=="Shield" then
      AddShield(1)
      a.collision_object.destruct()
      return
  end
  id = id:gsub("%s","_")
  if string.starts(id,"Reinforce") then
      id="Reinforce"
  end
  if statNames[id] ~= nil then
    a.collision_object.destruct()
    incrementStat(id)
  end
end
function incrementStat(id)
  local oldValue = statNames[id]
  local newValue = statNames[id]+1
  if statMaxes[id] then
      newValue = math.min(newValue, statMaxes[id])
  end
  if oldValue!=newValue then
      printToAll(self.getName().." adds a "..id.." token",{0,1,0})
      --printToAll("Increase "..id.." from "..oldValue.." to "..newValue,{0,1,0})
      statNames[id]=newValue
      self.UI.setAttribute(id, "active", true)

      if statNames[id]>1 then
          self.UI.setAttribute(id.."_2", "active", true)
      end
      if statNames[id]>2 then
          self.UI.setAttribute(id.."_3", "active", true)
      end
      if statNames[id]>3 then
          self.UI.setAttribute(id.."_num","text",statNames[id])
      else
          self.UI.setAttribute(id.."_num","text","")
      end
      Wait.frames(function() self.UI.setAttribute("statePanel", "width", 260*2 + (getStatsCount()-1)*265*2) end, 1)
  end
end

function getStatsCount()
  local count = 0
  for i,j in pairs(statNames) do
    if self.UI.getAttribute(i, "active") == "True" then
      count = count + 1
    end
  end
  return count
end

function setHealth()
  self.UI.setAttribute("progressBar", "percentage", health.value / health.max * 100)
  self.UI.setAttribute("editButton", "text", health.value .. "/" .. health.max)
  self.setDescription(health.value .. "/" .. health.max)
  self.UI.setAttribute("editButton", "textColor", "#000000")
end

function setShield()
  self.UI.setAttribute("shieldProgressBar", "percentage", shield.value / shield.max * 100)
  self.UI.setAttribute("shieldEditButton", "text", shield.value .. "/" .. shield.max)
  self.setDescription(shield.value .. "/" .. shield.max)
  self.UI.setAttribute("shieldEditButton", "textColor", "#000000")
end
