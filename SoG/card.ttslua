function Card.onObjectDrop(dropped_object)
    Card.drawReturnButton(dropped_object)
end
function Card.onSave(item)
    local data = {}
    data["type"] = 'card'
    data["shiplog"] = Card.GetLog(item) and Card.GetLog(item).getGUID() or nil
    data["orig_pos"] = Card.GetOriginalPos(item)
    data["orig_rot"] = Card.GetOriginalRot(item)
    return data
end
function Card.onLoad(item, data)
    --printToAll("Loading card: "..guid,{1,1,1})
    if data["shiplog"] then
        Card.SetLog(item,getObjectFromGUID(data["shiplog"]))
    end
    Card.SetOriginalPos(item,data["orig_pos"])
    Card.SetOriginalRot(item,data["orig_rot"])
    Card.drawButtons(item)
end
function isCard(card)
    return CARDS[card.getDescription()]~=nil and card.tag=='Card'
end

function Card.SetLog(card, log) card.setVar('shiplog',log) end
function Card.GetLog(card) return card.getVar('shiplog') end
function Card.SetOriginalPos(card, pos) card.setTable('orig_pos',pos) end
function Card.GetOriginalPos(card) return card.getTable('orig_pos') end
function Card.SetOriginalRot(card, rot) card.setVar('orig_rot',rot) end
function Card.GetOriginalRot(card) return card.getVar('orig_rot') end

function Card.SwapAback(card)
    local log = Card.GetLog(card)
    local aback_card = nil
    local desc = card.getDescription()
    if desc:match '.(BM.*)' then
        local rand = math.random(3)
        -- printToAll("Rand: "..tostring(rand),{1,1,1})
        if rand==1 then
            aback_card = Log.GetAbackLeft(log)
        elseif rand==2 then
            aback_card = Log.GetAbackStraight(log)
        elseif rand==3 then
            aback_card = Log.GetAbackRight(log)
        end
    else
        local veer_num = tonumber(desc:match '%B?M?A?b?a?c?k?(%d+)%u?2?')
        if veer_num<5 then
            aback_card = Log.GetAbackLeft(log)
        elseif veer_num>5 then
            aback_card = Log.GetAbackRight(log)
        else
            aback_card = Log.GetAbackStraight(log)
        end
    end
    if aback_card~=nil then
        Card_Action_Reset(card)
        Log.PlayToShip(log, aback_card)
    end
end
function Card.drawButtons(card, reset)
    card.clearButtons()
    local desc = card.getDescription()
    if not desc:match '.Aback.' then
        card.createButton({['click_function'] = 'Card_Action_Plan', ['label'] = 'Plan', ['scale'] = {0.6,0.6,0.6}, ['position'] = {0, 0.3, -1.4}, ['width'] = 800, ['height'] = 300, ['font_size'] = 250})
    end
end
function Card.drawReturnButton(card)
    card.clearButtons()
    card.createButton({['click_function'] = 'Card_Action_Reset', ['label'] = 'Reset', ['scale'] = {0.6,0.6,0.6}, ['position'] = {0, 0.3, 1.4}, ['width'] = 800, ['height'] = 300, ['font_size'] = 250})
end
function Card.isBrokenMastCard(card)
    local desc = card.getDescription()
    return (desc:match '.BM.*')~=nil
end
function Card.reset(card)
    local orig_pos = Card.GetOriginalPos(card)
    local orig_rot = Card.GetOriginalRot(card) or 180
    card.lock()
    card.setScale({0.896,1,0.896*7.5/7},false,false) --1.12
    card.setPositionSmooth(orig_pos, false, false)
    card.setRotationSmooth({0,orig_rot,0},false,false)
    --card.unlock()
    Card.drawButtons(card,true)
end

function Card_Action_Plan(card)
    local log = Card.GetLog(card)
    local ship = Log.GetShip(log)
    -- printToAll('Card.isBrokenMastCard: '..tostring(Card.isBrokenMastCard(card)),{1,1,1})
    -- printToAll('Ship.GetBrokeMast(ship): '..tostring(Ship.GetBrokeMast(ship)),{1,1,1})
    if Card.isBrokenMastCard(card)==Ship.GetBrokeMast(ship) then
        Log.SetNextCard(log,card)
        Log.drawButtons(log)
    else
        if Ship.GetBrokeMast(ship) then
            printToAll("Your mast is broken, you must plan a broken mast card",{1,0,0})
        else
            printToAll("You mast is not broken, plan a regular numbered card",{1,0,0})
        end
    end
end
function Card_Action_Reset(card)
    local log = Card.GetLog(card)
    local ship = Log.GetShip(log)
    Card.reset(card)
    if ship~=nil then
        Ship.SetCard(ship, nil)
        Ship.drawButtons(ship)
    end
end
