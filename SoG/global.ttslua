--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]

Log = {}
Deck = {}
Card = {}
Ship = {}
CARDS = {}
wind_dir_guid = '9c666a'
wind_speed_guid = '9b304d'
wind_dir = nil
current_phase = "planning"

ARCS = {}
ARCS['DEF'] = 'https://paste.ee/p/GrUc9'
ARCS['COU'] = 'https://paste.ee/p/L6pmN'
ARCS['TER'] = 'https://paste.ee/p/PMxwq'
ARCS['GEN'] = 'https://paste.ee/p/r6YkZ'
ARC_COLLIDER = 'https://paste.ee/p/7n7Kt'

local world_wind = "Mid"
local GREEN ={r=0, g=1, b=0}
local ORANGE ={r=1, g=0.5, b=0}
local RED ={r=1, g=0, b=0}
local WHITE ={r=1, g=1, b=1}
local BLACK ={r=0, g=0, b=0}
--[[ The onLoad event is called after the game save finishes loading. --]]
function onload(saveData)
    wind_dir = getObjectFromGUID(wind_dir_guid)
    wind_speed = getObjectFromGUID(wind_speed_guid)
    if saveData~="" then
        local save = JSON.decode(saveData)
        for guid, data in pairs(save) do
            local item = getObjectFromGUID(guid)
            local type = data["type"]
            if type=='ship' then
                Ship.onLoad(item, data)
            elseif type=='log' then
                Log.onLoad(item, data)
            elseif type=='card' then
                Card.onLoad(item, data)
            end
        end
        for i, item in ipairs(getAllObjects()) do
            if isLog(item) then
                Log.drawButtons(item)
            end
        end
        world_wind = save['wind'] or "Mid"
    end
    drawWindButtons(wind_speed)
    -- local desc = "CBM4R"
    -- printToAll("match: "..(desc:match '%u(B?M?%d*%u2?)'),{1,1,1})
end
function onSave()
    local save = {}
    for i, item in ipairs(getAllObjects()) do
        if isShip(item) then
            save[item.getGUID()] = Ship.onSave(item)
        elseif isLog(item) then
            save[item.getGUID()] = Log.onSave(item)
        elseif isCard(item) then
            save[item.getGUID()] = Card.onSave(item)
        end
    end
    save['wind']=world_wind
    save_string = JSON.encode(save)
    return save_string
end
#include wind
--function onUpdate()
--end
function onObjectDrop(player_color, dropped_object)
    if isCard(dropped_object) then
        Card.onObjectDrop(dropped_object)
    end
    if isShip(dropped_object) then
        Ship.onObjectDrop(dropped_object)
    end
    if isDeck(dropped_object) then
        Deck.onObjectDrop(dropped_object)
    end
end

#include deck
#include card
#include log
#include note
#include ship

function findNearestShip(pos)
    local nearest
    local minDist = 999999
    for i,ship in ipairs(getAllObjects()) do
        if isShip(ship) then
            local distance = vector.distance(pos, ship.getPosition())
            if distance<minDist then
                minDist = distance
                nearest = ship
            end
        end
    end
    return nearest
end
function findNearestLog(pos)
    local nearest
    local minDist = 999999
    for i,ship in ipairs(getAllObjects()) do
        if isLog(ship) then
            local distance = vector.distance(pos, ship.getPosition())
            if distance<minDist then
                minDist = distance
                nearest = ship
            end
        end
    end
    return nearest
end
function getWind(ship)
    return ship.getVar('wind')
end
-- Card = {
--     Aback=nil,
--     AbackTwice=nil,
--     Backing = nil,
--     Battle = nil,
--     Full = nil
-- }
-- Move = {
--     Start=nil,
--     Beating = nil,
--     Reaching = nil,
--     TakenAback=nil
-- }
#include card_db
#include ../util/vector
