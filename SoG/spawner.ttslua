LOG_HEIGHT_Y = 2.73
BUTTON_ROW_Z = {57,-57}
LOG_ROW_Z = {43.7,-43.7}
LOG_COLS_X = {146.7, 119.26,  91.82, 54.88, 27.44, 0}
LOG_ROT = {0,180}
spawner_guid = 'ac3fe2'
spawner = nil
DECK_SOURCES = {['A'] = '5b2acc',
                ['B'] = '880d60',
                ['C'] = '9f3bbd',
                ['D'] = '1ba27a',
                ['E'] = 'e90c19',
                ['F'] = '6b4369',
                ['G'] = '2246a2',
                ['H'] = '46b6d4',
                ['I'] = '21773d',
                ['K'] = '71eda4',
                ['N'] = 'a694f7',
                ['O'] = 'e6c066'}
ACTION_SOURCE_GUID = '009a16'
AMMO_SOURCE_GUID = 'ba173b'
currently_spawning = true

RULES = {
    ['Let the Men Drink!'] =       {['basic'] = "Once per game, if no ship within half ruler, during plan phase, remove 1 crew damage.",
                                    ['advanced'] = "Once per game, if no ship within half ruler, during plan phase can plan action, remove 1 crew damage on reveal."},
    ['Gunners Lacking Training'] = {['basic'] = "Ammo is placed faceup, in ammo box. Next turn, cannot reload ammo, instead Ammo box is flipped face down.",
                                    ['advanced'] = "Reload Broadside Actions are delayed actions"},

}

single_map = "http://cloud-3.steamusercontent.com/ugc/931562390049734792/3C16C4AD8E6A96C00F69201FB108203C706A60D1/"
single_map_pos = {20.20,0.32, -10.97}

double_map = "https://i.imgur.com/sKG1D95.jpg"
double_map_pos = {-30.21,0.32, -10.97}

map_guid = '15f138'
double_map_guid = 'd2450e'
#include ship_db
function Spawner.onload(saveData)
    local save = JSON.decode(saveData)
    -- for faction,ships in pairs(SHIPS) do
    --     for _,ship in pairs(ships) do
    --         Global['Action_Log_Spawn_'..faction.."_"..ship]
    --     end
    -- end
    spawner = getObjectFromGUID(spawner_guid)
    -- for i=1,12 do
    --     _G['ActionSpawn_'..i] = function() Action_Spawn(i) end
    -- end
    if save['currently_spawning']~=nil then
        currently_spawning = save['currently_spawning']
    end
    if save['current_difficulty']~=nil then
        current_difficulty = save['current_difficulty']
    end
    if save['spawner_log_guids']~=nil then
        for i, log_guid in pairs(save['spawner_log_guids']) do
            logs[i] = getObjectFromGUID(log_guid)
        end
    end
    Spawner.drawButtons()
end
function Spawner.onSave(save)
    save['currently_spawning'] = currently_spawning
    save['current_difficulty'] = current_difficulty
    save['spawner_log_guids'] = {}
    for i, log in pairs(logs) do
        if log~=nil then
            save['spawner_log_guids'][i] = log.getGUID()
        end
    end
end
function Spawner.drawButtons()
    spawner.clearButtons()
    spawner.createButton({
        ['click_function'] = 'Action_ToggleSpawning',
        ['label'] = "Toggle Spawning",
        ['position'] = {-7,0,0},
        ['width'] = 4000,
        ['height'] = 1200,
        ['font_size'] = 500
        })
    local color = {1,1,1}
    local font_color = {0,0,0}
    if current_difficulty=="Basic" then color = {0,1,0}; font_color={1,1,1} else color = {1,1,1}; font_color = {0,0,0} end
    spawner.createButton({
        ['click_function'] = 'Action_SetBasic',
        ['label'] = "Basic",
        ['position'] = {7,0,-3},
        ['width'] = 3000,
        ['height'] = 1200,
        ['font_size'] = 500,
        ['color'] = color,
        ['font_color'] = font_color
        })
    if current_difficulty=="Standard" then color = {1,0.5,0}; font_color={1,1,1} else color = {1,1,1}; font_color = {0,0,0} end
    spawner.createButton({
        ['click_function'] = 'Action_SetStandard',
        ['label'] = "Standard",
        ['position'] = {7,0,0},
        ['width'] = 3000,
        ['height'] = 1200,
        ['font_size'] = 500,
        ['color'] = color,
        ['font_color'] = font_color
        })
    if current_difficulty=="Advanced" then color = {1,0,0}; font_color={1,1,1} else color = {1,1,1}; font_color = {0,0,0} end
    spawner.createButton({
        ['click_function'] = 'Action_SetAdvanced',
        ['label'] = "Advanced",
        ['position'] = {7,0,3},
        ['width'] = 3000,
        ['height'] = 1200,
        ['font_size'] = 500,
        ['color'] = color,
        ['font_color'] = font_color
        })
    if currently_spawning then
        spawner.createButton({
            ['click_function'] = 'Action_LargeMap',
            ['label'] = "Large Map",
            ['position'] = {-7,0,-3},
            ['width'] = 4000,
            ['height'] = 1200,
            ['font_size'] = 500
            })
        spawner.createButton({
            ['click_function'] = 'Action_NormalMap',
            ['label'] = "Normal Map",
            ['position'] = {-7,0,3},
            ['width'] = 4000,
            ['height'] = 1200,
            ['font_size'] = 500
            })
        for i=1,12 do
            spawner.createButton({
                ['click_function'] = 'Action_Spawn_'..i,--|obj| Action_Spawn(i),
                --['function_owner'] = spawner,
                ['label'] = "Spawn",
                ['position'] = CalculateButtonOffset(i),
                ['rotation'] =  CalculateButtonRotation(i),
                ['width'] = 2200,
                ['height'] = 1200,
                ['font_size'] = 500
                })
        end
    end
end
function Action_LargeMap()
    map = getObjectFromGUID(map_guid)
    Hide(map)
    double_map = getObjectFromGUID(double_map_guid)
    Show(double_map)
end
function Action_NormalMap()
    map = getObjectFromGUID(map_guid)
    Show(map)
    double_map = getObjectFromGUID(double_map_guid)
    Hide(double_map)
end
function Hide(map)
    map.setScale({0.1,0.1,0.1})
    local pos = map.getPosition()
    map.setPosition({pos[1],-1,pos[3]})
end
function Show(map)
    map.setScale({2.53,2.53,2.53})
    local pos = map.getPosition()
    map.setPosition({pos[1],0.32,pos[3]})
end
function Action_SetBasic() current_difficulty="Basic"; Spawner.drawButtons() end
function Action_SetStandard() current_difficulty="Standard"; Spawner.drawButtons() end
function Action_SetAdvanced() current_difficulty="Advanced"; Spawner.drawButtons() end
function Action_Log_Spawn_HMS_Hibernia(log) SpawnShip(log, "British", "HMS Hibernia") end
function Action_Log_Spawn_HMS_Royal_George(log) SpawnShip(log, "British", "HMS Royal George") end
function Action_Log_Spawn_HMS_Victory_1783(log) SpawnShip(log, "British", "HMS Victory 1783") end
function Action_Log_Spawn_HMS_Victory_1805(log) SpawnShip(log, "British", "HMS Victory 1805") end
function Action_Log_Spawn_HMS_Vanguard(log) SpawnShip(log, "British", "HMS Vanguard") end
function Action_Log_Spawn_HMS_Defence(log) SpawnShip(log, "British", "HMS Defence") end
--function Action_Log_Spawn_HMS_Adamant(log) SpawnShip(log, "British", "HMS Adamant") end
function Action_Log_Spawn_HMS_Isis(log) SpawnShip(log, "British", "HMS Isis") end
function Action_Log_Spawn_HMS_Leopard(log) SpawnShip(log, "British", "HMS Leopard") end
function Action_Log_Spawn_HMS_Amelia(log) SpawnShip(log, "British", "HMS Amelia") end
function Action_Log_Spawn_HMS_Sybille(log) SpawnShip(log, "British", "HMS Sybille") end
--function Action_Log_Spawn_HMS_Unite(log) SpawnShip(log, "British", "HMS Unite") end
--function Action_Log_Spawn_HMS_Orpheus(log) SpawnShip(log, "British", "HMS Orpheus") end
--function Action_Log_Spawn_HMS_Cleopatra(log) SpawnShip(log, "British", "HMS Cleopatra") end
--function Action_Log_Spawn_HMS_Iphigenia(log) SpawnShip(log, "British", "HMS Iphigenia") end
function Action_Log_Spawn_HMS_Meleager(log) SpawnShip(log, "British", "HMS Meleager") end
function Action_Log_Spawn_HMS_Terpsichore(log) SpawnShip(log, "British", "HMS Terpsichore") end
function Action_Log_Spawn_HMS_Fairy(log) SpawnShip(log, "British", "HMS Fairy") end
function Action_Log_Spawn_HMS_Swan(log) SpawnShip(log, "British", "HMS Swan") end


function Action_Log_Spawn_Imperial(log) SpawnShip(log, "French", "Imperial") end
function Action_Log_Spawn_Republique_Francais(log) SpawnShip(log, "French", "Republique Francais") end
function Action_Log_Spawn_Aquilon(log) SpawnShip(log, "French", "Aquilon") end
function Action_Log_Spawn_Genereux(log) SpawnShip(log, "French", "Genereux") end
function Action_Log_Spawn_Eveille(log) SpawnShip(log, "French", "Eveille") end
function Action_Log_Spawn_Protee(log) SpawnShip(log, "French", "Protee") end
function Action_Log_Spawn_Courageuse(log) SpawnShip(log, "French", "Courageuse") end
function Action_Log_Spawn_Unite(log) SpawnShip(log, "French", "Unite") end
--function Action_Log_Spawn_Hermione(log) SpawnShip(log, "French", "Hermione") end
--function Action_Log_Spawn_Concorde(log) SpawnShip(log, "French", "Concorde") end
function Action_Log_Spawn_Alligator(log) SpawnShip(log, "French", "Alligator") end
function Action_Log_Spawn_Le_Fortune(log) SpawnShip(log, "French", "Le Fortune") end
function Action_Log_Spawn_Mahonesa(log) SpawnShip(log, "Spanish", "Mahonesa") end
function Action_Log_Spawn_Ninfa(log) SpawnShip(log, "Spanish", "Ninfa") end
function SpawnShip(log, faction, shipname)
    log.clearButtons()
    shipdef = SHIPS[faction][shipname]
    if shipdef.Log!=nil then
        pos = vector.add(log.getPosition(),vector.rotate({0,0,-3.5},log.getRotation()[2]))
        customlog = SpawnCustomObject(shipdef.Log, pos, log.getRotation()[2], 3.4)
        customlog.setName(shipdef.Name)
        customlog.setSnapPoints({
            {position = {-3.27,0,-0.27}},
            {position = {-2.77,0,-0.27}},
            {position = {-2.27,0,-0.27}},
            {position = {-1.77,0,-0.27}},
            {position = {-1.27,0,-0.27}},
            {position = {-0.77,0,-0.27}},
            {position = {-0.27,0,-0.27}},
            {position = {0.23,0,-0.27}},
            {position = {0.73,0,-0.27}},
            {position = {1.23,0,-0.27}},
            {position = {1.73,0,-0.27}},
            {position = {2.23,0,-0.27}},
            {position = {-3.27,0,0.27}},
            {position = {-2.77,0,0.27}},
            {position = {-2.27,0,0.27}},
            {position = {-1.77,0,0.27}},
            {position = {-1.27,0,0.27}},
            {position = {-0.77,0,0.27}},
            {position = {-0.27,0,0.27}},
            {position = {0.23,0,0.27}},
            {position = {0.73,0,0.27}},
            {position = {1.23,0,0.27}},
            {position = {1.73,0,0.27}},
            {position = {2.23,0,0.27}}
        })
        Log.SetShipStatSheet(log,customlog)
    end
    if shipdef.Card!=nil then
        pos = vector.add(log.getPosition(),vector.rotate({8.7,0,9.3},log.getRotation()[2]))
        customcard = SpawnCustomObject(shipdef.Card, pos, log.getRotation()[2], 1.7)
        customcard.setName(shipdef.Name)
        Log.SetShipCard(log,customcard)
    end
    pos = vector.add(log.getPosition(),vector.rotate({8.7,1,9.3},log.getRotation()[2]))
    ship = SpawnCustomAssetBundle(shipdef.Model, pos, log.getRotation()[2], 1)
    ship.unlock()
    --ship.setDescription(shipdef.Arc..":ship")
    ship.setDescription("ship")
    ship.setName(shipdef.Name)
    --printToAll("shipdef.center_arc==nil: "..tostring(shipdef.center_arc==nil))
    --printToAll("shipdef.Rate: "..tostring(shipdef.Rate))
    Ship.SetShipDefinition(ship,shipdef)
    --Wait.frames(function() Ship.SetShipDefinition(ship,shipdef) end,10)
    --printToAll("shipdef.center_arc==nil: "..tostring(Ship.GetShipDefinition(ship).center_arc==nil))
    --printToAll("shipdef.Rate: "..tostring(Ship.GetShipDefinition(ship).Rate))
    log.setVar('initial_load',true)
    Log.drawButtons(log)
    Ship.onObjectDrop(ship)
    deck_source = getObjectFromGUID(DECK_SOURCES[shipdef.Deck])
    deck_source.takeObject({
        position = vector.add(log.getPosition(),{0,0,0}),
        rotation = log.getRotation(),
        callback_function = |obj| layout_deck(obj, log)
    })

    action_source = getObjectFromGUID(ACTION_SOURCE_GUID)
    action_source.takeObject({
        position = vector.add(log.getPosition(),vector.rotate({-11,1,2},log.getRotation()[2])),
        rotation = vector.add(log.getRotation(),{0,0,180}),
        callback_function = |obj| Log.positionActions(obj, log)
    })

    ammo_source = getObjectFromGUID(AMMO_SOURCE_GUID)
    ammo_source.takeObject({
        position = vector.add(log.getPosition(),vector.rotate({2.1,1,4.5},log.getRotation()[2])),
        rotation = vector.add(log.getRotation(),{0,0,180}),
        callback_function = |obj| Log.positionAmmo(obj, log, STBD_DIR)
    })
    ammo_source.takeObject({
        position = vector.add(log.getPosition(),vector.rotate({4.5,1,4.5},log.getRotation()[2])),
        rotation = vector.add(log.getRotation(),{0,0,180}),
        callback_function = |obj| Log.positionAmmo(obj, log, PORT_DIR)
    })

    log.setSnapPoints({
        {position = {0.37,0,0.33}},
        {position = {0.79,0,0.33}},
        {position = {0.37,0,0.82}},
        {position = {0.79,0,0.82}},

        {position = {-0.15,0,0.9}},
        {position = {-0.57,0,0.9}},
        {position = {-0.99,0,0.9}},
        {position = {-1.42,0,0.9}}
    })
    Wait.time(||Log.drawButtons(log),3,1)
end
function layout_deck(deck,log)
    Log.SetDeckName(log, deck.getName())
    Action_SetLog_Full(log)
    Deck.SetLog(deck, log)
    deck.setPosition(vector.add(deck.getPosition(),vector.rotate({0,0,35},deck.getRotation()[2])))
    Action_Layout(deck)
end
function Action_ToggleSpawning()
    currently_spawning = not currently_spawning
    Spawner.drawButtons()
end
function CalculateButtonOffset(i)
    return {LOG_COLS_X[math.imod(i,6)], 0, BUTTON_ROW_Z[math.floor((i-1)/6)+1]}
end
function CalculateButtonRotation(i)
    return {0,LOG_ROT[math.floor((i-1)/6+1)],0}
end
#include ../util/button
#include ../util/table
rate = {"st", "nd", "rd", "th", "th"}
logs = {}
function Action_Spawn(i)
    if logs[i]==nil then
        logs[i] = Spawn_Log(i)
        ShowFactionSelection(log)
        --ShowShipSelection(logs[i], "British")
    else
        local log = logs[i]
        local ship = Log.GetShip(log)
        local shipCard = Log.GetShipCard(log)
        local shipStatSheet = Log.GetShipStatSheet(log)
        for i,item in ipairs(getAllObjects()) do
            if isCard(item) and Card.GetLog(item)==log then
                destroyObject(item)
            end
        end
        if ship~=nil then
            destroyObject(ship)
        end
        if shipCard~=nil then
            destroyObject(shipCard)
        end
        if shipStatSheet~=nil then
            destroyObject(shipStatSheet)
        end
        destroyObject(logs[i])
        logs[i]=nil
    end
end
function ShowFactionSelection(log)
    factions = {}
    for k,v in pairs(SHIPS) do
        table.insert(factions, k)
    end
    btns = T(factions):Select(function(faction)
        return {
            ['click_function'] = 'Action_Log_Faction_'..faction,
            ['label'] = faction,
            ['width'] = 5000,
            ['height'] = 1200,
            ['font_size'] = 500
        }
    end)
    Button.LayoutGrid(btns, log,{0,1,-1}, 0, 0.18, 1, {11, 0, 2.5})
end
function Action_Log_Faction_British(log)
    log.clearButtons()
    ShowShipSelection(log, "British")
end
function Action_Log_Faction_French(log)
    log.clearButtons()
    ShowShipSelection(log, "French")
end
function Action_Log_Faction_Spanish(log)
    log.clearButtons()
    ShowShipSelection(log, "Spanish")
end
function ShowShipSelection(log, faction)

    min_PV = 68
    max_PV = 144
    pastel = 0.5 --0 to 1
    -- spawnbutton = CalculateButtonOffset(i)
    -- yrotation = CalculateButtonRotation(i)
    -- topleftpos = vector.add(spawnbutton,vector.rotate({-6,0,-15},yrotation[2]))
    btns = T(SHIPS[faction]):OrderByDesc(function(def) return def.PV end):Select(function(shipdef)
        -- printToAll("shipdef.Name: "..tostring(shipdef.Name))
        -- printToAll("shipdef.PV: "..tostring(shipdef.PV))
        -- printToAll("shipdef.Rate: "..tostring(shipdef.Rate))
        -- printToAll("shipdef.Burden: "..tostring(shipdef.Burden))
        -- printToAll("shipdef.Deck: "..tostring(shipdef.Deck))
        -- printToAll("shipdef.Veer: "..tostring(shipdef.Veer))
        return {
            ['click_function'] = 'Action_Log_Spawn_'..(shipdef.Name:gsub(" ","_")),
            ['label'] = shipdef.Name.." ("..shipdef.PV..")",
            ['tooltip'] = (shipdef.Rate==0 and "Sloop" or shipdef.Rate..rate[shipdef.Rate].." Rate").."\n"..
                          shipdef.Burden.." Burden\n"..
                          shipdef.Deck.." Maneuver Deck\n"..
                          shipdef.Veer.." Veer",
            ['color'] = {r=(shipdef.PV-min_PV)/(max_PV-min_PV)*(1-pastel)+pastel, g=pastel, b = 1-(shipdef.PV-min_PV)/(max_PV-min_PV)*(1-pastel)},
            ['width'] = 6000,
            ['height'] = 1200,
            ['font_size'] = 500
            }
    end)
    Button.LayoutGrid(btns, log, {-1.2,1,-1}, 0, 0.18, 2, {13, 0,2.5})
end
function Spawn_Log(i)
    offset = CalculateButtonOffset(i)
    y_rotation = CalculateButtonRotation(i)[2]
    btn_loc = vector.add(spawner.getPosition(),vector.scale(offset,{-1,1,1}))
    log_loc = vector.add(btn_loc, vector.rotate({0,0,-13.36},y_rotation))
    log = SpawnCustomObject(LOG_BORDER, log_loc, y_rotation, 5.52)
    log.setDescription("Ship Log")
    --Log.drawButtons(log)
    return log
end
function SpawnCustomObject(url, pos, y_rotation, scale)
    local obj_parameters = {}
    obj_parameters.type = 'Custom_Token'
    obj_parameters.position = pos
    obj_parameters.rotation = {0,y_rotation,0}
    obj_parameters.scale = {scale,1,scale}
    local tile = spawnObject(obj_parameters)
    local custom = {}
    custom.image = url
    custom.thickness=0.2
    custom.merge_distance=15
    tile.setCustomObject(custom)
    --ship.setName("")
    tile.lock()
    return tile
end
function SpawnCustomAssetBundle(url, pos, y_rotation, scale)
    local obj_parameters = {}
    obj_parameters.type = 'Custom_Assetbundle'
    obj_parameters.position = pos
    obj_parameters.rotation = {0,y_rotation,0}
    obj_parameters.scale = {scale,1,scale}
    local tile = spawnObject(obj_parameters)
    local custom = {}
    custom.assetbundle = url
    custom.type = 1 -- Figurine
    tile.setCustomObject(custom)
    --ship.setName("")
    tile.lock()
    return tile
end
function Action_Spawn_1() Action_Spawn(1) end
function Action_Spawn_2() Action_Spawn(2) end
function Action_Spawn_3() Action_Spawn(3) end
function Action_Spawn_4() Action_Spawn(4) end
function Action_Spawn_5() Action_Spawn(5) end
function Action_Spawn_6() Action_Spawn(6) end
function Action_Spawn_7() Action_Spawn(7) end
function Action_Spawn_8() Action_Spawn(8) end
function Action_Spawn_9() Action_Spawn(9) end
function Action_Spawn_10() Action_Spawn(10) end
function Action_Spawn_11() Action_Spawn(11) end
function Action_Spawn_12() Action_Spawn(12) end
