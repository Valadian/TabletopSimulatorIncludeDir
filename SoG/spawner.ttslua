LOG_HEIGHT_Y = 2.73
BUTTON_ROW_Z = {57,-57}
LOG_ROW_Z = {43.7,-43.7}
LOG_COLS_X = {146.7, 119.26,  91.82, 54.88, 27.44, 0}
LOG_ROT = {0,180}
spawner_guid = 'ac3fe2'
spawner = nil
DECK_SOURCES = {['A'] = '5b2acc', ['B'] = '880d60', ['C'] = '9f3bbd', ['D'] = '1ba27a'}
ACTION_SOURCE_GUID = '009a16'
AMMO_SOURCE_GUID = 'ba173b'
#include ship_db
function Spawner.onload()
    -- for faction,ships in pairs(SHIPS) do
    --     for _,ship in pairs(ships) do
    --         Global['Action_Log_Spawn_'..faction.."_"..ship]
    --     end
    -- end
    spawner = getObjectFromGUID(spawner_guid)
    -- for i=1,12 do
    --     _G['ActionSpawn_'..i] = function() Action_Spawn(i) end
    -- end
    Spawner.drawButtons()
end
function Spawner.drawButtons()
    spawner.createButton({
        ['click_function'] = 'Action_ClearButtons',
        ['label'] = "Finish Spawning",
        ['position'] = {-7,0,0},
        ['width'] = 4000,
        ['height'] = 1200,
        ['font_size'] = 500
        })
    for i=1,12 do
        spawner.createButton({
            ['click_function'] = 'Action_Spawn_'..i,--|obj| Action_Spawn(i),
            --['function_owner'] = spawner,
            ['label'] = "Spawn",
            ['position'] = CalculateButtonOffset(i),
            ['rotation'] =  CalculateButtonRotation(i),
            ['width'] = 2200,
            ['height'] = 1200,
            ['font_size'] = 500
            })
    end
end
function Action_Log_Spawn_HMS_Vanguard(log) SpawnShip(log, "British", "HMS Vanguard") end
function Action_Log_Spawn_HMS_Defence(log) SpawnShip(log, "British", "HMS Defence") end
function Action_Log_Spawn_HMS_Adamant(log) SpawnShip(log, "British", "HMS Adamant") end
function Action_Log_Spawn_HMS_Unite(log) SpawnShip(log, "British", "HMS Unite") end
function Action_Log_Spawn_HMS_Orpheus(log) SpawnShip(log, "British", "HMS Orpheus") end
function Action_Log_Spawn_HMS_Meleager(log) SpawnShip(log, "British", "HMS Meleager") end
function Action_Log_Spawn_HMS_Cleopatra(log) SpawnShip(log, "British", "HMS Cleopatra") end
function Action_Log_Spawn_HMS_Iphigenia(log) SpawnShip(log, "British", "HMS Iphigenia") end
function Action_Log_Spawn_HMS_Terpsichore(log) SpawnShip(log, "British", "HMS Terpsichore") end
function Action_Log_Spawn_Aquilon(log) SpawnShip(log, "French", "Aquilon") end
function Action_Log_Spawn_Genereux(log) SpawnShip(log, "French", "Genereux") end
function Action_Log_Spawn_Courageuse(log) SpawnShip(log, "French", "Courageuse") end
function Action_Log_Spawn_Hermione(log) SpawnShip(log, "French", "Hermione") end
function Action_Log_Spawn_Unite(log) SpawnShip(log, "French", "Unite") end
function Action_Log_Spawn_Concorde(log) SpawnShip(log, "French", "Concorde") end
function SpawnShip(log, faction, shipname)
    log.clearButtons()
    shipdef = SHIPS[faction][shipname]
    if shipdef.Log!=nil then
        pos = vector.add(log.getPosition(),vector.rotate({0,0,-3.5},log.getRotation()[2]))
        customlog = SpawnCustomObject(shipdef.Log, pos, log.getRotation()[2], 3.4)
        customlog.setName(shipdef.Name)
        customlog.setSnapPoints({
            {position = {-3.27,0,-0.27}},
            {position = {-2.77,0,-0.27}},
            {position = {-2.27,0,-0.27}},
            {position = {-1.77,0,-0.27}},
            {position = {-1.27,0,-0.27}},
            {position = {-0.77,0,-0.27}},
            {position = {-0.27,0,-0.27}},
            {position = {0.23,0,-0.27}},
            {position = {0.73,0,-0.27}},
            {position = {1.23,0,-0.27}},
            {position = {1.73,0,-0.27}},
            {position = {2.23,0,-0.27}},
            {position = {-3.27,0,0.27}},
            {position = {-2.77,0,0.27}},
            {position = {-2.27,0,0.27}},
            {position = {-1.77,0,0.27}},
            {position = {-1.27,0,0.27}},
            {position = {-0.77,0,0.27}},
            {position = {-0.27,0,0.27}},
            {position = {0.23,0,0.27}},
            {position = {0.73,0,0.27}},
            {position = {1.23,0,0.27}},
            {position = {1.73,0,0.27}},
            {position = {2.23,0,0.27}}
        })
    end
    if shipdef.Card!=nil then
        pos = vector.add(log.getPosition(),vector.rotate({8.7,0,9.3},log.getRotation()[2]))
        customcard = SpawnCustomObject(shipdef.Card, pos, log.getRotation()[2], 1.7)
        customcard.setName(shipdef.Name)
    end
    pos = vector.add(log.getPosition(),vector.rotate({8.7,1,9.3},log.getRotation()[2]))
    ship = SpawnCustomAssetBundle(shipdef.Model, pos, log.getRotation()[2], 1)
    ship.unlock()
    ship.setDescription(shipdef.Arc..":ship")
    ship.setName(shipdef.Name)
    Log.drawButtons(log)
    Ship.onObjectDrop(ship)
    deck_source = getObjectFromGUID(DECK_SOURCES[shipdef.Deck])
    deck_source.takeObject({
        position = vector.add(log.getPosition(),{0,1,0}),
        rotation = log.getRotation(),
        callback_function = |obj| layout_deck(obj, log)
    })

    action_source = getObjectFromGUID(ACTION_SOURCE_GUID)
    action_source.takeObject({
        position = vector.add(log.getPosition(),vector.rotate({-11,1,2},log.getRotation()[2])),
        rotation = vector.add(log.getRotation(),{0,0,180})
    })

    ammo_source = getObjectFromGUID(AMMO_SOURCE_GUID)
    ammo_source.takeObject({
        position = vector.add(log.getPosition(),vector.rotate({2.1,1,4.5},log.getRotation()[2])),
        rotation = vector.add(log.getRotation(),{0,0,180})
    })
    ammo_source.takeObject({
        position = vector.add(log.getPosition(),vector.rotate({4.5,1,4.5},log.getRotation()[2])),
        rotation = vector.add(log.getRotation(),{0,0,180})
    })

    log.setSnapPoints({
        {position = {0.37,0,0.33}},
        {position = {0.79,0,0.33}},
        {position = {0.37,0,0.82}},
        {position = {0.79,0,0.82}},

        {position = {-0.15,0,0.9}},
        {position = {-0.57,0,0.9}},
        {position = {-0.99,0,0.9}},
        {position = {-1.42,0,0.9}}
    })
end
function layout_deck(deck,log)
    Log.SetDeckName(log, deck.getName())
    Action_SetLog_Full(log)
    Deck.SetLog(deck, log)
    deck.setPosition(vector.add(deck.getPosition(),vector.rotate({0,0,35},deck.getRotation()[2])))
    Action_Layout(deck)
end
function Action_ClearButtons()
    spawner.clearButtons()
end
function CalculateButtonOffset(i)
    return {LOG_COLS_X[math.imod(i,6)], 0, BUTTON_ROW_Z[math.floor((i-1)/6)+1]}
end
function CalculateButtonRotation(i)
    return {0,LOG_ROT[math.floor((i-1)/6+1)],0}
end
#include ../util/button
#include ../util/table
rate = {"st", "nd", "rd", "th", "th"}
logs = {}
function Action_Spawn(i)
    if logs[i]==nil then
        logs[i] = Spawn_Log(i)
        ShowFactionSelection(log)
        --ShowShipSelection(logs[i], "British")
    else
        destroyObject(logs[i])
        logs[i]=nil
    end
end
function ShowFactionSelection(log)
    factions = {}
    for k,v in pairs(SHIPS) do
        table.insert(factions, k)
    end
    btns = T(factions):Select(function(faction)
        return {
            ['click_function'] = 'Action_Log_Faction_'..faction,
            ['label'] = faction,
            ['width'] = 5000,
            ['height'] = 1200,
            ['font_size'] = 500
        }
    end)
    Button.LayoutGrid(btns, log,{0,1,-1}, 0, 0.18, 1, {11, 0, 2.5})
end
function Action_Log_Faction_British(log)
    log.clearButtons()
    ShowShipSelection(log, "British")
end
function Action_Log_Faction_French(log)
    log.clearButtons()
    ShowShipSelection(log, "French")
end
function ShowShipSelection(log, faction)

    min_PV = 68
    max_PV = 144
    pastel = 0.5 --0 to 1
    -- spawnbutton = CalculateButtonOffset(i)
    -- yrotation = CalculateButtonRotation(i)
    -- topleftpos = vector.add(spawnbutton,vector.rotate({-6,0,-15},yrotation[2]))
    btns = T(SHIPS[faction]):OrderByDesc(function(def) return def.PV end):Select(function(shipdef)
        return {
            ['click_function'] = 'Action_Log_Spawn_'..(shipdef.Name:gsub(" ","_")),
            ['label'] = shipdef.Name.." ("..shipdef.PV..")",
            ['tooltip'] = shipdef.Rate..rate[shipdef.Rate].." Rate\n"..
                          shipdef.Burden.." Burden\n"..
                          shipdef.Deck.." Maneuver Deck\n"..
                          shipdef.Veer.." Veer",
            ['color'] = {r=(shipdef.PV-min_PV)/(max_PV-min_PV)*(1-pastel)+pastel, g=pastel, b = 1-(shipdef.PV-min_PV)/(max_PV-min_PV)*(1-pastel)},
            ['width'] = 5000,
            ['height'] = 1200,
            ['font_size'] = 500
            }
    end)
    Button.LayoutGrid(btns, log, {-1,1,-1}, 0, 0.18, 2, {11, 0,2.5})
end
function Spawn_Log(i)
    offset = CalculateButtonOffset(i)
    y_rotation = CalculateButtonRotation(i)[2]
    btn_loc = vector.add(spawner.getPosition(),vector.scale(offset,{-1,1,1}))
    log_loc = vector.add(btn_loc, vector.rotate({0,0,-13.36},y_rotation))
    log = SpawnCustomObject(LOG_BORDER, log_loc, y_rotation, 5.52)
    log.setDescription("Ship Log")
    --Log.drawButtons(log)
    return log
end
function SpawnCustomObject(url, pos, y_rotation, scale)
    local obj_parameters = {}
    obj_parameters.type = 'Custom_Token'
    obj_parameters.position = pos
    obj_parameters.rotation = {0,y_rotation,0}
    obj_parameters.scale = {scale,1,scale}
    local tile = spawnObject(obj_parameters)
    local custom = {}
    custom.image = url
    custom.thickness=0.2
    custom.merge_distance=15
    tile.setCustomObject(custom)
    --ship.setName("")
    tile.lock()
    return tile
end
function SpawnCustomAssetBundle(url, pos, y_rotation, scale)
    local obj_parameters = {}
    obj_parameters.type = 'Custom_Assetbundle'
    obj_parameters.position = pos
    obj_parameters.rotation = {0,y_rotation,0}
    obj_parameters.scale = {scale,1,scale}
    local tile = spawnObject(obj_parameters)
    local custom = {}
    custom.assetbundle = url
    custom.type = 1 -- Figurine
    tile.setCustomObject(custom)
    --ship.setName("")
    tile.lock()
    return tile
end
function Action_Spawn_1() Action_Spawn(1) end
function Action_Spawn_2() Action_Spawn(2) end
function Action_Spawn_3() Action_Spawn(3) end
function Action_Spawn_4() Action_Spawn(4) end
function Action_Spawn_5() Action_Spawn(5) end
function Action_Spawn_6() Action_Spawn(6) end
function Action_Spawn_7() Action_Spawn(7) end
function Action_Spawn_8() Action_Spawn(8) end
function Action_Spawn_9() Action_Spawn(9) end
function Action_Spawn_10() Action_Spawn(10) end
function Action_Spawn_11() Action_Spawn(11) end
function Action_Spawn_12() Action_Spawn(12) end
