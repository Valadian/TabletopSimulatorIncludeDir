STBD_FORE = 1
STBD_FULL = 2
STBD_AFT = 3
PORT_FORE = 4
PORT_FULL = 5
PORT_AFT = 6
MUSKETRY = 7
STBD_ARCS = {1,2,3}
PORT_ARCS = {4,5,6}
ALL_ARCS = {1,2,3,4,5,6}
function API_UPDATE_ALL_BUTTONS()
    for i,ship in ipairs(getAllObjects()) do
        if isShip(ship) then
            Ship.drawButtons(ship)
        end
    end
end
function Ship.onObjectDrop(dropped_object)
    --printToAll("dropped ship: "..dropped_object.getName(), {1,1,1})
    -- lprintToAll('x: '..dropped_object.getPosition()[1]..', y: '..dropped_object.getPosition()[2]..', z: '..dropped_object.getPosition()[3],{1,1,1})
    local log = findNearestLog(dropped_object.getPosition())
    if log~=nil and vector.length(vector.sub(log.getPosition(),dropped_object.getPosition()))<16 then
        if Log.GetShip(log)~=nil then
            --printToAll("ShipLog: "..log.getName().." already has a ship.",{1,0,0})
        else
            Log.SetShip(log,dropped_object)
            log.setName(dropped_object.getName())
            Log.drawButtons(log)
        end
    end
    if dropped_object.getVar('colliding') then
        Action_Collision(ship)
    else
        Ship.drawButtons(dropped_object)
    end
end
function Ship.onSave(item)
    local data = {}
    data["type"] = 'ship'
    data["wind"] = Ship.GetWind(item)
    data["speed"] = Ship.GetSpeed(item)
    data["card"] = Ship.GetCard(item) and Ship.GetCard(item).getGUID() or nil
    data["broke_mast"] = Ship.GetBrokeMast(item)
    data["ready"] = Ship.GetReadyToMove(item)
    data["backing"] = Ship.GetIsBacking(item)
    -- data["arc"] = Ship.GetArc(item) and Ship.GetArc(item).getGUID() or nil
    local def = Ship.GetShipDefinition(item)
    --data["rear_arc"] = def.rear_arc
    --data["center_arc"] = def.center_arc
    --data["front_arc"] = def.front_arc
    data["def"] = def
    return data
end
function Ship.onLoad(item, data)
    --printToAll("Loading ship: "..guid,{1,1,1})
    Ship.SetWind(item,data["wind"])
    Ship.SetSpeed(item,data["speed"])
    if data["card"] then
        Ship.SetCard(item,getObjectFromGUID(data["card"]))
    end
    Ship.SetBrokeMast(item,data["broke_mast"])
    Ship.SetReadyToMove(item,data["ready"])
    Ship.SetIsBacking(item,data["backing"])
    -- if data["arc"] then
    --     Ship.SetArc(item,getObjectFromGUID(data["arc"]))
    -- end
    local def = data["def"]
    --def.rear_arc = data["rear_arc"]
    --def.center_arc = data["center_arc"]
    --def.front_arc = data["front_arc"]
    Ship.SetShipDefinition(item,def)
    Ship.drawButtons(item)
end

function isShip(ship)
    return ship.tag == 'Figurine' and ship.name ~= '' and (ship.getDescription():match '.*(ship)')=="ship" -- and isInPlay(ship)
end

function Ship.SetWind(ship, wind) ship.setVar('wind', wind) end
function Ship.GetWind(ship) return ship.getVar('wind') end
function Ship.SetSpeed(ship, speed) ship.setVar('speed', speed) end
function Ship.GetSpeed(ship) return ship.getVar('speed') end
function Ship.SetCard(ship, card) ship.setVar('card', card) end
function Ship.GetCard(ship) return ship.getVar('card') end
function Ship.SetBrokeMast(ship, bool) ship.setVar('broke_mast',bool) end
function Ship.GetBrokeMast(ship) return ship.getVar('broke_mast') or false end
function Ship.SetReadyToMove(ship, ready) ship.setVar('ready',ready) end
function Ship.GetReadyToMove(ship) return ship.getVar('ready') end
function Ship.SetIsBacking(ship,backing) ship.setVar('backing',backing) end
function Ship.GetIsBacking(ship) return ship.getVar('backing') end
function Ship.SetArc(ship, index, arc)
    if ship.getTable('arcs')==nil then
        ship.setTable('arcs',{})
    end
    local t = ship.getTable('arcs')
    t[index] = arc
    ship.setTable('arcs',t)
    --ship.setVar('arc',arc)
end
function Ship.GetArc(ship,index)
    local t = ship.getTable('arcs')
    if t==nil then
        return nil
    else
        return t[index]
    end
    --return ship.getVar('arc')
end
function Ship.GetLog(ship)
    for _,item in ipairs(getAllObjects()) do
        if isLog(item) and Log.GetShip(item)==ship then
            return item
        end
    end
    return nil
end
function Ship.GetAbackLastTurn(ship) return ship.getVar('aback_last_turn') end
function Ship.SetAbackLastTurn(ship, aback_last_turn) ship.setVar('aback_last_turn',aback_last_turn) end
function Ship.SetShipDefinition(ship,def)
    local cloned_def = {
        ['Name'] = def.Name,
        ['Class'] = def.Class,
        ['Variant'] = def.Variant,
        ['Type'] = def.Type,
        ['Model'] = def.Model,
        ['Log'] = def.Log,
        ['Card'] = def.Card,
        ['Deck'] = def.Deck,
        ['Burden'] = def.Burden,
        ['Crew'] = def.Crew,
        ['Guns'] = def.Guns,
        ['Veer'] = def.Veer,
        ['PV'] = def.PV,
        ['Rate'] = def.Rate,
        ['rear_arc'] = def.rear_arc,
        ['center_arc'] = def.center_arc,
        ['front_arc'] = def.front_arc,
        ['aback'] = def.aback,
        ['beat'] = def.beat,
        ['reach'] = def.reach}
    ship.setTable('def',cloned_def)
end
function Ship.GetShipDefinition(ship)
    --printToAll("ship.getGUID: "..tostring(ship.getGUID()))
    local def = ship.getTable('def')
    if def==nil then
        --printToAll("def==nil",{1,0,0})
        return nil
    end
    return def
end
function Ship.GetApparentWind(ship,y_rot_override)
    local rot = wind_dir.getRotation()[2]-(y_rot_override or ship.getRotation()[2])
    local def = Ship.GetShipDefinition(ship)
    if def~=nil then
        local real_rot = rot-270
        if real_rot<-180 then
            real_rot = real_rot+360
        end
        -- if real_rot>180 then
        --     real_rot = real_rot-360
        -- end
        return real_rot
    end
    return 0
end

function Ship.GetEffectiveSpeed(ship)
    local speed = Ship.GetSpeed(ship)
    if world_wind == "Low" then
        if speed=="Full" then return "Battle" end
        if speed=="Battle" then return "Backing" end
        if speed=="Backing" then return "Anchored" end
        if speed=="Anchored" then return "Anchored" end
    elseif world_wind == "High" then
        if speed=="Full" then return "Full" end
        if speed=="Battle" then return "Full" end
        if speed=="Backing" then return "Battle" end
        if speed=="Anchored" then return "Anchored" end
    else
        return speed
    end
end
function Ship.ClearArcs(ship)
    for i,arc in ipairs(Ship.getTable('arcs')) do
        arc.destruct()
    end
    ship.setTable('arcs',nil)
end
function Ship.IsOnlyActiveArcs(ship,arc_table)
    local num_spawned = 0
    local num_destroyed = 0
    for _,arc in ipairs(ALL_ARCS) do
        if Ship.GetArc(ship,arc)~=nil then --table.Contains(arc_table, arc) and
            num_destroyed = num_destroyed+1
        elseif Ship.GetArc(ship,arc)==nil and table.Contains(arc_table,arc) then
            num_spawned = num_spawned+1
        end
    end
    -- printToAll("")
    -- printToAll("num: "..tostring(#arc_table).." arc: "..tostring(arc_table[1]))
    -- printToAll("num_spawned: "..tostring(num_spawned))
    -- printToAll("num_destroyed: "..tostring(num_destroyed))
    return num_spawned==0 and num_destroyed==#arc_table
end
function Ship.ToggleArc(ship,arc_table ) --arc_model,x_scale,y_scale
    -- if Ship.GetArc(ship)~=nil then
    --     Ship.GetArc(ship).destruct()
    --     Ship.SetArc(ship,nil)
    -- end
    ship.getTable('arcs')
    local num_spawned = 0
    local num_destroyed = 0
    for _,arc in ipairs(ALL_ARCS) do
        if not table.Contains(arc_table, arc) and Ship.GetArc(ship,arc)~=nil then
            num_destroyed = num_destroyed+1
            Ship.GetArc(ship,arc).destruct()
            Ship.SetArc(ship,arc,nil)
        elseif Ship.GetArc(ship,arc)==nil and table.Contains(arc_table,arc) then
            num_spawned = num_spawned+1
            local is_front_arc = (math.fmod(arc,3)==1)
            local is_full_arc = (math.fmod(arc,3)==-1)
            local is_aft_arc = (math.fmod(arc,3)==0)
            local is_port_arc = arc>3
            x_scale = 1
            if is_port_arc then x_scale = -1 end
            y_scale = 1
            if is_aft_arc then y_scale = -1 end
            arc_model = FRONT_ARC
            if is_full_arc then arc_model = FULL_ARC end
            local desc = ship.getDescription()
            --local type = desc:match '(%u*):ship'
            local def = Ship.GetShipDefinition(ship)
            if def~=nil then
                ship.lock()
                local obj_parameters = {}
                obj_parameters.type = 'Custom_Model'
                --printToAll("def.center_arc"..tostring(def['center_arc']))
                local offset = vector.scale(def['center_arc'],{-x_scale,1,1})
                if is_front_arc then --arc_model==FRONT_ARC and y_scale==1 then
                    offset = vector.scale(def['front_arc'],{-x_scale,1,1})
                end
                if is_aft_arc then --arc_model==FRONT_ARC and y_scale==-1 then
                    offset = vector.scale(def['rear_arc'],{-x_scale,1,1})
                end
                offset = vector.rotate(offset,ship.getRotation()[2])
                obj_parameters.position = vector.add(ship.getPosition(),offset)
                obj_parameters.rotation = ship.getRotation()
                obj_parameters.scale = {x_scale, 0.6, y_scale}
                local newruler = spawnObject(obj_parameters)
                local custom = {}
                custom.mesh = arc_model --ARCS[type]
                custom.diffuse = 'http://i.imgur.com/Szoc5MW.png'
                custom.collider = ARC_COLLIDER
                custom.material = 1 --WOOD
                newruler.setCustomObject(custom)
                newruler.lock()
                Ship.SetArc(ship,arc,newruler)
            end
        end
    end
    if num_spawned==0 and num_destroyed==0 then
        for _,arc in ipairs(ALL_ARCS) do
            if Ship.GetArc(ship,arc)~=nil then
                Ship.GetArc(ship,arc).destruct()
                Ship.SetArc(ship,arc,nil)
            end
        end
    end
    Ship.drawButtons(ship)
end
function Ship.drawButtons(ship, y_rot_override)
    ship.clearButtons()

    --draw wind indicator
    local pos = {3, 0.5, 0}
    local rot = wind_dir.getRotation()[2]-(y_rot_override or ship.getRotation()[2])
    pos = vector.rotate(pos,-rot)
    local wind_color = {0,0,0}
    local def = Ship.GetShipDefinition(ship)
    if def~=nil then
        --printToAll("wind_dir.getRotation()[2]: "..tostring(wind_dir.getRotation()[2]))
        --printToAll("ship.getRotation()[2]: "..tostring(ship.getRotation()[2]))
        --printToAll("rot: "..rot)
        -- local real_rot = rot-270
        -- if real_rot<-180 then
        --     real_rot = real_rot+360
        -- end
        --printToAll("real_rot: "..real_rot)
        local apparent = Ship.GetApparentWind(ship, y_rot_override)
        if math.abs(apparent)<def['aback'] then
            wind_color = {0.7,0,0}
        elseif math.abs(apparent)<def['beat'] then
            wind_color = {0.75,0.6,0}
        elseif math.abs(apparent)<def['reach'] then
            wind_color = {0,0.7,0}
        else
            wind_color = {0.75,0.6,0}
        end
    end

    if current_phase~="combat" and current_phase~="reload" then
        ship.createButton({['click_function'] = 'Action_DoNothing', ['label'] = '', ['position'] = pos, ['color'] = wind_color,['function_owner'] = self, ['rotation'] =  {0, rot, 0}, ['width'] = 1600, ['height'] = 10, ['font_size'] = 10})
    end
    if Ship.GetCard(ship)~=nil then
        if Ship.GetReadyToMove(ship) then
            ship.createButton({['click_function'] = 'Action_PerformMove', ['label'] = 'MOVE', ['position'] = {0, 0.5, -5}, ['color'] = GREEN, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1600, ['height'] = 400, ['font_size'] = 350})

            -- if not Ship.GetIsBacking(ship) then
            --     ship.createButton({['click_function'] = 'Action_SetReaching', ['label'] = 'Reach', ['position'] = {-3.5, 0.5, -3}, ['color'] = GREEN, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
            --     ship.createButton({['click_function'] = 'Action_SetBeating', ['label'] = 'Beat', ['position'] = {-3.5, 0.5, -2}, ['color'] = ORANGE, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
            -- end
            -- ship.createButton({['click_function'] = 'Action_SetAback', ['label'] = 'Aback', ['position'] = {-3.5, 0.5, -1}, ['color'] = RED, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
            -- ship.createButton({['click_function'] = 'Action_SetAback2', ['label'] = 'Aback x2', ['position'] = {-3.5, 0.5, -0}, ['color'] = RED, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
            ship.createButton({['click_function'] = 'Action_Done', ['label'] = 'Clear', ['position'] = {0, 0.5, -4.2}, ['color'] = RED, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1600, ['height'] = 400, ['font_size'] = 350})
        else
            ship.createButton({['click_function'] = 'Action_Done', ['label'] = 'Clear', ['position'] = {0, 0.5, -4.2}, ['color'] = GREEN, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1600, ['height'] = 400, ['font_size'] = 350})
        end
        ship.createButton({['click_function'] = 'Action_Collision', ['label'] = 'Collision', ['position'] = {0, 0.5, 4.2}, ['color'] = RED, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1600, ['height'] = 400, ['font_size'] = 350})

    else
        local log = Ship.GetLog(ship)
        FIRE_BG = RED
        BASE_BG = {0,0,0}
        BASE_FG = WHITE
        CLEAR_BG = {0.7,0.7,0.7}
        CLEAR_FG = WHITE

        if (current_phase=="combat" and Log.canFireMusketry(log)) or ship.getVar('musketry')~=nil then
            label = 'Musketry'; color = {108/255, 138/255, 174/255}; text_color = {0,0,0};
            if ship.getVar('musketry')~=nil then
                label = 'Clear'; color = CLEAR_BG; text_color = CLEAR_FG
                if current_phase=="combat" and Log.canFireMusketry(log) then
                    ship.createButton({['click_function'] = 'Action_Musketry_Fire', ['label'] = 'Fire', ['position'] = {0, 0.5, -5.9}, ['color'] = FIRE_BG, ['font_color'] = BASE_FG, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
                end
            end
            ship.createButton({['click_function'] = 'Action_Musketry', ['label'] = label, ['position'] = {0, 0.5, -4.5}, ['color'] = color, ['font_color'] = text_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1200, ['height'] = 250, ['font_size'] = 200})
        end
        --if current_phase=="combat" then
        -- no card? Add Fire buttons


        local stbd_loaded = Log.isStbdLoaded(log) and Log.isFiringStarboard(log)
        if (current_phase=="combat" and stbd_loaded) or Ship.GetArc(ship,STBD_FORE)~=nil then
            label = 'Arc'; color = BASE_BG; text_color = BASE_FG;
            if Ship.IsOnlyActiveArcs(ship,{STBD_FORE}) then
                label = 'Clear'; color = CLEAR_BG; text_color = CLEAR_FG
                if current_phase=="combat" and stbd_loaded then
                    ship.createButton({['click_function'] = 'Action_STBD_Fire', ['label'] = 'Fire', ['position'] = {4.2, 0.5, -3}, ['color'] = FIRE_BG, ['font_color'] = BASE_FG, ['function_owner'] = self, ['rotation'] =  {0, 90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
                end
            end
            ship.createButton({['click_function'] = 'Action_STBD_Front', ['label'] = label, ['position'] = {2.8, 0.5, -3}, ['color'] = color, ['font_color'] = text_color, ['function_owner'] = self, ['rotation'] =  {0, 90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
        end
        if (current_phase=="combat" and stbd_loaded) or Ship.GetArc(ship,STBD_FULL)~=nil then
            label = 'Arc'; color = BASE_BG; text_color = BASE_FG;
            if Ship.IsOnlyActiveArcs(ship,{STBD_FULL}) then
                label = 'Clear'; color = CLEAR_BG; text_color = CLEAR_FG
                if current_phase=="combat" and stbd_loaded then
                    ship.createButton({['click_function'] = 'Action_STBD_Fire', ['label'] = 'Fire', ['position'] = {4.2, 0.5, 0}, ['color'] = FIRE_BG, ['font_color'] = BASE_FG, ['function_owner'] = self, ['rotation'] =  {0, 90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
                end
            end
            ship.createButton({['click_function'] = 'Action_STBD_Full', ['label'] = label, ['position'] = {2.8, 0.5, 0}, ['color'] = color, ['font_color'] = text_color, ['function_owner'] = self, ['rotation'] =  {0, 90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
        end
        if (current_phase=="combat" and stbd_loaded) then
            label = 'All Arcs'; color = BASE_BG; text_color = BASE_FG;
            if Ship.IsOnlyActiveArcs(ship,STBD_ARCS) then label = 'Clear'; color = CLEAR_BG; text_color = CLEAR_FG end
            ship.createButton({['click_function'] = 'Action_STBD_All_Arcs', ['label'] = label, ['position'] = {1.8, 0.5, 0}, ['color'] = color, ['font_color'] = text_color, ['function_owner'] = self, ['rotation'] =  {0, 90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
        end
        if (current_phase=="combat" and stbd_loaded) or Ship.GetArc(ship,STBD_AFT)~=nil then
            label = 'Arc'; color = BASE_BG; text_color = BASE_FG;
            if Ship.IsOnlyActiveArcs(ship,{STBD_AFT}) then
                label = 'Clear'; color = CLEAR_BG; text_color = CLEAR_FG
                if current_phase=="combat" and stbd_loaded then
                    ship.createButton({['click_function'] = 'Action_STBD_Fire', ['label'] = 'Fire', ['position'] = {3.5, 0.5, 3}, ['color'] = BASE_BG, ['font_color'] = BASE_FG, ['function_owner'] = self, ['rotation'] =  {0, 90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
                end
            end
            ship.createButton({['click_function'] = 'Action_STBD_Rear', ['label'] = label, ['position'] = {2.8, 0.5, 3}, ['color'] = color, ['font_color'] = text_color, ['function_owner'] = self, ['rotation'] =  {0, 90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
        end

        local port_loaded = Log.isPortLoaded(log) and Log.isFiringPort(log)
        if (current_phase=="combat" and port_loaded) or Ship.GetArc(ship,PORT_FORE)~=nil then
            label = 'Arc'; color = BASE_BG; text_color = BASE_FG;
            if Ship.IsOnlyActiveArcs(ship,{PORT_FORE})  then
                label = 'Clear'; color = CLEAR_BG; text_color = CLEAR_FG
                if current_phase=="combat" and port_loaded then
                    ship.createButton({['click_function'] = 'Action_PORT_Fire', ['label'] = 'Fire', ['position'] = {-3.5, 0.5, -3}, ['color'] = BASE_BG, ['font_color'] = BASE_FG, ['function_owner'] = self, ['rotation'] =  {0, 90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
                end
            end
            ship.createButton({['click_function'] = 'Action_PORT_Front', ['label'] = label, ['position'] = {-2.8, 0.5, -3}, ['color'] = color, ['font_color'] = text_color, ['function_owner'] = self, ['rotation'] =  {0, -90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
        end
        if (current_phase=="combat" and port_loaded) or Ship.GetArc(ship,PORT_FULL)~=nil then
            label = 'Arc'; color = BASE_BG; text_color = BASE_FG;
            if Ship.IsOnlyActiveArcs(ship,{PORT_FULL}) then
                label = 'Clear'; color = CLEAR_BG; text_color = CLEAR_FG
                if current_phase=="combat" and port_loaded then
                    ship.createButton({['click_function'] = 'Action_PORT_Fire', ['label'] = 'Fire', ['position'] = {-3.5, 0.5, 0}, ['color'] = BASE_BG, ['font_color'] = BASE_FG, ['function_owner'] = self, ['rotation'] =  {0, 90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
                end
            end
            ship.createButton({['click_function'] = 'Action_PORT_Full', ['label'] = label, ['position'] = {-2.8, 0.5, 0}, ['color'] = color, ['font_color'] = text_color, ['function_owner'] = self, ['rotation'] =  {0, -90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
        end
        if (current_phase=="combat" and port_loaded) then
            label = 'All Arcs'; color = BASE_BG; text_color = BASE_FG;
            if Ship.IsOnlyActiveArcs(ship,PORT_ARCS) then label = 'Clear'; color = CLEAR_BG; text_color = CLEAR_FG end
            ship.createButton({['click_function'] = 'Action_PORT_All_Arcs', ['label'] = label, ['position'] = {-1.8, 0.5, 0}, ['color'] = color, ['font_color'] = text_color, ['function_owner'] = self, ['rotation'] =  {0, -90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
        end
        if (current_phase=="combat" and port_loaded) or Ship.GetArc(ship,PORT_AFT)~=nil then
            label = 'Arc'; color = BASE_BG; text_color = BASE_FG;
            if Ship.IsOnlyActiveArcs(ship,{PORT_AFT}) then
                label = 'Clear'; color = CLEAR_BG; text_color = CLEAR_FG
                if current_phase=="combat" and port_loaded then
                    ship.createButton({['click_function'] = 'Action_PORT_Fire', ['label'] = 'Fire', ['position'] = {-3.5, 0.5, 3}, ['color'] = BASE_BG, ['font_color'] = BASE_FG, ['function_owner'] = self, ['rotation'] =  {0, 90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
                end
            end
            ship.createButton({['click_function'] = 'Action_PORT_Rear', ['label'] = label, ['position'] = {-2.8, 0.5, 3}, ['color'] = color, ['font_color'] = text_color, ['function_owner'] = self, ['rotation'] =  {0, -90, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
        end
        --end
    end
    -- ship.createButton({['click_function'] = 'Action_SetFull', ['label'] = '(3) Full', ['position'] = {4.5, 0.5, -3}, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1600, ['height'] = 250, ['font_size'] = 200})
    -- ship.createButton({['click_function'] = 'Action_SetBattle', ['label'] = '(2) Battle', ['position'] = {4.5, 0.5, -2}, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1600, ['height'] = 250, ['font_size'] = 200})
    -- ship.createButton({['click_function'] = 'Action_SetBacking', ['label'] = '(1) Battle', ['position'] = {4.5, 0.5, -1}, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1600, ['height'] = 250, ['font_size'] = 200})
    -- ship.createButton({['click_function'] = 'Action_SetBrokeMast', ['label'] = '(-1) Broke Mast', ['position'] = {4.5, 0.5, 1}, ['color'] = RED, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1600, ['height'] = 250, ['font_size'] = 200})
    -- ship.createButton({['click_function'] = 'Action_SetBrokenMasts', ['label'] = '(-2) Broken Masts', ['position'] = {4.5, 0.5, 2}, ['color'] = RED, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1600, ['height'] = 250, ['font_size'] = 200})
    if current_phase == "move" and ship.getTable('undoPos')~=nil and #ship.getTable('undoPos')>0 then
        ship.createButton({['click_function'] = 'Action_Undo', ['label'] = 'Undo', ['position'] = {1.7, 0.5, 3.2}, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
    end
end
function Action_Collision(ship)
    ship.setVar("colliding",true)
    ship.unlock()
    ship.clearButtons()
    local manual_y = 0.5
    Ship.drawManualControls(ship, {0,manual_y,2.7})
    Ship.drawManualControls(ship, {0,manual_y,-2.7})
    ship.createButton({['click_function'] = 'Action_Lock', ['label'] = 'Lock', ['position'] = {0, 0.5, 3.2}, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 200})
end
function Action_Lock(ship)
    ship.setVar("colliding",nil)
    local undoPos = ship.getTable('undoPos') or {}
    local undoRot = ship.getTable('undoRot') or {}
    table.insert(undoPos,ship.getPosition())
    table.insert(undoRot,ship.getRotation())
    ship.setTable('undoPos',undoPos)
    ship.setTable('undoRot',undoRot)
    ship.lock()
    Ship.drawButtons(ship)
end
function Action_STBD_Fire(ship)
    local log = Ship.GetLog(ship)
    local ammo = Log.flipStbd(log)
    if ammo~=nil then
        printToAll(ship.getName().." fires '"..ammo.getName().."' to Starboard",{1,0,0})
    end
    Log.returnAction(log, 'Fire Starboard (Right)')
    Wait.frames(function()
        Ship.drawButtons(ship)
        Log.drawButtons(log)
        Log.CheckForAutoReady(log)
    end, 10)
end
function Action_Musketry_Fire(ship)
    local log = Ship.GetLog(ship)
    printToAll(ship.getName().." fires Musketry",{1,0,0})
    Log.returnAction(log, 'Musketry Fire')
    Wait.frames(function()
        Ship.drawButtons(ship)
        Log.drawButtons(log)
        Log.CheckForAutoReady(log)
    end, 10)
end
function Action_PORT_Fire(ship)
    local log = Ship.GetLog(ship)
    local ammo = Log.flipPort(log)
    if ammo~=nil then
        printToAll(ship.getName().." fires '"..ammo.getName().."' to Port",{1,0,0})
    end
    Log.returnAction(log, 'Fire Port (Left)')
    Wait.frames(function()
        Ship.drawButtons(ship)
        Log.drawButtons(log)
        Log.CheckForAutoReady(log)
    end, 10)
end
function Action_PerformMove(ship)
    local def = Ship.GetShipDefinition(ship)
    local apparent = Ship.GetApparentWind(ship)
    if math.abs(apparent)<def['aback'] then
        local aback_last_turn = Ship.GetAbackLastTurn(ship)
        if aback_last_turn then
            Action_SetAback2(ship)
            Wait.frames(function() Action_SetAback2(ship) end,60)
        else
            Action_SetAback(ship)
            Wait.frames(function() Action_SetAback(ship) end,60)
        end
        Ship.SetAbackLastTurn(ship, true)
        --wind_color = {0.7,0,0}
    elseif math.abs(apparent)<def['beat'] then
        Ship.SetAbackLastTurn(ship, false)
        Action_SetBeating(ship)
    elseif math.abs(apparent)<def['reach'] then
        Ship.SetAbackLastTurn(ship, false)
        Action_SetReaching(ship)
    else
        Ship.SetAbackLastTurn(ship, false)
        Action_SetBeating(ship)
    end
end
function Ship.drawManualControls(ship, pos)
    local turn_suffix = "_Rotate_Around_Front"
    if pos[3]>0 then
        turn_suffix = "_Rotate_Around_Back"
    end
    ship.createButton({['click_function'] = 'Action_Fwd', ['label'] = '^', ['tooltip'] = 'Right-Click to jump 75mm', ['position'] = vector.add(pos,{1, 0, -0.5}), ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 500, ['height'] = 500, ['font_size'] = 400})
    ship.createButton({['click_function'] = 'Action_Bkwd', ['label'] = 'V', ['position'] = vector.add(pos,{1, 0, 0.5}), ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 500, ['height'] = 500, ['font_size'] = 400})
    ship.createButton({['click_function'] = 'Action_Fwd', ['label'] = '^', ['position'] = vector.add(pos,{-1, 0, -0.5}), ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 500, ['height'] = 500, ['font_size'] = 400})
    ship.createButton({['click_function'] = 'Action_Bkwd', ['label'] = 'V', ['position'] = vector.add(pos,{-1, 0, 0.5}), ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 500, ['height'] = 500, ['font_size'] = 400})
    ship.createButton({['click_function'] = 'Action_Right', ['label'] = '>', ['position'] = vector.add(pos,{2, 0, 0}), ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 500, ['height'] = 1000, ['font_size'] = 400})
    ship.createButton({['click_function'] = 'Action_Left', ['label'] = '<', ['position'] = vector.add(pos,{-2, 0, 0}), ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 500, ['height'] = 1000, ['font_size'] = 400})
    ship.createButton({['click_function'] = 'Action_Turn_Right'..turn_suffix, ['label'] = 'tR', ['position'] = vector.add(pos,{3, 0, 0}), ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 500, ['height'] = 1000, ['font_size'] = 400})
    ship.createButton({['click_function'] = 'Action_Turn_Left'..turn_suffix, ['label'] = 'tL', ['position'] = vector.add(pos,{-3, 0, 0}), ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 500, ['height'] = 1000, ['font_size'] = 400})
end
STBD = -1
PORT = 1
FRONT = 1
FULL = 1
REAR = -1
function Clear_Arcs(ship)
    if ship.getVar('musketry')~=nil then
        ship.getVar('musketry').destruct()
        ship.setVar('musketry',nil)
    end
    for _,index in ipairs(ALL_ARCS) do
        if Ship.GetArc(ship,index)~=nil then
            Ship.GetArc(ship,index).destruct()
            Ship.SetArc(ship,index,nil)
        end
    end
    Wait.frames(|| Ship.drawButtons(ship), 10)
end
function Action_Musketry(ship)
    if ship.getVar('musketry')==nil then
        ship.lock()
        obj_parameters = {}
        obj_parameters.type = 'Custom_Model'
        obj_parameters.position = ship.getPosition()
        obj_parameters.rotation = ship.getRotation()
        obj_parameters.scale = {1, 0.6, 1}
        local newruler = spawnObject(obj_parameters)
        local custom = {}
        custom.mesh = MUSKETRY_ARC --ARCS[type]
        custom.diffuse = 'http://i.imgur.com/Szoc5MW.png'
        custom.collider = ARC_COLLIDER
        custom.material = 1 --WOOD
        newruler.setCustomObject(custom)
        newruler.lock()
        ship.setVar('musketry',newruler)
    else
        ship.getVar('musketry').destruct()
        ship.setVar('musketry',nil)
    end
    Log.returnAction(log, 'Musketry Fire')
    Wait.frames(|| Ship.drawButtons(ship), 10)
    Wait.frames(|| Log.drawButtons(log), 10)
end
function Action_STBD_Front(ship) Ship.ToggleArc(ship,{STBD_FORE}) end--FRONT_ARC,STBD,FRONT) end
function Action_STBD_Full(ship) Ship.ToggleArc(ship,{STBD_FULL}) end--FULL_ARC,STBD,FULL) end
function Action_STBD_All_Arcs(ship) Ship.ToggleArc(ship,STBD_ARCS) end
function Action_STBD_Rear(ship) Ship.ToggleArc(ship,{STBD_AFT}) end--FRONT_ARC,STBD,REAR) end
function Action_PORT_Front(ship) Ship.ToggleArc(ship,{PORT_FORE}) end--FRONT_ARC,PORT,FRONT) end
function Action_PORT_Full(ship) Ship.ToggleArc(ship,{PORT_FULL}) end--FULL_ARC,PORT,FULL) end
function Action_PORT_All_Arcs(ship) Ship.ToggleArc(ship,PORT_ARCS) end
function Action_PORT_Rear(ship) Ship.ToggleArc(ship,{PORT_AFT}) end--FRONT_ARC,PORT,REAR) end
function Action_DoNothing() end
function Action_Fwd(ship, color, alt_click) local ratio=1; if alt_click then ratio = 75 end ship.setPositionSmooth(vector.add(ship.getPosition(),vector.rotate({0,0,-0.1*ratio},ship.getRotation()[2]))) end
function Action_Bkwd(ship) ship.setPositionSmooth(vector.add(ship.getPosition(),vector.rotate({0,0,0.1},ship.getRotation()[2]))) end
function Action_Right(ship) ship.setPositionSmooth(vector.add(ship.getPosition(),vector.rotate({-0.1,0,0},ship.getRotation()[2]))) end
function Action_Left(ship) ship.setPositionSmooth(vector.add(ship.getPosition(),vector.rotate({0.1,0,0},ship.getRotation()[2]))) end
function Action_Turn_Right_Rotate_Around_Front(ship)
    Action_Turn_Right(ship,3.75)
end
function Action_Turn_Right_Rotate_Around_Back(ship)
    Action_Turn_Right(ship,-3.75)
end
function Action_Turn_Right(ship,pivot)
    local offset = vector.rotate({0,0,pivot},ship.getRotation()[2])
    local new_offset = vector.rotate({0,0,pivot},ship.getRotation()[2]+1)
    ship.setPosition(vector.add(vector.sub(ship.getPosition(),offset),new_offset))
    ship.setRotation({ship.getRotation()[1],ship.getRotation()[2]+1,ship.getRotation()[3]})
end
function Action_Turn_Left_Rotate_Around_Front(ship)
    Action_Turn_Left(ship,3.75)
end
function Action_Turn_Left_Rotate_Around_Back(ship)
    Action_Turn_Left(ship,-3.75)
end
function Action_Turn_Left(ship,pivot)
    local offset = vector.rotate({0,0,pivot},ship.getRotation()[2])
    local new_offset = vector.rotate({0,0,pivot},ship.getRotation()[2]-1)
    ship.setPosition(vector.add(vector.sub(ship.getPosition(),offset),new_offset))
    ship.setRotation({ship.getRotation()[1],ship.getRotation()[2]-1,ship.getRotation()[3]})
end

function Action_Done(ship)
    Ship.SetIsBacking(ship,false)
    local card = Ship.GetCard(ship)
    Card.reset(card)
    Ship.SetCard(ship, nil)
    Ship.drawButtons(ship)
    local log = Card.GetLog(card)
    Log.SetReady(log,true)
    printToAll(ship.getName().." returns: "..card.getDescription(),{0,1,0})
end
function Action_Undo(ship)
    local undoPos = ship.getTable('undoPos')
    local undoRot = ship.getTable('undoRot')
    if #undoPos>0 then
        Ship.SetReadyToMove(ship,true)
        ship.setPositionSmooth(undoPos[#undoPos], bool, bool)
        ship.setRotationSmooth(undoRot[#undoRot], bool, bool)
        Ship.drawButtons(ship,undoRot[#undoRot][2])
        table.remove(undoPos)
        table.remove(undoRot)
        ship.setTable('undoPos',undoPos)
        ship.setTable('undoRot',undoRot)
    end
    Ship.drawButtons(ship)
end
function Action_SetReaching(ship)
    PerformMove(ship, 'Reaching')
end
function Action_SetBeating(ship)
    PerformMove(ship, 'Beating')
end
function Action_SetAback(ship)
    if Ship.GetIsBacking(ship) then
        if Ship.GetWind(ship)=='Aback' then
            PerformMove(ship, 'Aback')
        else
            local card = Ship.GetCard(ship)
            Ship.SetWind(ship, 'Aback')
            if card~=nil then
                positionCard(card,ship)
            end
        end
    else
        Ship.SetIsBacking(ship,true)
        local card = Ship.GetCard(ship)
        Ship.SetWind(ship, 'Aback')
        Card.SwapAback(card)
    end
    -- if card~=nil then
    --     positionCard(card,ship)
    -- end
 end
function Action_SetAback2(ship)
    if Ship.GetIsBacking(ship) then
        if Ship.GetWind(ship)=='AbackTwice' then
            PerformMove(ship, 'AbackTwice')
        else
            local card = Ship.GetCard(ship)
            Ship.SetWind(ship, 'AbackTwice')
            if card~=nil then
                positionCard(card,ship)
            end
        end
    else
        Ship.SetIsBacking(ship,true)
        local card = Ship.GetCard(ship)
        Ship.SetWind(ship, 'AbackTwice')
        Card.SwapAback(card)
    end
    -- if Ship.GetWind(ship)=='AbackTwice' then
    --     PerformMove(ship, 'AbackTwice')
    -- end
    -- Ship.SetWind(ship, 'AbackTwice')
    -- local card = Ship.GetCard(ship)
    -- Card.SwapAback(card)
    -- if card~=nil then
    --     positionCard(card,ship)
    -- end
end
function PerformMove(ship, wind)
    if Ship.GetCard(ship)==nil then
        printToAll("No card assigned",{1,0.5,0.5})
    else
        local card_obj = Ship.GetCard(ship)
        local card = CARDS[card_obj.getDescription()]
        --wind = ship.getVar('wind')
        -- printToAll("wind: "..wind, {1,1,1})
        local speed = Ship.GetEffectiveSpeed(ship)
        if speed=="Anchored" then
            speed="Backing"
        end
        -- printToAll("speed: "..tostring(speed), {1,1,1})
        local move = card[speed] or card[wind] or card['BrokenMast']
        if move==nil then
            printToAll("No speed: "..speed.." on card",{1,0.5,0.5})
        -- elseif move.offset==nil then
        --     printToAll("move.offset==nil",{1,0.5,0.5})
        else
            local transform = move[wind]
            if transform==nil then
                printToAll("No wind: "..wind.." on card",{1,0.5,0.5})
            else

                Ship.SetReadyToMove(ship,false)
                local direction = 1
                if transform.offset[3]>0 then
                    direction = -1
                end
                local offset = vector.rotate(vector.add({0,0,-3.75*direction},transform.offset),ship.getRotation()[2])
                local new_y_rot = ship.getRotation()[2]+transform.rotation
                local back = vector.rotate({0,0,-3.75}, new_y_rot)
                local undoPos = ship.getTable('undoPos') or {}
                local undoRot = ship.getTable('undoRot') or {}
                table.insert(undoPos,ship.getPosition())
                table.insert(undoRot,ship.getRotation())
                ship.setTable('undoPos',undoPos)
                ship.setTable('undoRot',undoRot)
                ship.setPositionSmooth(vector.add(ship.getPosition(),vector.add(offset,back)),false,false)
                ship.setRotationSmooth({0,new_y_rot,0},false,false)
                Ship.drawButtons(ship, new_y_rot)
            end
        end
    end
end
function positionCard(card_obj, ship)
    -- local backing = Ship.GetWind(ship)=="Aback" or Ship.GetWind(ship)=="AbackTwice"
    -- if Ship.GetSpeed(ship)==nil and not backing then
    --     printToAll('Speed is nil',{1,0.5,0.5})
    --     return
    -- end
    -- printToAll('speed: '..ship.getVar('speed'),{1,1,1})
    local card = CARDS[card_obj.getDescription()]
    local move = nil
    local speed = Ship.GetEffectiveSpeed(ship)
    if speed=="Anchored" then
        speed="Backing"
    end
    local wind = Ship.GetWind(ship)
    if card[wind]~=nil then
        --printToAll('found wind: '..Ship.GetWind(ship),{1,1,1})
        move = card[wind]
    -- elseif Ship.GetBrokeMast(ship) then
    --     if card['BrokenMast'] then
    elseif card['BrokenMast'] then
            --printToAll('found brokemast',{1,1,1})
        move = card['BrokenMast']
        --end
    elseif card[speed]~=nil then
        --printToAll('found speed: '..Ship.GetSpeed(ship),{1,1,1})
        move = card[speed]
    end
    if move~=nil then
        local off = vector.rotate(move.Start,ship.getRotation()[2])
        ship.lock()
        card_obj.setPositionSmooth(vector.add(ship.getPosition(),off),false,false)
        card_obj.setRotationSmooth({0,ship.getRotation()[2],0},false,false)
        card_obj.setScale({2.4,1,2.4})
        card_obj.lock()
        -- if move[ship.getVar('wind')] then
        --
        --     printToAll('found speed: '..ship.getVar('speed'),{1,1,1})
        -- end
        return true
    else
        printToAll('No move matching to speed, wind, or broke mast',{1,0.5,0.5})
        return false
    end
end
function Ship.clearAllArcs()
    for i,ship in ipairs(getAllObjects()) do
        if isShip(ship) then
            Clear_Arcs(ship)
        end
    end
end
