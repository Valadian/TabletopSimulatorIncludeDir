#include ../util/physics
#include action_ammo
function Log.onSave(item)
    local data = {}
    data["type"] = 'log'
    data["primary"] = Log.GetPrimary(item) and Log.GetPrimary(item).getGUID() or nil
    data["secondary"] = Log.GetSecondary(item) and Log.GetSecondary(item).getGUID() or nil
    data["ship"] = Log.GetShip(item) and Log.GetShip(item).getGUID() or nil
    data["shipStatSheet"] = Log.GetShipStatSheet(item) and Log.GetShipStatSheet(item).getGUID() or nil
    data["shipCard"] = Log.GetShipCard(item) and Log.GetShipCard(item).getGUID() or nil
    data["ship"] = Log.GetShip(item) and Log.GetShip(item).getGUID() or nil
    data["deckName"] = Log.GetDeckName(item)
    data["abackRight"] = Log.GetAbackRight(item) and Log.GetAbackRight(item).getGUID() or nil
    data["abackStraight"] = Log.GetAbackStraight(item) and Log.GetAbackStraight(item).getGUID() or nil
    data["abackLeft"] = Log.GetAbackLeft(item) and Log.GetAbackLeft(item).getGUID() or nil
    data["gunners_lacking_training"] = Log.GetGunnersLackingTraining(item)
    data["sailors_lacking_training"] = Log.GetSailorsLackingTraining(item)
    return data
end
function Log.onLoad(item, data)
    --printToAll("Loading log: "..guid,{1,1,1})
    if data["primary"] then
        Log.SetPrimary(item,getObjectFromGUID(data["primary"]))
    end
    if data["secondary"] then
        Log.SetSecondary(item,getObjectFromGUID(data["secondary"]))
    end
    if data["ship"] then
        Log.SetShip(item,getObjectFromGUID(data["ship"]))
    end
    if data["shipStatSheet"] then
        Log.SetShipStatSheet(item,getObjectFromGUID(data["shipStatSheet"]))
    end
    if data["shipCard"] then
        Log.SetShipCard(item,getObjectFromGUID(data["shipCard"]))
    end
    Log.SetDeckName(item,data["deckName"])
    if data["abackRight"] then
        Log.SetAbackRight(item,getObjectFromGUID(data['abackRight']))
    end
    if data["abackStraight"] then
        Log.SetAbackStraight(item,getObjectFromGUID(data['abackStraight']))
    end
    if data["abackLeft"] then
        Log.SetAbackLeft(item,getObjectFromGUID(data['abackLeft']))
    end
    Log.SetGunnersLackingTraining(item, data["gunners_lacking_training"])
    Log.SetSailorsLackingTraining(item, data["sailors_lacking_training"])
end
function isLog(log)
    return log.getDescription() == "Ship Log" -- and isInPlay(ship)
end

PRIMARY_OFFSET = {-2.77,0,10.36}
SECONDARY_OFFSET = {-10.09,0,10.36}
function Log.SetNextCard(log, card)
    if Log.GetPrimary(log)==nil then
        Log.SetPrimary(log, card)
        Log.PositionCard(log, card, PRIMARY_OFFSET)
    elseif Log.GetSecondary(log)==nil then
        Log.SetSecondary(log, card)
        Log.PositionCard(log, card, SECONDARY_OFFSET)
    end
    Log.CheckForAutoReady(log)
end
function Log.GetGunnersLackingTraining(log) return log.getVar('gunners_lacking_training') end
function Log.SetGunnersLackingTraining(log, bool) log.setVar('gunners_lacking_training', bool) end
function Log.GetSailorsLackingTraining(log) return log.getVar('sailors_lacking_training') end
function Log.SetSailorsLackingTraining(log, bool) log.setVar('sailors_lacking_training', bool) end
function Log.SetPrimary(log, card) log.setVar('primary',card) end
function Log.GetPrimary(log) return log.getVar('primary') end
function Log.SetSecondary(log, card) log.setVar('secondary',card) end
function Log.GetSecondary(log) return log.getVar('secondary') end
function Log.SetShip(log,ship) log.setVar('ship',ship) end
function Log.GetShip(log) return log.getVar('ship') end
function Log.SetShipCard(log,card) log.setVar('shipCard',card) end
function Log.GetShipCard(log) return log.getVar('shipCard') end
function Log.SetShipStatSheet(log,stat) log.setVar('shipStatSheet',stat) end
function Log.GetShipStatSheet(log) return log.getVar('shipStatSheet') end
function Log.SetDeckName(log,deckName) log.setVar('deckName',deckName) end
function Log.GetDeckName(log) return log.getVar('deckName') end
function Log.SetAbackRight(log,card) log.setVar('abackRight',card) end
function Log.SetAbackStraight(log,card) log.setVar('abackStraight',card) end
function Log.SetAbackLeft(log,card) log.setVar('abackLeft',card) end
function Log.GetAbackRight(log) return log.getVar('abackRight') end
function Log.GetAbackStraight(log) return log.getVar('abackStraight') end
function Log.GetAbackLeft(log) return log.getVar('abackLeft') end
function Log.SetReady(log,ready)
    log.setVar('ready',ready)
    if ready then
        CheckReady()
    else
        KillReadyCountdown()
    end
    UpdateNote()
    Log.drawButtons(log)
end
function Log.GetReady(log) return log.getVar('ready') end
function Log.SetDisabledAutoReady(log,ready)
    log.setVar('disable_auto_ready',ready)
end
function Log.GetDisabledAutoReady(log) return log.getVar('disable_auto_ready') end

function Log.GetPlannedVeer(log)
    if Log.GetPrimary(log)==nil then
        return nil
    else
        return Card.GetVeer(Log.GetPrimary(log))
    end
end
function Log.PositionCard(log, card, offset)
    card.setPositionSmooth(vector.add(log.getPosition(), vector.rotate(offset,log.getRotation()[2])), false, false)
    card.setRotationSmooth({0,log.getRotation()[2],180},false,false)
    card.setScale({2.4,1,2.4},false,false)
    card.clearButtons()
    card.lock()
end
function Log.PromoteSecondary(log)
    if Log.GetPrimary(log)~=nil then
        printToAll("Trying to Promote Secondary but Primary is not null",{1,0,0})
        return
    end
    if Log.GetSecondary(log)~=nil then
        local card = Log.GetSecondary(log)
        Log.SetPrimary(log, card)
        Log.SetSecondary(log, nil)
        Log.PositionCard(log, card, PRIMARY_OFFSET)
    end
end

function Log.drawButtons(log)
    log.clearButtons()
    local ship = Log.GetShip(log)
    local desc = ""
    if ship~=nil then
        local color = WHITE
        local font_color = BLACK
        if Ship.GetSpeed(ship)=='Full' then color = {10/255, 51/255, 127/255}; font_color = WHITE else color = WHITE; font_color = BLACK end
        log.createButton({['click_function'] = 'Action_SetLog_Full', ['label'] = 'Full', ['scale'] = {0.18,0.18,0.18}, ['position'] = {0.14, 0.4, 0.55}, ['color'] = color, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1100, ['height'] = 600, ['font_size'] = 250})
        if Ship.GetSpeed(ship)=='Battle' then color = {18/255, 88/255, 220/255}; font_color = WHITE else color = WHITE; font_color = BLACK end
        log.createButton({['click_function'] = 'Action_SetLog_Battle', ['label'] = 'Battle', ['scale'] = {0.18,0.18,0.18}, ['position'] = {0.57, 0.4, 0.55}, ['color'] = color, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1100, ['height'] = 600, ['font_size'] = 250})
        if Ship.GetSpeed(ship)=='Backing' then color = {99/255, 149/255, 242/255}; font_color = WHITE else color = WHITE; font_color = BLACK end
        log.createButton({['click_function'] = 'Action_SetLog_Backing', ['label'] = 'Backing', ['scale'] = {0.18,0.18,0.18}, ['position'] = {0.99, 0.4, 0.55}, ['color'] = color, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1100, ['height'] = 600, ['font_size'] = 250})
        if Ship.GetSpeed(ship)=='Anchored' then color = {9/255, 24/255, 52/255}; font_color = WHITE else color = WHITE; font_color = BLACK end
        log.createButton({['click_function'] = 'Action_SetLog_Anchored', ['label'] = 'Struck', ['scale'] = {0.18,0.18,0.18}, ['position'] = {1.41, 0.4, 0.55}, ['color'] = color, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1100, ['height'] = 600, ['font_size'] = 250})

        if Ship.GetBrokeMast(ship) then color = {0.2, 0.2, 0.25}; font_color = WHITE else color = WHITE; font_color = BLACK end
        log.createButton({['click_function'] = 'Action_SetLog_BrokenMast', ['label'] = 'Broke Mast', ['scale'] = {0.18,0.18,0.18}, ['position'] = {-2.15, 0.4, 0.1}, ['color'] = color, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1700, ['height'] = 600, ['font_size'] = 250})

        if Ship.GetAbackLastTurn(ship) then color = {1, 0, 0}; font_color = WHITE else color = WHITE; font_color = BLACK end
        log.createButton({['click_function'] = 'Action_Toggle_AbackLastTurn', ['label'] = 'Aback Last Turn', ['scale'] = {0.18,0.18,0.18}, ['position'] = {-1.45, 0.4, 0.1}, ['color'] = color, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1900, ['height'] = 600, ['font_size'] = 250})

        if Ship.GetHasFire(ship) then color = {1, 0, 0}; font_color = WHITE else color = WHITE; font_color = BLACK end
        log.createButton({['click_function'] = 'Action_Toggle_Fire', ['label'] = 'Fire', ['scale'] = {0.18,0.18,0.18}, ['position'] = {-2.35, 0.4, 0.4}, ['color'] = color, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 700, ['height'] = 600, ['font_size'] = 250})
        if Ship.GetHasLeak(ship) then color = {0.5, 0.6, 1}; font_color = WHITE else color = WHITE; font_color = BLACK end
        log.createButton({['click_function'] = 'Action_Toggle_Leak', ['label'] = 'Leak', ['scale'] = {0.18,0.18,0.18}, ['position'] = {-2.35, 0.4, 0.7}, ['color'] = color, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 700, ['height'] = 600, ['font_size'] = 250})

        if Log.GetGunnersLackingTraining(log) then color = ACTION_COLOR['Fire Port (Left)']; font_color = WHITE;  tooltip="Clear this flag to default" else color = WHITE; font_color = BLACK;tooltip = "Click to Mark this ship as having untrained gunners" end
        log.createButton({['tooltip'] = tooltip, ['click_function'] = 'Action_Toggle_GunnersLackingTraining', ['label'] = 'Gunners\nLacking\nTraining', ['scale'] = {0.18,0.18,0.18}, ['position'] = {2.35, 0.4, -0.8}, ['color'] = color, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 700, ['height'] = 600, ['font_size'] = 100})
        if Log.GetSailorsLackingTraining(log) then color = ACTION_COLOR['Repair']; font_color = WHITE; tooltip="Clear this flag to default"  else color = WHITE; font_color = BLACK; tooltip = "Click to Mark this ship as having untrained crew"end
        log.createButton({['tooltip'] = tooltip, ['click_function'] = 'Action_Toggle_SailorsLackingTraining', ['label'] = 'Sailors\nLacking\nTraining', ['scale'] = {0.18,0.18,0.18}, ['position'] = {2.35, 0.4, -0.45}, ['color'] = color, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 700, ['height'] = 600, ['font_size'] = 100})

        if Log.GetReady(log) then
            color = {0, 1, 0}; font_color = WHITE; tooltip = "Ship is READY!"
        else
            if Log.GetDisabledAutoReady(log) then
                color = RED; font_color = WHITE; tooltip = "Auto-Ready DISABLED"
            else
                color = WHITE; font_color = BLACK; tooltip = "Click to Ready Ship"
            end
        end
        log.createButton({['tooltip'] = tooltip, ['click_function'] = 'Action_SetLog_Ready', ['label'] = 'Ready', ['scale'] = {0.18,0.18,0.18}, ['position'] = {0.15,0,3.5}, ['color'] = color, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 2000, ['height'] = 2000, ['font_size'] = 700})

        desc = ship.getName().." ("..Ship.GetShipDefinition(ship)["PV"].."pts)"

    end
    log.createButton({['click_function'] = 'Action_ClearShip', ['label'] = desc, ['scale'] = {0.18,0.18,0.18}, ['position'] = {-1.6, 0.4, -1.3}, ['width'] = 0, ['height'] = 0, ['font_size'] = 250})
    log.createButton({['click_function'] = 'Action_ClearDeck', ['label'] = Log.GetDeckName(log) or "", ['scale'] = {0.18,0.18,0.18}, ['position'] = {-0.4, 0.4, -1.3}, ['width'] = 0, ['height'] = 0, ['font_size'] = 250})

    if Log.GetPrimary(log) then
        log.createButton({['click_function'] = 'Action_CardPlay', ['label'] = 'Play', ['scale'] = {0.35,0.35,0.35}, ['position'] = {0.51, 0.4, 1.4}, ['width'] = 800, ['height'] = 300, ['font_size'] = 250})
        log.createButton({['click_function'] = 'Action_CardPrimaryUndo', ['label'] = 'Undo', ['scale'] = {0.35,0.35,0.35}, ['position'] = {0.51, 0.4, 2.4}, ['width'] = 800, ['height'] = 300, ['font_size'] = 250})
    end

    if Log.GetSecondary(log) then
        log.createButton({['click_function'] = 'Action_CardSecondaryUndo', ['label'] = 'Undo', ['scale'] = {0.35,0.35,0.35}, ['position'] = {1.84, 0.4, 2.4}, ['width'] = 800, ['height'] = 300, ['font_size'] = 250})
    end

    log.createButton({['click_function'] = 'Action_SetStart', ['label'] = 'Start', ['scale'] = {0.18,0.18,0.18}, ['position'] = {-1.0, 0.4, -1.5}, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1100, ['height'] = 600, ['font_size'] = 250})
    log.createButton({['click_function'] = 'Action_SetPlanning', ['label'] = 'Planning', ['scale'] = {0.18,0.18,0.18}, ['position'] = {-0.6, 0.4, -1.5}, ['color'] = {1,0.5,0.5}, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1100, ['height'] = 600, ['font_size'] = 250})
    log.createButton({['click_function'] = 'Action_SetAction', ['label'] = 'Action', ['scale'] = {0.18,0.18,0.18}, ['position'] = {-0.2, 0.4, -1.5}, ['color'] = {0.5,1,0.5}, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1100, ['height'] = 600, ['font_size'] = 250})
    log.createButton({['click_function'] = 'Action_SetMovement', ['label'] = 'Move', ['scale'] = {0.18,0.18,0.18}, ['position'] = {0.2, 0.4, -1.5}, ['color'] = {0.5,0.5,1}, ['font_color'] = font_color, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1100, ['height'] = 600, ['font_size'] = 250})
    log.createButton({['click_function'] = 'Action_SetCombat', ['label'] = 'Combat', ['scale'] = {0.18,0.18,0.18}, ['position'] = {0.6, 0.4, -1.5}, ['color'] = {1,0,0}, ['font_color'] = {1,1,1}, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1100, ['height'] = 600, ['font_size'] = 250})
    log.createButton({['click_function'] = 'Action_SetReloading', ['label'] = 'Reload', ['scale'] = {0.18,0.18,0.18}, ['position'] = {1.0, 0.4, -1.5}, ['color'] = {1,0.5,0}, ['font_color'] = {1,1,1}, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1100, ['height'] = 600, ['font_size'] = 250})

    if log.getVar('initial_load') then
        local can_reload = false
        if not Log.isPortLoaded(log) then
            can_reload=true
            for key,offset in pairs(AMMO_SPAWN_OFFSETS) do
                local offset = vector.add(AMMO_SPAWN_ROW,vector.scale(offset,{PORT_DIR,1,1}))
                if relativeHitCast(log, offset, isAmmo) then
                    --local pos = Log.relativePosition(log,offset)
                    local buttonpos = Log.relativeButtonPosition(log,offset) --vector.add(vector.scale( offset,{-1/5.52,1/5.52,1/5.52}),{0,0.5,0})
                    log.createButton({['color'] = AMMO_COLOR[key], ['tooltip'] = key, ['click_function'] = 'Action_Reload_Port_'..key:gsub(' ','_'), ['label'] = 'Reload', ['scale'] = {0.18,0.18,0.18}, ['position'] = buttonpos, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 900, ['height'] = 400, ['font_size'] = 250})
                end
            end
        end
        if not Log.isStbdLoaded(log) then
            can_reload=true
            for key,offset in pairs(AMMO_SPAWN_OFFSETS) do
                local offset = vector.add(AMMO_SPAWN_ROW,vector.scale(offset,{STBD_DIR,1,1}))
                if relativeHitCast(log, offset, isAmmo) then
                    --local pos = Log.relativePosition(log,offset)
                    local buttonpos = Log.relativeButtonPosition(log,offset) --vector.add(vector.scale( offset,{-1/5.52,1,1/5.52}),{0,0.5,0})
                    log.createButton({['color'] = AMMO_COLOR[key], ['tooltip'] = key, ['click_function'] = 'Action_Reload_Stbd_'..key:gsub(' ','_'), ['label'] = 'Reload', ['scale'] = {0.18,0.18,0.18}, ['position'] = buttonpos, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 900, ['height'] = 400, ['font_size'] = 250})
                end
            end
        end
        if not can_reload then
            log.setVar('initial_load', nil)
        end
    end
    if current_phase=="reload" then
        if Log.canReloadPort(log) then
            --printToAll("Log.canReloadPort(log)")
            for key,offset in pairs(AMMO_SPAWN_OFFSETS) do
                local offset = vector.add(AMMO_SPAWN_ROW,vector.scale(offset,{PORT_DIR,1,1}))
                if relativeHitCast(log, offset, isAmmo) then
                    --local pos = Log.relativePosition(log,offset)
                    local buttonpos = Log.relativeButtonPosition(log,offset) --vector.add(vector.scale( offset,{-1/5.52,1/5.52,1/5.52}),{0,0.5,0})
                    log.createButton({['color'] = AMMO_COLOR[key], ['tooltip'] = key, ['click_function'] = 'Action_Reload_Port_'..key:gsub(' ','_'), ['label'] = 'Reload', ['scale'] = {0.18,0.18,0.18}, ['position'] = buttonpos, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 900, ['height'] = 400, ['font_size'] = 250})
                end
            end
        end
        if Log.canReloadStarboard(log) then
            for key,offset in pairs(AMMO_SPAWN_OFFSETS) do
                local offset = vector.add(AMMO_SPAWN_ROW,vector.scale(offset,{STBD_DIR,1,1}))
                if relativeHitCast(log, offset, isAmmo) then
                    --local pos = Log.relativePosition(log,offset)
                    local buttonpos = Log.relativeButtonPosition(log,offset) --vector.add(vector.scale( offset,{-1/5.52,1,1/5.52}),{0,0.5,0})
                    log.createButton({['color'] = AMMO_COLOR[key], ['tooltip'] = key, ['click_function'] = 'Action_Reload_Stbd_'..key:gsub(' ','_'), ['label'] = 'Reload', ['scale'] = {0.18,0.18,0.18}, ['position'] = buttonpos, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 900, ['height'] = 400, ['font_size'] = 250})
                end
            end
        end
    end
    if current_phase=="planning" then
        for key,offset in pairs(ACTION_SPAWN_OFFSETS) do
            offset = vector.add(ACTION_SPAWN_ROW,offset)
            if key~="No Boarding" and relativeHitCast(log, offset, isFaceUpAction) then
                local buttonpos = Log.relativeButtonPosition(log,offset)
                log.createButton({['color'] = ACTION_COLOR[key], ['tooltip'] = key, ['click_function'] = 'Action_Plan_'..key:gsub(' ','_'):gsub('%(',''):gsub('%)',''), ['label'] = 'Plan', ['scale'] = {0.18,0.18,0.18}, ['position'] = buttonpos, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 900, ['height'] = 400, ['font_size'] = 250})
            end
        end
        for i, offset in ipairs(ALL_ACTION_OFFSETS) do
            if relativeHitCast(log, offset, isAction) then
                buttonpos = Log.relativeButtonPosition(log, vector.add(offset,{0,0.1,0.25}))
                log.createButton({['color'] = RED, ['font_color'] = WHITE, ['click_function'] = 'Action_Undo_Action_'..tostring(i), ['label'] = 'Undo', ['scale'] = {0.18,0.18,0.18}, ['position'] = buttonpos, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 900, ['height'] = 400, ['font_size'] = 250})
            end
        end
    end
    if current_phase=="action" then
        for i, offset in ipairs(ALL_ACTION_OFFSETS) do
            action = relativeHitCast(log, offset, isAction)
            if action then
                buttonpos = Log.relativeButtonPosition(log, vector.add(offset,{0,0.1,0.25}))
                if action.getName()=="Repair" or action.getName()=="Fight Fire" then
                    log.createButton({['color'] = {0,0,1}, ['font_color'] = WHITE, ['click_function'] = 'Action_Delay_Action_'..tostring(i), ['label'] = 'Delay', ['scale'] = {0.18,0.18,0.18}, ['position'] = buttonpos, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 900, ['height'] = 400, ['font_size'] = 250})
                    --delay
                elseif action.getName()=="Raise Sails" or action.getName()=="Lower Sails"
                    or action.getName()=="Grog (Single Use)" or action.getName()=="Pump Water"
                    or action.getName()=="Boarding" then
                    log.createButton({['color'] = {0,1,0}, ['font_color'] = WHITE, ['click_function'] = 'Action_Execute_Action_'..tostring(i), ['label'] = 'Execute', ['scale'] = {0.18,0.18,0.18}, ['position'] = buttonpos, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 900, ['height'] = 400, ['font_size'] = 250})
                    --execute
                end
            end
        end
        if log.getVar('delayed_repair') then
            buttonpos = Log.relativeButtonPosition(log, vector.add(REPAIR_DELAYED,{0,0.1,0.25}))
            log.createButton({['color'] = {0,1,0}, ['font_color'] = WHITE, ['click_function'] = 'Action_Execute_Action_Delayed_Repair', ['label'] = 'Execute', ['scale'] = {0.18,0.18,0.18}, ['position'] = buttonpos, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 900, ['height'] = 400, ['font_size'] = 250})
        end
        if log.getVar('delayed_fight_fire') then
            buttonpos = Log.relativeButtonPosition(log, vector.add(FIGHT_FIRE_DELAYED,{0,0.1,0.25}))
            log.createButton({['color'] = {0,1,0}, ['font_color'] = WHITE, ['click_function'] = 'Action_Execute_Action_Delayed_Fight_Fire', ['label'] = 'Execute', ['scale'] = {0.18,0.18,0.18}, ['position'] = buttonpos, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 900, ['height'] = 400, ['font_size'] = 250})
        end
    end
    for i, offset in ipairs(ALL_ACTION_OFFSETS) do
        if not relativeHitCast(log, offset, isAction) then
            if Log.GetDelayedAction(log, i) then
                buttonpos = Log.relativeButtonPosition(log, vector.add(offset,{0,0.1,-0.6}))
                log.createButton({['color'] = {0,0,1}, ['tooltip'] = "Click to un-delay this action slot", ['font_color'] = WHITE, ['click_function'] = 'Action_ClearDelay_Action_'..tostring(i), ['label'] = 'D', ['scale'] = {0.18,0.18,0.18}, ['position'] = buttonpos, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1100, ['height'] = 1100, ['font_size'] = 900})
            elseif Log.GetDisabledAction(log, i) then
                buttonpos = Log.relativeButtonPosition(log, vector.add(offset,{0,0.1,-0.6}))
                log.createButton({['color'] = {0.5,0.5,0.5}, ['tooltip'] = "Click to re-enable this action slot", ['font_color'] = WHITE, ['click_function'] = 'Action_Enable_Action_'..tostring(i), ['label'] = 'X', ['scale'] = {0.18,0.18,0.18}, ['position'] = buttonpos, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 1100, ['height'] = 1100, ['font_size'] = 900})
            else
                buttonpos = Log.relativeButtonPosition(log, vector.add(offset,{0,0.1,0.25}))
                log.createButton({['color'] = {0,0,0}, ['font_color'] = WHITE, ['click_function'] = 'Action_Disable_Action_'..tostring(i), ['label'] = 'Disable', ['scale'] = {0.18,0.18,0.18}, ['position'] = buttonpos, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 900, ['height'] = 400, ['font_size'] = 250})
            end
        end
    end
end
function Action_Enable_Action_1(log, player_color) Action_Enable_Action(log, player_color, 1) end
function Action_Enable_Action_2(log, player_color) Action_Enable_Action(log, player_color, 2) end
function Action_Enable_Action_3(log, player_color) Action_Enable_Action(log, player_color, 3) end
function Action_Enable_Action_4(log, player_color) Action_Enable_Action(log, player_color, 4) end
function Action_Enable_Action(log, player_color, index)
    Log.SetDisabledAction(log, index, nil)
    Log.drawButtons(log)
end
function Action_Disable_Action_1(log, player_color) Action_Disable_Action(log, player_color, 1) end
function Action_Disable_Action_2(log, player_color) Action_Disable_Action(log, player_color, 2) end
function Action_Disable_Action_3(log, player_color) Action_Disable_Action(log, player_color, 3) end
function Action_Disable_Action_4(log, player_color) Action_Disable_Action(log, player_color, 4) end
function Action_Disable_Action(log, player_color, index)
    offset = ALL_ACTION_OFFSETS[index]
    action = relativeHitCast(log, offset, isAction)
    if action then
        printToColor("Can't disable filled slot",player_color,{1,0,0})
    else
        Log.SetDisabledAction(log, index, true)
    end
    Log.drawButtons(log)
end
function Action_Toggle_SailorsLackingTraining(log)
    Log.SetSailorsLackingTraining(log, not Log.GetSailorsLackingTraining(log))
    Log.drawButtons(log)
end
function Action_Toggle_GunnersLackingTraining(log)
    Log.SetGunnersLackingTraining(log, not Log.GetGunnersLackingTraining(log))
    Log.drawButtons(log)
end
function Action_Toggle_Fire(log)
    local ship = Log.GetShip(log)
    Ship.SetHasFire(ship, not Ship.GetHasFire(ship))
    Log.drawButtons(log)
end
function Action_Toggle_Leak(log)
    local ship = Log.GetShip(log)
    Ship.SetHasLeak(ship, not Ship.GetHasLeak(ship))
    Log.drawButtons(log)
end
function Action_Toggle_AbackLastTurn(log)
    local ship = Log.GetShip(log)
    Ship.SetAbackLastTurn(ship, not Ship.GetAbackLastTurn(ship))
    Log.drawButtons(log)
end
function Action_Delay_Action_1(log, player_color) Action_Delay_Action(log, player_color, 1) end
function Action_Delay_Action_2(log, player_color) Action_Delay_Action(log, player_color, 2) end
function Action_Delay_Action_3(log, player_color) Action_Delay_Action(log, player_color, 3) end
function Action_Delay_Action_4(log, player_color) Action_Delay_Action(log, player_color, 4) end
function Action_Delay_Action(log, player_color, index)
    offset = ALL_ACTION_OFFSETS[index]
    action = relativeHitCast(log, offset, isAction)
    if action then
        ship = Log.GetShip(log)
        printToAll(ship.getName().. " delayed: "..action.getName(), player_color)
        if action.getName()=="Repair" then
            Log.moveToken(log, action, vector.add(REPAIR_DELAYED,{0,1,0}), FACEUP, UNLOCKED)
        elseif action.getName()=="Fight Fire" then
            Log.moveToken(log, action, vector.add(FIGHT_FIRE_DELAYED,{0,1,0}), FACEUP, UNLOCKED)
        end
        Log.SetDelayedAction(log,index, action.getName())
    end
    Wait.time(function()
        Log.drawButtons(log)
        Log.CheckForAutoReady(log)
    end, 0.5,1)
end
function Action_ClearDelay_Action_1(log, player_color) Action_ClearDelay_Action(log, player_color, 1) end
function Action_ClearDelay_Action_2(log, player_color) Action_ClearDelay_Action(log, player_color, 2) end
function Action_ClearDelay_Action_3(log, player_color) Action_ClearDelay_Action(log, player_color, 3) end
function Action_ClearDelay_Action_4(log, player_color) Action_ClearDelay_Action(log, player_color, 4) end
function Action_ClearDelay_Action(log, player_color, index)
    Log.SetDelayedAction(log, index, nil)
    Log.drawButtons(log)
end
function Action_Execute_Action_Delayed_Repair(log, player_color)
    log.setVar('delayed_repair',nil)
    Log.SetDelayedActionByName(log, "Repair", nil)
    Action_Execute_Action(log, player_color, REPAIR_DELAYED)
end
function Action_Execute_Action_Delayed_Fight_Fire(log, player_color)
    log.setVar('delayed_fight_fire',nil)
    Log.SetDelayedActionByName(log, "Fight Fire", nil)
    Action_Execute_Action(log, player_color, FIGHT_FIRE_DELAYED)
end
function Action_Execute_Action_1(log, player_color) Action_Execute_Action(log, player_color, ALL_ACTION_OFFSETS[1]) end
function Action_Execute_Action_2(log, player_color) Action_Execute_Action(log, player_color, ALL_ACTION_OFFSETS[2]) end
function Action_Execute_Action_3(log, player_color) Action_Execute_Action(log, player_color, ALL_ACTION_OFFSETS[3]) end
function Action_Execute_Action_4(log, player_color) Action_Execute_Action(log, player_color, ALL_ACTION_OFFSETS[4]) end
function Action_Execute_Action(log, player_color, offset)
    ship = Log.GetShip(log)
    action = relativeHitCast(log, offset, isAction)
    printToAll(ship.getName().." performed: "..action.getName(), player_color)
    if action then
        Log.returnAAction(log, action)
    end
    Wait.time(function()
        Log.drawButtons(log)
        Log.CheckForAutoReady(log)
    end, 0.5,1)
end

function Action_Undo_Action_1(log) Action_Undo_Action(log, ALL_ACTION_OFFSETS[1]) end
function Action_Undo_Action_2(log) Action_Undo_Action(log, ALL_ACTION_OFFSETS[2]) end
function Action_Undo_Action_3(log) Action_Undo_Action(log, ALL_ACTION_OFFSETS[3]) end
function Action_Undo_Action_4(log) Action_Undo_Action(log, ALL_ACTION_OFFSETS[4]) end
function Action_Undo_Action(log, offset)
    action = relativeHitCast(log, offset, isAction)
    if action then
        action_offset = vector.add(ACTION_SPAWN_ROW,ACTION_SPAWN_OFFSETS[action.getName()])
        Log.moveToken(log, action, action_offset, FACEUP, LOCKED)

    end
    Wait.time(function()
        Log.drawButtons(log)
        KillReadyCountdown()
    end, 0.5, 1)
end
function Action_Plan_Repair(log) Action_Plan_Action(log, "Repair") end
function Action_Plan_Pump_Water(log) Action_Plan_Action(log, "Pump Water") end
function Action_Plan_Fight_Fire(log) Action_Plan_Action(log, "Fight Fire") end
function Action_Plan_Musketry_Fire(log) Action_Plan_Action(log, "Musketry Fire") end
function Action_Plan_Fire_Port_Left(log) Action_Plan_Action(log, "Fire Port (Left)") end
function Action_Plan_Reload_Port_Left(log) Action_Plan_Action(log, "Reload Port (Left)") end
function Action_Plan_Fire_Starboard_Right(log) Action_Plan_Action(log, "Fire Starboard (Right)") end
function Action_Plan_Reload_Starboard_Right(log) Action_Plan_Action(log, "Reload Starboard (Right)") end
function Action_Plan_Raise_Sails(log) Action_Plan_Action(log, "Raise Sails") end
function Action_Plan_Lower_Sails(log) Action_Plan_Action(log, "Lower Sails") end
function Action_Plan_Boarding(log) Action_Plan_Action(log, "Boarding") end
function Action_Plan_Grog_Single_Use(log) Action_Plan_Action(log, "Grog (Single Use)") end
LOCKED = true
UNLOCKED = false
function Action_Plan_Action(log, name)
    action_offset = vector.add(ACTION_SPAWN_ROW,ACTION_SPAWN_OFFSETS[name])
    action = relativeHitCast(log, action_offset, isAction)
    if action then
        for i,offset in ipairs(ALL_ACTION_OFFSETS) do
            if not Log.CheckSlotIsReserved(log, i) then
                Log.moveToken(log, action, vector.add(offset,{0,0.5,0}), FACEDOWN, UNLOCKED)
                break
            end
        end
    end
    Wait.time(function()
        Log.drawButtons(log)
        Log.CheckForAutoReady(log)
    end, 0.25, 1)
end
function Action_Reload_Port_Ball_Shot(log, player_color)
    Action_Reload(log, player_color, "Ball Shot", PORT_DIR)
    Log.returnAction(log, 'Reload Port (Left)')
end
function Action_Reload_Port_Double_Shot(log, player_color)
    Action_Reload(log, player_color, "Double Shot", PORT_DIR)
    Log.returnAction(log, 'Reload Port (Left)')
end
function Action_Reload_Port_Chain_Shot(log, player_color)
    Action_Reload(log, player_color, "Chain Shot", PORT_DIR)
    Log.returnAction(log, 'Reload Port (Left)')
end
function Action_Reload_Port_Grape_Shot(log, player_color)
    Action_Reload(log, player_color, "Grape Shot", PORT_DIR)
    Log.returnAction(log, 'Reload Port (Left)')
end
function Action_Reload_Stbd_Ball_Shot(log, player_color)
    Action_Reload(log, player_color, "Ball Shot", STBD_DIR)
    Log.returnAction(log, 'Reload Starboard (Right)')
end
function Action_Reload_Stbd_Double_Shot(log, player_color)
    Action_Reload(log, player_color, "Double Shot", STBD_DIR)
    Log.returnAction(log, 'Reload Starboard (Right)')
end
function Action_Reload_Stbd_Chain_Shot(log, player_color)
    Action_Reload(log, player_color, "Chain Shot", STBD_DIR)
    Log.returnAction(log, 'Reload Starboard (Right)')
end
function Action_Reload_Stbd_Grape_Shot(log, player_color)
    Action_Reload(log, player_color, "Grape Shot", STBD_DIR)
    Log.returnAction(log, 'Reload Starboard (Right)')
end
function Action_Reload(log, player_color, name, side)
    local ship = Log.GetShip(log)

    --printToAll("Action_Reload_"..name..tostring(side))
    local offset = vector.add(AMMO_SPAWN_ROW,vector.scale(AMMO_SPAWN_OFFSETS[name],{side,1,1}))
    local to_offset = PORT_AMMO_OFFSET
    local side_text = "Port"
    if side==STBD_DIR then
        to_offset = STBD_AMMO_OFFSET
        side_text = "Starboard"
    end
    printToAll(ship.getName().." reloads "..side_text.. " cannons",player_color)
    to_offset = vector.add(to_offset,{0,1,0})
    relativeHitCast(log, offset, isAmmo, |obj| Log.moveToken(log, obj, to_offset, FACEDOWN, false))
    Wait.time(function()
        Log.drawButtons(log)
        Log.CheckForAutoReady(log)
    end, 0.5, 1)
end
function Log.AllLogsReady()
    local ready = true
    for i,log in ipairs(getAllObjects()) do
        if isLog(log) then
            ready = ready and Log.GetReady(log)
        end
    end
    return ready
end
count_down = nil
countdown_pid = nil
function KillReadyCountdown()
    if countdown_pid then
        Wait.stop(countdown_pid)
        countdown_pid = nil
    end
    count_down = nil
end
function DecrementCountdown()
    count_down=count_down-1
    UpdateNote()
    if count_down == 0 then
        if Log.AllLogsReady() then
            if current_phase == "start" then
                Action_CalculateWind(wind_speed)
                Action_SetPlanning()
            elseif current_phase == "planning" then
                Action_SetAction()
            elseif current_phase == "action" then
                Action_SetMovement()
            elseif current_phase == "move" then
                Action_SetCombat()
            elseif current_phase == "combat" then
                Action_SetReloading()
            elseif current_phase == "reload" then
                Action_SetStart()
            end
        end
    end
end
function CheckReady()
    if countdown_pid==nil and Log.AllLogsReady() then
        count_down = 3
        countdown_pid = Wait.time(DecrementCountdown, 1, 3)
    end
end
function Log.CheckAllForAutoReady()
    for i,log in ipairs(getAllObjects()) do
        if isLog(log) then
            Log.CheckForAutoReady(log)
        end
    end
end
function Log.CheckForAutoReady(log)
    if not Log.GetReady(log)  and not Log.GetDisabledAutoReady(log) then
        ship = Log.GetShip(log)
        if current_phase=="start" then
            if Ship.GetHasFire(ship) or Ship.GetHasLeak(ship) or log.getVar('initial_load') then
                return false
            end
            --Check fire/water
            --wind ready button
        elseif current_phase=="planning" then
            -- Called when you plan maneuver or plan action
            for i, offset in ipairs(ALL_ACTION_OFFSETS) do
                if not Log.CheckSlotIsReserved(log, i) then
                    return false
                end
            end
            --check planned maneuvers
            if Ship.GetSpeed(ship)~='Anchored' then
                if not Log.GetSecondary(log) or not Log.GetPrimary(log) then
                    return false
                end
            end
        elseif current_phase=="action" then
            --Called when you execute or delay action
            for i, offset in ipairs(ALL_ACTION_OFFSETS) do
                action = relativeHitCast(log, offset, isAction)
                if action and (action.getName()=="Repair" or action.getName()=="Fight Fire" or
                                action.getName()=="Raise Sails" or action.getName()=="Lower Sails" or
                                action.getName()=="'Grog (Single Use)'" or action.getName()=="Pump Water" or
                                action.getName()=="Boarding") then
                    return false
                end
            end
            if log.getVar('delayed_repair') or log.getVar('delayed_fight_fire') then
                return false
            end
        elseif current_phase=="move" then
            --Not called. Action_Done sets ready directly
            return false
        elseif current_phase=="combat" then
            --Called when you fire artillery or musketry
            if (Log.isFiringPort(log) and Log.isPortLoaded(log)) or
               (Log.isFiringStarboard(log) and Log.isStbdLoaded(log)) or
                Log.canFireMusketry(log) then
                return false
            end
        elseif current_phase=="reload" then
            --Called when you reload
            if Log.canReloadPort(log) or Log.canReloadPort(log) then
                return false
            end
        end
        Log.SetReady(log,true)
        -- Log.drawButtons(log)
        -- UpdateNote()
    end
end
function Action_SetStart()
    broadcastToAll("Transitioning to Start Phase")
    current_phase = "start"
    ResetReady()
    RedrawShips()
    Ship.clearAllArcs()
    for i,log in ipairs(getAllObjects()) do
        if isLog(log) then
            Log.clearAllActions(log)
        end
    end
    Log.CheckAllForAutoReady()
end
function Action_SetPlanning()
    broadcastToAll("Transitioning to Planning Phase",{1,0.5,0.5})
    current_phase = "planning"
    ResetReady()
    RedrawShips()
    Ship.clearAllArcs()
    for i,log in ipairs(getAllObjects()) do
        if isLog(log) then
            -- mark reserved delayed action slots
            repair = relativeHitCast(log, REPAIR_DELAYED, isAction)
            log.setVar('delayed_repair',repair~=nil)
            fight_fire = relativeHitCast(log, FIGHT_FIRE_DELAYED, isAction)
            log.setVar('delayed_fight_fire',fight_fire~=nil)
        end
    end
    Log.CheckAllForAutoReady()
end
function Action_SetAction()
    broadcastToAll("Transitioning to Action Phase",{0.5,1,0.5})
    current_phase = "action"
    ResetReady()
    RedrawShips()
    Ship.clearAllArcs()
    Log.flipAllActionsFaceup()
    Log.CheckAllForAutoReady()
end
function Action_SetMovement()
    broadcastToAll("Transitioning to Movement Phase",{0.5,0.5,1})
    current_phase = "move"
    ResetReady()
    RedrawShips()
    Ship.clearAllArcs()
end
function Action_SetCombat()
    broadcastToAll("Transitioning to Combat Phase",{1,0,0})
    current_phase = "combat"
    ResetReady()
    RedrawShips()
    Log.CheckAllForAutoReady()
end
-- FULLY AUTOMATED
function Action_SetReloading()
    broadcastToAll("Transitioning to Reloading Phase",{1,0.5,0})
    current_phase = "reload"
    Log.unloadAllAmmo()

    RedrawShips()
    Ship.clearAllArcs()
    Wait.time(function()
        ResetReady()
        Log.CheckAllForAutoReady()
    end, 1, 1)
end
function RedrawShips()
    for i,item in ipairs(getAllObjects()) do
        if isShip(item) then
            Ship.drawButtons(item)
        end
    end
end
-- function CheckReady()
--     local ready= true
--     for i,log in ipairs(getAllObjects()) do
--         if isLog(log) then
--             ready = ready and Log.GetReady(log)
--         end
--     end
--     if ready then
--         if current_phase == "start" then
--             Action_SetPlanning()
--         elseif current_phase == "planning" then
--             Action_SetAction()
--         elseif current_phase == "action" then
--             Action_SetMovement()
--         elseif current_phase == "move" then
--             Action_SetCombat()
--         elseif current_phase == "combat" then
--             Action_SetReloading()
--         elseif current_phase == "reload" then
--             Action_SetStart()
--         end
--     end
-- end
function ResetReady()
    for i,log in ipairs(getAllObjects()) do
        if isLog(log) then
            Log.SetDisabledAutoReady(log, false)
            Log.SetReady(log,false)
            --Log.drawButtons(log)
        end
    end
    --UpdateNote()
end
function Action_SetLog_Ready(log)
    ready = not Log.GetReady(log)
    if not ready then
        Log.SetDisabledAutoReady(log, true)
    end
    Log.SetReady(log,ready)
    if ready then
        CheckReady()
    end
    --If player manually disables ready, then don't let auto-transition trigger
    -- Log.drawButtons(log)
    -- UpdateNote()
end
function Action_ClearShip(log)
    --Disable Deck/Ship clearing
    -- Log.SetShip(log, nil)
    -- Log.drawButtons(log)
end
function Action_ClearDeck(log)
    --Disable Deck/Ship clearing
    -- Log.SetDeckName(log, nil)
    -- Log.drawButtons(log)
end
function Action_CardPlay(log)
    local card = Log.GetPrimary(log)
    if card~=nil then
        local success = Log.PlayToShip(log, card)
        if success then
            Log.SetPrimary(log,nil)
            Log.PromoteSecondary(log)
        end
        Log.drawButtons(log)
        Card.RedrawResetCards()
    end
end
function Log.PlayToShip(log, card)
    --printToAll("Log.PlayToShip")
    Card.SetReset(card,false)
    card.setScale({2.4,1,2.4})
    local ship = Log.GetShip(log)
    card.clearButtons()
    if Ship.GetCard(ship)~=nil then
        printToAll("Ship already has a card",{1,0,0})
        return false
    end
    success = positionCard(card, ship)
    if success then
        Ship.SetReadyToMove(ship,true)
        Ship.SetCard(ship, card)
        Ship.drawButtons(ship)
    end
    Log.drawButtons(log)
    Card.RedrawResetCards()
    return success
end
function Action_CardPrimaryUndo(log)
    local card = Log.GetPrimary(log)
    Card.reset(card)
    Log.SetPrimary(log,nil)
    Log.drawButtons(log)
    UpdateNote()
    Card.SetReset(card, true)
    Card.RedrawResetCards()
end
function Action_CardSecondaryUndo(log)
    local card = Log.GetSecondary(log)
    Card.reset(card)
    Log.SetSecondary(log,nil)
    Log.drawButtons(log)
    UpdateNote()
    Card.SetReset(card, true)
    Card.RedrawResetCards()
end
function Action_SetLog_Full(log)
    Log.SetSpeed(log, 'Full')
    UpdateNote()
end
function Action_SetLog_Battle(log)
    Log.SetSpeed(log, 'Battle')
    UpdateNote()
end
function Action_SetLog_Backing(log)
    Log.SetSpeed(log, 'Backing')
    UpdateNote()
end
function Action_SetLog_Anchored(log)
    Log.SetSpeed(log, 'Anchored')
    UpdateNote()
end
function Log.SetSpeed(log, speed)
    local ship = Log.GetShip(log)
    Ship.SetSpeed(ship, speed)
    Log.UpdateShipVars(log)
end
function Log.CheckSlotIsReserved(log, index)
    offset = ALL_ACTION_OFFSETS[index]
    return relativeHitCast(log, offset, isAction) or Log.GetDelayedAction(log, index) or Log.GetDisabledAction(log, index)
end
function Log.GetDisabledAction(log, index)
    return log.getTable('disabled_actions')~=nil and log.getTable('disabled_actions')[index]
end
function Log.SetDisabledAction(log, index, disabled)
    disabled_actions = log.getTable('disabled_actions')
    if disabled_actions==nil then
        disabled_actions = {}
    end
    disabled_actions[index] = disabled
    log.setTable('disabled_actions',disabled_actions)
end
function Log.GetDelayedAction(log, index)
    return log.getTable('delayed_actions')~=nil and log.getTable('delayed_actions')[index]~=nil
end
function Log.SetDelayedAction(log, index, delayed)
    delayed_actions = log.getTable('delayed_actions')
    if delayed_actions==nil then
        delayed_actions = {}
    end
    delayed_actions[index] = delayed
    log.setTable('delayed_actions',delayed_actions)
end
function Log.SetDelayedActionByName(log, name, delayed)
    delayed_actions = log.getTable('delayed_actions')
    if delayed_actions==nil then
        delayed_actions = {}
    end
    for i,action_name in pairs(delayed) do
        if action_name=="Repair" then
            delayed_actions[i]=nil
            log.setTable('delayed_actions',delayed_actions)
            break
        end
    end
end
function Log.UpdateShipVars(log)
    local ship = Log.GetShip(log)
    Log.drawButtons(log)
    local card = Ship.GetCard(ship)
    if card~=nil then
        positionCard(card,ship)
        Ship.drawButtons(ship)
    end
end
function Action_SetLog_BrokenMast(log)
    local ship = Log.GetShip(log)
    Ship.SetBrokeMast(ship, not Ship.GetBrokeMast(ship))
    Log.UpdateShipVars(log)
end
