function Deck.onObjectDrop(dropped_object)
    local log = findNearestLog(dropped_object.getPosition())
    if log~=nil and vector.length(vector.sub(log.getPosition(),dropped_object.getPosition()))<16 then
        Log.SetDeckName(log, dropped_object.getName())
        Log.drawButtons(log)
        Deck.SetLog(dropped_object,log)
        dropped_object.clearButtons()
        dropped_object.createButton({['click_function'] = 'Action_Layout', ['label'] = 'Layout', ['position'] = {0, 0.3, 2}, ['function_owner'] = self, ['rotation'] =  {0, 0, 0}, ['width'] = 800, ['height'] = 250, ['font_size'] = 250})
    end
end

function isDeck(deck)
    return deck.tag == 'Deck' and deck.getDescription()=="maneuver" -- and isInPlay(ship)
end
function Deck.SetLog(deck, log) deck.setVar('shiplog',log) end
function Deck.GetLog(deck) return deck.getVar('shiplog') end

CARD_OFFSETS = {['0L'] = -6, ['1L'] = -5,['2L'] = -4,['3L'] = -3,['4L'] = -2,
                ['5L'] = -1, ['5S'] = 0, ['5R'] = 1,
                ['6R'] = 2, ['7R'] = 3,['8R'] = 4,['9R'] = 5,['10R'] = 6,
                ['BM1L'] = -4, ['BM2L'] = -3, ['BM3R'] = -2, ['BM4R'] = -1,
                ['BM5L2'] = 1, ['BM6L2'] = 2, ['BM7R2'] = 3, ['BM8R2'] = 4,
                ['Aback4'] = -1, ['Aback5'] = 0, ['Aback6'] = 1 }
cardToMove = nil
function Action_Layout(deck)
    --printToAll('Deck==nil: '..tostring(Card.GetLog(deck)==nil),{1,1,1})
    --printToAll('Deck: '..tostring(Card.GetLog(deck)),{1,1,1})
    local log = Deck.GetLog(deck)
    if not log then
        printToAll('Drop deck on ship log before layout',{1,0,0})
        return
    end
    local veers = {}
    local deckSize = #deck.getObjects()
    for i,card in ipairs(deck.getObjects()) do
        local desc = card.description
        --printToAll("Desc: '"..desc.."'",{0.5,0.75,1})
        local veer = desc:match '%u(B?M?A?b?a?c?k?%d+%u?2?)'
        --printToAll("Veer:"..tostring(veer),{1,1,1})
        if veer then
            local i_x_off = CARD_OFFSETS[veer]*0.8
            local i_y_off = 3
            if veers[veer]~=nil then i_y_off = 2 end
            if veer:match 'BM.*' then i_y_off = 1 end
            if veer:match 'Aback.' then i_y_off = 0 end
            local offset = {i_x_off*-5/2, 0, i_y_off*-7.5/2}
            offset = vector.rotate(offset,deck.getRotation()[2])
            veers[veer] = 1
            local new_pos = vector.add(deck.getPosition(), offset)
            --printToAll("placing card: "..card.guid,{1,1,1})
            local parameters = {}
            parameters.position = new_pos
            --parameters.scale = {1.12,0,1.12}
            parameters.guid = card.guid
            parameters.smooth = true
            parameters.callback = 'callback_Card_AssignLogFromParams'--'Log.SetCard'--'CardSetLog'
            parameters.callback_owner = Global
            parameters.params = {['log']=log, ['pos']=new_pos, ['rot']=deck.getRotation()[2]}
            deck.takeObject(parameters)
        end
    end
    deck.destruct()
end

function callback_Card_AssignLogFromParams(card, params)
    card.lock()
    Card.SetLog(card,params.log)
    local desc = card.getDescription()
    local abackVeer = desc:match '.(Aback.)'
    if abackVeer~=nil then
        if abackVeer=="Aback4" then
            Log.SetAbackLeft(params.log,card)
        elseif abackVeer=="Aback5" then
            Log.SetAbackStraight(params.log,card)
        elseif abackVeer=="Aback6" then
            Log.SetAbackRight(params.log,card)
        end
    end
    Card.SetOriginalPos(card,params.pos)
    Card.SetOriginalRot(card,params.rot)
    --card.setScale({1.12,1,1.12})
    --Card.drawButtons(card,true)
    --card.lock()
    Card.SetReset(card,true)
    Card.reset(card)
end
