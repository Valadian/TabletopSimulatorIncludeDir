ACTION_SPAWN_OFFSETS = {
    ['Repair'] = {-3.6,0,4.8},
    ['Pump Water'] = {-6.0,0,4.8},
    ['Fight Fire'] = {-8.4,0,4.8},
    ['Musketry Fire'] = {8.4,0,0},
    ['Fire Port (Left)'] = {6,0,-1.2},
    ['Reload Port (Left)'] = {6,0,1.2},
    ['Fire Starboard (Right)'] = {3.6,0,-1.2},
    ['Reload Starboard (Right)'] = {3.6,0,1.2},
    ['Raise Sails'] = {-3.6,0,-1.2},
    ['Lower Sails'] = {-3.6,0,1.2},
    ['Boarding'] = {-6,0,-1.2},
    ['No Boarding'] = {-6,0,1.2},
    ['Grog (Single Use)'] = {-8.4,0,0}
}
ACTION_COLOR = {
    ['Repair'] = {161/255,162/255,84/255},
    ['Pump Water'] ={0.5,0.5,1},-- {161/255,162/255,84/255},
    ['Fight Fire'] = {1,0.5,0.5},--{161/255,162/255,84/255},
    ['Musketry Fire'] = {108/255, 138/255, 174/255}, --{161/255,162/255,84/255},
    ['Fire Port (Left)'] = {233/255,79/255,53/255},
    ['Reload Port (Left)'] = {247/255,242/255,64/255},
    ['Fire Starboard (Right)'] = {233/255,79/255,53/255},
    ['Reload Starboard (Right)'] = {247/255,242/255,64/255},
    ['Raise Sails'] = {158/255,218/255,229/255},
    ['Lower Sails'] = {158/255,218/255,229/255},
    ['Boarding'] = {161/255,162/255,84/255},
    ['No Boarding'] = {161/255,162/255,84/255},
    ['Grog (Single Use)'] = {161/255,162/255,84/255}

}
AMMO_SPAWN_OFFSETS = {
    ['Ball Shot'] = {1.8,0,-1.2},
    ['Double Shot'] = {4.2,0,-1.2},
    ['Grape Shot'] = {1.8,0,1.2},
    ['Chain Shot'] = {4.2,0,1.2}
}
AMMO_COLOR = {
    ['Ball Shot'] = {246/255,230/255,9/255},
    ['Double Shot'] = {244/255,147/255,32/255},
    ['Grape Shot'] = {166/255,43/255,156/255},
    ['Chain Shot'] = {226/255,49/255,70/255}
}
ACTION_SPAWN_ROW = {-0.8,0,19.5}
AMMO_SPAWN_ROW = {4,0,24.3}
PORT_DIR=1
STBD_DIR=-1
function Log.positionActions(deck, log)
    for i,card in ipairs(deck.getObjects()) do
        if card.description=='action' then
            --printToAll("Spawning: "..card.name)
            local offset = vector.add(ACTION_SPAWN_ROW,ACTION_SPAWN_OFFSETS[card.name])
            local parameters = {}
            local pos = Log.relativePosition(log,offset)
            local rot = deck.getRotation()[2]
            parameters.position = pos
            parameters.rotation = {0,rot,0}
            parameters.guid = card.guid
            parameters.smooth = true
            parameters.callback = 'callback_action_ammo_lock'
            parameters.params = {['log']=log, ['pos']=pos, ['rot']=rot}
            deck.takeObject(parameters)
        end
    end
    deck.destruct()
end
function callback_action_ammo_lock(card, params)
    card.lock()
    Wait.frames(function()
        card.setPosition(params.pos)
        card.setRotation({0,params.rot,0})
    end, 2)
end
function Log.resetAction(action)
    local offset = vector.add(ACTION_SPAWN_ROW,ACTION_SPAWN_OFFSETS[action.getName()])
    action.lock()
    action.setPositionSmooth(Log.relativePosition(log,offset))
end
function Log.resetAmmo(ammo,stbd)
    --printToAll("Log.resetAmmo: "..ammo.getName())
    local side = STBD_DIR
    if not stbd then
        side = PORT_DIR
    end
    local offset = vector.add(AMMO_SPAWN_ROW,vector.scale(AMMO_SPAWN_OFFSETS[ammo.getName()],{side,1,1}))
    ammo.lock()
    ammo.setPositionSmooth(Log.relativePosition(log,offset))
end
function Log.positionAmmo(deck, log, side)
    for i,card in ipairs(deck.getObjects()) do
        if card.description=='ammo' then
            local offset = vector.add(AMMO_SPAWN_ROW,vector.scale(AMMO_SPAWN_OFFSETS[card.name],{side,1,1}))
            local parameters = {}
            local pos = Log.relativePosition(log,offset)
            local rot = deck.getRotation()[2]
            parameters.position = pos
            parameters.rotation = {0,rot,0}
            parameters.guid = card.guid
            parameters.smooth = true
            parameters.callback = 'callback_action_ammo_lock'
            parameters.params = {['log']=log, ['pos']=pos, ['rot']=rot}
            deck.takeObject(parameters)
        end
    end
    deck.destruct()
end

PORT_AMMO_OFFSET = {4.36,0,1.82}
STBD_AMMO_OFFSET = {2.04,0,1.82}
PORT_AMMO_SRC_OFFSET = {4.36,2,4.5}
STBD_AMMO_SRC_OFFSET = {2.04,2,4.5}
FACEUP = true
FACEDOWN = false
ACTION_1_OFFSET = {-0.83,0,4.97}
ACTION_2_OFFSET = {-3.15,0,4.97}
ACTION_3_OFFSET = {-5.46,0,4.97}
ACTION_4_OFFSET = {-7.84,0,4.97}
ALL_ACTION_OFFSETS = {ACTION_1_OFFSET,ACTION_2_OFFSET,ACTION_3_OFFSET,ACTION_4_OFFSET}
function isFaceUpAmmo(obj)
    --printToAll("isFaceUpAmmo: "..obj.getName().." "..tostring(obj.getRotation()[3]).." "..tostring(math.approxeq(obj.getRotation()[3],0)))
    return obj.getDescription()=="ammo" and math.approxeq(obj.getRotation()[3],0)
end
function isFaceDownAmmo(obj)
    return obj.getDescription()=="ammo" and obj.getRotation()[3]==180
end
function isAmmo(obj)
    return obj.getDescription()=="ammo"
end
function isAction(obj)
    return obj.getDescription()=="action"
end
function Log.hasAction(log, cmdName)
    local a1 = relativeHitCast(log, ACTION_1_OFFSET, |obj| obj.getName()==cmdName)
    local a2 = relativeHitCast(log, ACTION_2_OFFSET, |obj| obj.getName()==cmdName)
    local a3 = relativeHitCast(log, ACTION_3_OFFSET, |obj| obj.getName()==cmdName)
    local a4 = relativeHitCast(log, ACTION_4_OFFSET, |obj| obj.getName()==cmdName)
    return a1 or a2 or a3 or a4
end
function Log.isFiringPort(log)
    return current_difficulty~="Advanced" or Log.hasAction(log, "Fire Port (Left)")
end
function Log.isFiringStarboard(log)
    return current_difficulty~="Advanced" or Log.hasAction(log, "Fire Starboard (Right)")
end
function Log.canReloadPort(log)
    return (current_difficulty~="Advanced" or Log.hasAction(log, "Reload Port (Left)")) and not Log.isPortLoaded(log)
end
function Log.canReloadStarboard(log)
    return (current_difficulty~="Advanced" or Log.hasAction(log, "Reload Starboard (Right)")) and not Log.isStbdLoaded(log)
end
function Log.canFireMusketry(log)
    return current_difficulty~="Advanced" or Log.hasAction(log, "Musketry Fire")
end
function Log.isPortLoaded(log)
    return relativeHitCast(log, PORT_AMMO_OFFSET, isFaceDownAmmo) --|obj| obj.getDescription()=="ammo" and obj.getRotation()[3]==180)
end
function Log.isStbdLoaded(log)
    return relativeHitCast(log, STBD_AMMO_OFFSET, isFaceDownAmmo) --|obj| obj.getDescription()=="ammo" and obj.getRotation()[3]==180)
end
function Log.flipPort(log)
    return relativeHitCast(log, PORT_AMMO_OFFSET, isFaceDownAmmo, |obj| Log.moveToken(log, obj, nil, FACEUP)) --|obj| obj.setRotationSmooth({obj.getRotation()[1],obj.getRotation()[2],0}))
end
function Log.flipStbd(log)
    return relativeHitCast(log, STBD_AMMO_OFFSET, isFaceDownAmmo, |obj| Log.moveToken(log, obj, nil, FACEUP)) --obj.setRotationSmooth({obj.getRotation()[1],obj.getRotation()[2],0}))
end
function Log.flipAllActionsFaceup()
    for i,log in ipairs(getAllObjects()) do
        if isLog(log) then
            for _,action_off in ipairs(ALL_ACTION_OFFSETS) do
                icon = relativeHitCast(log, action_off, isAction, |obj| Log.moveToken(log, obj, nil, FACEUP))
            end
        end
    end
end
function Log.unloadAllAmmo()
    for i,log in ipairs(getAllObjects()) do
        if isLog(log) then
            Log.unloadAmmo(log)
        end
    end
end
function Log.relativePosition(log, pos)
    return vector.add(log.getPosition() , vector.rotate(pos, log.getRotation()[2]))
end
function Log.relativeButtonPosition(log, offset)
    return vector.add(vector.scale( offset,{-1/5.52,1,1/5.52}),{0,0.5,0.1})
end
function Log.moveToken(log, obj, rel_pos, faceup, lock)
    if rel_pos~=nil then
        new_pos = Log.relativePosition(log, rel_pos)
        --printToAll("Setting: "..obj.getName().." to: {"..new_pos[1]..","..new_pos[2]..","..new_pos[3].."}")
        obj.setPositionSmooth(new_pos,false,true);
    end
    if faceup~=nil then
        rotation = 0
        if not faceup then
            rotation = 180
        end
        obj.setRotationSmooth({obj.getRotation()[1],obj.getRotation()[2],rotation})
    end
    if lock~=nil then
        if lock then
            obj.lock()
        else
            obj.unlock()
        end
    end
end
function Log.returnAction(log, name)
    for i,offset in ipairs(ALL_ACTION_OFFSETS) do
        action = relativeHitCast(log, offset, isAction)
        if action and action.getName()==name then
            offset = vector.add(ACTION_SPAWN_ROW,ACTION_SPAWN_OFFSETS[name])
            Log.moveToken(log, action, offset, FACEUP, LOCKED)
        end
    end
end
function Log.unloadAmmo(log)
    --printToAll("Log.unloadAmmo")
    -- and obj.getRotation()[3]==0
    relativeHitCast(log, PORT_AMMO_OFFSET, isFaceUpAmmo, |obj| Log.resetAmmo(obj,false)) -- Log.moveToken(log, obj, PORT_AMMO_SRC_OFFSET, FACEDOWN)
    relativeHitCast(log, STBD_AMMO_OFFSET, isFaceUpAmmo, |obj| Log.resetAmmo(obj,true)) -- Log.moveToken(log, obj, STBD_AMMO_SRC_OFFSET, FACEDOWN))
end
